{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"architecture/","text":"Introduction \u00b6 The Leverege IoT Stack is an integrated set of four cloud-native software components that accelerate the development, deployment, and management of enterprise-grade, massive scale IoT applications for a variety of use cases and industries. In these guides, we will be covering the no-code project setup & configuration available to our users, along with all of our out-of-the-box features. These capabilities make up Leverege Supervise & Leverege Amplify. For documentation on how to use our stack as a developer, please refer to Architect & Build. Leverege Architect \u00b6 Leverege Architect provides the foundational tools and APIs to architect your IoT application by creating digital twins that model the real world, defining the system hierarchy, ingesting data from multiple sources, and customizing logic and workflows. Leverege Build \u00b6 Leverege Build provides a set of standardized plug-ins for key features, enables you to custom develop and add plug-ins of your own to extend functionality, and ensures the right look and feel across the entire application with a global theming engine. Leverege Supervise \u00b6 Leverege Supervise equips your internal organization with a centralized administrative view of all your devices, users, and applications to provide enterprise-grade monitoring and device management. Leverege Amplify \u00b6 Leverege Amplify provides end-users with beautifully designed UIs that include the actionable data views your end-users need, and everything can be tailored on a per-role basis using no-code configuration.","title":"Introduction"},{"location":"architecture/#introduction","text":"The Leverege IoT Stack is an integrated set of four cloud-native software components that accelerate the development, deployment, and management of enterprise-grade, massive scale IoT applications for a variety of use cases and industries. In these guides, we will be covering the no-code project setup & configuration available to our users, along with all of our out-of-the-box features. These capabilities make up Leverege Supervise & Leverege Amplify. For documentation on how to use our stack as a developer, please refer to Architect & Build.","title":"Introduction"},{"location":"architecture/#leverege-architect","text":"Leverege Architect provides the foundational tools and APIs to architect your IoT application by creating digital twins that model the real world, defining the system hierarchy, ingesting data from multiple sources, and customizing logic and workflows.","title":"Leverege Architect"},{"location":"architecture/#leverege-build","text":"Leverege Build provides a set of standardized plug-ins for key features, enables you to custom develop and add plug-ins of your own to extend functionality, and ensures the right look and feel across the entire application with a global theming engine.","title":"Leverege Build"},{"location":"architecture/#leverege-supervise","text":"Leverege Supervise equips your internal organization with a centralized administrative view of all your devices, users, and applications to provide enterprise-grade monitoring and device management.","title":"Leverege Supervise"},{"location":"architecture/#leverege-amplify","text":"Leverege Amplify provides end-users with beautifully designed UIs that include the actionable data views your end-users need, and everything can be tailored on a per-role basis using no-code configuration.","title":"Leverege Amplify"},{"location":"architecture/blueprint/","text":"Blueprints \u00b6 Blueprints define the structure of our data and relationship between data entities in our solution. Let's say you had a tracker in your system. You would create a tracker blueprint, then add all of the attributes (data fields) that tracker needs. For example, you might add a position attribute, a temperature attribute, and a serial number attribute. Before creating your blueprint, let's review the two different types of blueprints our system supports. Types Definition Device This blueprint will be used for IoT hardware. Examples might include a temperature gauge, a GPS tracker, or a more complex device that reports multiple types of information. Group This blueprint will be used for any type object that has a group of data fields. Examples include companies, locations, assets, vehicles, and more. Creating a Blueprint Blueprint Creation Order \u00b6 When adding blueprints to a new project, it is helpful to add them in order of most specific to least specific \u2013 starting with the devices that provide the least context to other devices and ending with those that provide the most. This is because data in our system is roughly hierarchical \u2013 defined in terms of parents and children. By adding the children first, when we add the parent we are able to say that the parent is a parent of this type of thing that already exists in the system. As an example, we'll be looking at a cow tracking solution for farming company. The company has multiple farm locations. Each of these locations has multiple cows. Each cow will have one tracker. At each location, the cow fields are divided up into zones. From this information, we can infer the below hierarchy is the best for our solution. This is because a location is the best organizational method for our cows, trackers, and zones. In the diagram below, arrows are pointing from a parent to a child and signify that there is a relationship between the two boxes. Hierarchy Outline Based on this hierarchy, we need to make 4 blueprints. These blueprints represent the four different types of things we will have in our system. Based on best practices, we'd want to start with the tracker blueprint and finish with the location blueprint. Tracker Blueprint Cow Blueprint Zone Blueprint Location Blueprint The actual process of creating this blueprint takes a few seconds. But thinking through a tracker\u2019s blueprint structure and setting it up correctly can help make your system easier to maintain, organize, and ultimately scale. Trackers send data in formats that we (typically) have no control over. They may include information our end users don\u2019t care about, or format it in a way that is difficult to use. We need to balance the demands of preserving the data as sent (for auditing and diagnosis), and representing it in a way that makes sense to the users of our system. Creating the Blueprint \u00b6 Now, it's quite easy to create a blueprint in our system. First, you'll navigate to the blueprints section and click the Create Blueprint button in the top right corner of the screen. Because the tracker is IoT hardware, you'll select the blueprint type Device . Creating a Blueprint Once you've created the blueprint, there are a few information fields to fill in about the blueprint. Field Definition Name Now, the easiest name to use would be tracker, but your system may have more than one type of tracker as it scales. Therefore, you might want to consider using the Tracker's marketing name (ex. Locator). Alias The alias should be short, obvious, and camelCase. We\u2019re going to set up API calls that query and route data using this alias. In this case, we'll use tracker Description Optional field to describe what your tracker in more depth. Here, we might put \"Gen2 Cow Tracker\" Adding Attributes \u00b6 Now that you've set up the blueprint, it's time to add your attributes. As a reminder, attributes are the data fields of a given blueprint. The steps to create an attribute are: Type in the attribute name in the path field input & hit return Select the type off the list (ex. string, temperature, geoposition) Customize any attribute configurations in the panel on the right The value that we type into the add attribute box controls how the data is actually stored in our system (the key in a JSON object). We use camelcase as a matter of convention. The value you type here may not, however, be friendly to read on a UI. If you want to change the display name of the attribute, you can enter the display name in the configuration panel on the right. As an example, let's say your attribute path is fishEaten . A display name for this might be Total Number of Fish Eaten . Planning the Attributes for IoT Devices \u00b6 The most technical blueprint to set up will be the tracker blueprint, as it involves knowledge of the inbound messages the tracker sends and must be coordinated with your data ingestor. Below, we'll take some example inbound messages and point out how you could format your tracker blueprint based off of the given information. Inbound Message Example { \"deviceId\" : \"981472630769911\" , \"time\" : 1619291293517 , \"payload\" : \"+STA,981472630769911,28.39,1$\" } Let's use the following example message to start off. The message is coming from the external world. It needs to be read by an ingestor that can translate into a device message that our system can understand. Our ingestor is going to choose how to parse out the information in this message, what bits of it to forward on, and how that data is named. We\u2019re going to use our tracker blueprint to set out how we want the data to be structured once it gets into our system--to dictate how the ingestor should translate this message. We can see that the inbound message to the ingestor gives us a deviceId, the time the message was sent, and the payload. In this case, the deviceId is an IMEI (International Mobile Equipment Identity), which is a commonly used ID format for IoT devices. The time the message was sent does not need to be included in the blueprint, and we'll trust our ingestor is storing that information in logs for future reference. The real action is in the payload. It comes as a single piece of data (a string), but is packed with information. Our ingestor can parse this into a friendly message format. We just need to figure out what the format of each attribute should be. Below, we've outlined an example of the data you may receive and the attribute format (data : format). Payload Breakdown { te mpera ture : nu mber/degF , posi t io n : { la t , lo n }, i n Mo t io n : boolea n , doorOpe n : boolea n , ligh ts : boolea n , imei : s tr i n g , las t Msg : s tr i n g , las t Upda te d : t imes ta mp , las t Recorded : t imes ta mp , na me : s tr i n g }","title":"Blueprints"},{"location":"architecture/blueprint/#blueprints","text":"Blueprints define the structure of our data and relationship between data entities in our solution. Let's say you had a tracker in your system. You would create a tracker blueprint, then add all of the attributes (data fields) that tracker needs. For example, you might add a position attribute, a temperature attribute, and a serial number attribute. Before creating your blueprint, let's review the two different types of blueprints our system supports. Types Definition Device This blueprint will be used for IoT hardware. Examples might include a temperature gauge, a GPS tracker, or a more complex device that reports multiple types of information. Group This blueprint will be used for any type object that has a group of data fields. Examples include companies, locations, assets, vehicles, and more. Creating a Blueprint","title":"Blueprints"},{"location":"architecture/blueprint/#blueprint-creation-order","text":"When adding blueprints to a new project, it is helpful to add them in order of most specific to least specific \u2013 starting with the devices that provide the least context to other devices and ending with those that provide the most. This is because data in our system is roughly hierarchical \u2013 defined in terms of parents and children. By adding the children first, when we add the parent we are able to say that the parent is a parent of this type of thing that already exists in the system. As an example, we'll be looking at a cow tracking solution for farming company. The company has multiple farm locations. Each of these locations has multiple cows. Each cow will have one tracker. At each location, the cow fields are divided up into zones. From this information, we can infer the below hierarchy is the best for our solution. This is because a location is the best organizational method for our cows, trackers, and zones. In the diagram below, arrows are pointing from a parent to a child and signify that there is a relationship between the two boxes. Hierarchy Outline Based on this hierarchy, we need to make 4 blueprints. These blueprints represent the four different types of things we will have in our system. Based on best practices, we'd want to start with the tracker blueprint and finish with the location blueprint. Tracker Blueprint Cow Blueprint Zone Blueprint Location Blueprint The actual process of creating this blueprint takes a few seconds. But thinking through a tracker\u2019s blueprint structure and setting it up correctly can help make your system easier to maintain, organize, and ultimately scale. Trackers send data in formats that we (typically) have no control over. They may include information our end users don\u2019t care about, or format it in a way that is difficult to use. We need to balance the demands of preserving the data as sent (for auditing and diagnosis), and representing it in a way that makes sense to the users of our system.","title":"Blueprint Creation Order"},{"location":"architecture/blueprint/#creating-the-blueprint","text":"Now, it's quite easy to create a blueprint in our system. First, you'll navigate to the blueprints section and click the Create Blueprint button in the top right corner of the screen. Because the tracker is IoT hardware, you'll select the blueprint type Device . Creating a Blueprint Once you've created the blueprint, there are a few information fields to fill in about the blueprint. Field Definition Name Now, the easiest name to use would be tracker, but your system may have more than one type of tracker as it scales. Therefore, you might want to consider using the Tracker's marketing name (ex. Locator). Alias The alias should be short, obvious, and camelCase. We\u2019re going to set up API calls that query and route data using this alias. In this case, we'll use tracker Description Optional field to describe what your tracker in more depth. Here, we might put \"Gen2 Cow Tracker\"","title":"Creating the Blueprint"},{"location":"architecture/blueprint/#adding-attributes","text":"Now that you've set up the blueprint, it's time to add your attributes. As a reminder, attributes are the data fields of a given blueprint. The steps to create an attribute are: Type in the attribute name in the path field input & hit return Select the type off the list (ex. string, temperature, geoposition) Customize any attribute configurations in the panel on the right The value that we type into the add attribute box controls how the data is actually stored in our system (the key in a JSON object). We use camelcase as a matter of convention. The value you type here may not, however, be friendly to read on a UI. If you want to change the display name of the attribute, you can enter the display name in the configuration panel on the right. As an example, let's say your attribute path is fishEaten . A display name for this might be Total Number of Fish Eaten .","title":"Adding Attributes"},{"location":"architecture/blueprint/#planning-the-attributes-for-iot-devices","text":"The most technical blueprint to set up will be the tracker blueprint, as it involves knowledge of the inbound messages the tracker sends and must be coordinated with your data ingestor. Below, we'll take some example inbound messages and point out how you could format your tracker blueprint based off of the given information. Inbound Message Example { \"deviceId\" : \"981472630769911\" , \"time\" : 1619291293517 , \"payload\" : \"+STA,981472630769911,28.39,1$\" } Let's use the following example message to start off. The message is coming from the external world. It needs to be read by an ingestor that can translate into a device message that our system can understand. Our ingestor is going to choose how to parse out the information in this message, what bits of it to forward on, and how that data is named. We\u2019re going to use our tracker blueprint to set out how we want the data to be structured once it gets into our system--to dictate how the ingestor should translate this message. We can see that the inbound message to the ingestor gives us a deviceId, the time the message was sent, and the payload. In this case, the deviceId is an IMEI (International Mobile Equipment Identity), which is a commonly used ID format for IoT devices. The time the message was sent does not need to be included in the blueprint, and we'll trust our ingestor is storing that information in logs for future reference. The real action is in the payload. It comes as a single piece of data (a string), but is packed with information. Our ingestor can parse this into a friendly message format. We just need to figure out what the format of each attribute should be. Below, we've outlined an example of the data you may receive and the attribute format (data : format). Payload Breakdown { te mpera ture : nu mber/degF , posi t io n : { la t , lo n }, i n Mo t io n : boolea n , doorOpe n : boolea n , ligh ts : boolea n , imei : s tr i n g , las t Msg : s tr i n g , las t Upda te d : t imes ta mp , las t Recorded : t imes ta mp , na me : s tr i n g }","title":"Planning the Attributes for IoT Devices"},{"location":"architecture/blueprint/relationship/","text":"Blueprint Relationships \u00b6 Once you've created all of your blueprints, it's time to form your relationships. Let's take a look at our hierarchy again to form a plan. Hierarchy Outline Our IoT stack supports 4 types of relationships. Note that the parent should always come first in the relationship. Imagine you have a location with 20 cows. The location is the parent in this hierarchy, meaning that this is a one-to-many relationship. Relationships Should Always Be Created on the Parent Blueprint Whenever you are making a new relationship, it must be done on the parent blueprint Types Definition One-to-Many In a one-to-many relationship, there is one parent (ex. Location) and many children (ex. Cows) One-to-One In a one-to-one relationship, there is one parent (ex. Cow) and one child (ex. Tracker) Many-to-One In a many-to-one relationship, there are many parents who reference one child. Many-to-Many In a many-to-many relationship, there are many parents who reference many children The two most common relationship types are one-to-many and one-to-one. One-to-many relationships are commonly used for locations, companies, regions, etc and their children. One-to-one relationships are frequently used when you are pairing a single tracker to a single cow. Revisiting our farming example, let's discuss all of the different relationships. As a reminder, the farming company has multiple farm locations. Each of these locations has multiple cows. Each cow will have one tracker. At each location, the cow fields are divided up into zones. From this information, we can infer the below hierarchy is the best for our solution. This is because a location is the best organizational method for our cows, trackers, and zones. In the diagram below, arrows are pointing from a parent to a child and signify that there is a relationship between the two boxes. To start, we'll take a look at the location blueprint and the relationships it should have. In a given location, you have multiple cows, trackers, and zones. These cows, trackers, and zones are only related to the given location. This means the relationship you want to use is a one-to-many relationship for each of the location's children (outlined below). Location Relationships Locations have a one-to-many relationship with cows Locations have a one-to-many relationship with trackers Locations have a one-to-many relationship zones We have one other relationship in this case, which is a one-to-one relationship between the cow & tracker. In this case, the cow is the parent because we'll want to set up something called data forwarding. Cow Relationship Cows have a one-to-one relationship with trackers Data Forwarding When data forwarding is enabled, any data that the child device reports to our system will be forwarded to the parent device and stored on both the child and parent devices. This is useful in some circumstances like position tracking, where you want to store the data the tracker reported about it's location in the cow's history. To create a relationship, you'll enter the name of the child blueprint in the path input field (singular or plural depending on if it's a one-to-one or one-to-many relationship respectively). When you select the type of attribute, you will choose relationship. Then you will be prompted to select the blueprint and relationship type.","title":"Relationships"},{"location":"architecture/blueprint/relationship/#blueprint-relationships","text":"Once you've created all of your blueprints, it's time to form your relationships. Let's take a look at our hierarchy again to form a plan. Hierarchy Outline Our IoT stack supports 4 types of relationships. Note that the parent should always come first in the relationship. Imagine you have a location with 20 cows. The location is the parent in this hierarchy, meaning that this is a one-to-many relationship. Relationships Should Always Be Created on the Parent Blueprint Whenever you are making a new relationship, it must be done on the parent blueprint Types Definition One-to-Many In a one-to-many relationship, there is one parent (ex. Location) and many children (ex. Cows) One-to-One In a one-to-one relationship, there is one parent (ex. Cow) and one child (ex. Tracker) Many-to-One In a many-to-one relationship, there are many parents who reference one child. Many-to-Many In a many-to-many relationship, there are many parents who reference many children The two most common relationship types are one-to-many and one-to-one. One-to-many relationships are commonly used for locations, companies, regions, etc and their children. One-to-one relationships are frequently used when you are pairing a single tracker to a single cow. Revisiting our farming example, let's discuss all of the different relationships. As a reminder, the farming company has multiple farm locations. Each of these locations has multiple cows. Each cow will have one tracker. At each location, the cow fields are divided up into zones. From this information, we can infer the below hierarchy is the best for our solution. This is because a location is the best organizational method for our cows, trackers, and zones. In the diagram below, arrows are pointing from a parent to a child and signify that there is a relationship between the two boxes. To start, we'll take a look at the location blueprint and the relationships it should have. In a given location, you have multiple cows, trackers, and zones. These cows, trackers, and zones are only related to the given location. This means the relationship you want to use is a one-to-many relationship for each of the location's children (outlined below). Location Relationships Locations have a one-to-many relationship with cows Locations have a one-to-many relationship with trackers Locations have a one-to-many relationship zones We have one other relationship in this case, which is a one-to-one relationship between the cow & tracker. In this case, the cow is the parent because we'll want to set up something called data forwarding. Cow Relationship Cows have a one-to-one relationship with trackers Data Forwarding When data forwarding is enabled, any data that the child device reports to our system will be forwarded to the parent device and stored on both the child and parent devices. This is useful in some circumstances like position tracking, where you want to store the data the tracker reported about it's location in the cow's history. To create a relationship, you'll enter the name of the child blueprint in the path input field (singular or plural depending on if it's a one-to-one or one-to-many relationship respectively). When you select the type of attribute, you will choose relationship. Then you will be prompted to select the blueprint and relationship type.","title":"Blueprint Relationships"},{"location":"architecture/core/","text":"Introduction \u00b6 Below is a brief introduction to the different terminology you'll run into in the Project Setup section. Project \u00b6 Projects are the top-level organization layer in our stack. They hold most other objects and data related to your solution, such as blueprints, systems, message routes, and scripts. A project has project-specific users (accounts), that are used to assign access to systems and devices. Blueprint \u00b6 A Blueprint is used to define IoT device data and organizational data. Blueprints can have an alias that is useful when accessing data via the Model Interface API. The alias defines a human readable unique name for the model. Each Blueprint has a set of attributes. Messages for a Device can be routed based on its Blueprint type, allowing different handling of different data types. Attribute \u00b6 An Attribute defines a field in a Blueprint. There are several types of Attributes such as string, numbers, units, timestamps and relationships. The Attributes can be used to dynamically interpret data in a Device. Device \u00b6 A Device represents a thing, either an IoT device or an organizational construct. Each Device has a Blueprint that defines what kind of thing it is. Every Device has a Leverege generated UUID. The Device can have multiple source-specific IDs as well. These source-specific IDs are captured through the concept of a network alias. System \u00b6 A System holds a collection of Devices. Project Users can be given access rights to a System, allowing different users to access different collections of Devices. Network \u00b6 A Network represents a source of device data. When a device needs to be contacted, the Network is used as the target. In particular, messages are published to the <networkId>-outbound topic . The ingestion service setup to manage that network's data can listen on this topic and then communicate appropriately to the source server. The Network Id is also part of the external identity of a Device. Template \u00b6 Templates are used to create branded emails or SMS notifications. When Reason triggers a send email request, a Template ID and contextual data can be supplied to produce the branded email. Users \u00b6 There are two types of users in the Leverege Stack: Platform Users are users that can create and edit a Project and all of the supporting pieces such as Blueprints, Networks, Scripts. Project Users are end users of the resulting product. They have access to Systems and Devices. Project Users' usernames are unique to a Project, so two different Projects can have a user with the username 'demo'. Api Access \u00b6 The Api Access key is used to allow a server to communicate with the Api Server as an admin of the project without having to login. This key is used with the api-service library.","title":"Introduction"},{"location":"architecture/core/#introduction","text":"Below is a brief introduction to the different terminology you'll run into in the Project Setup section.","title":"Introduction"},{"location":"architecture/core/#project","text":"Projects are the top-level organization layer in our stack. They hold most other objects and data related to your solution, such as blueprints, systems, message routes, and scripts. A project has project-specific users (accounts), that are used to assign access to systems and devices.","title":"Project"},{"location":"architecture/core/#blueprint","text":"A Blueprint is used to define IoT device data and organizational data. Blueprints can have an alias that is useful when accessing data via the Model Interface API. The alias defines a human readable unique name for the model. Each Blueprint has a set of attributes. Messages for a Device can be routed based on its Blueprint type, allowing different handling of different data types.","title":"Blueprint"},{"location":"architecture/core/#attribute","text":"An Attribute defines a field in a Blueprint. There are several types of Attributes such as string, numbers, units, timestamps and relationships. The Attributes can be used to dynamically interpret data in a Device.","title":"Attribute"},{"location":"architecture/core/#device","text":"A Device represents a thing, either an IoT device or an organizational construct. Each Device has a Blueprint that defines what kind of thing it is. Every Device has a Leverege generated UUID. The Device can have multiple source-specific IDs as well. These source-specific IDs are captured through the concept of a network alias.","title":"Device"},{"location":"architecture/core/#system","text":"A System holds a collection of Devices. Project Users can be given access rights to a System, allowing different users to access different collections of Devices.","title":"System"},{"location":"architecture/core/#network","text":"A Network represents a source of device data. When a device needs to be contacted, the Network is used as the target. In particular, messages are published to the <networkId>-outbound topic . The ingestion service setup to manage that network's data can listen on this topic and then communicate appropriately to the source server. The Network Id is also part of the external identity of a Device.","title":"Network"},{"location":"architecture/core/#template","text":"Templates are used to create branded emails or SMS notifications. When Reason triggers a send email request, a Template ID and contextual data can be supplied to produce the branded email.","title":"Template"},{"location":"architecture/core/#users","text":"There are two types of users in the Leverege Stack: Platform Users are users that can create and edit a Project and all of the supporting pieces such as Blueprints, Networks, Scripts. Project Users are end users of the resulting product. They have access to Systems and Devices. Project Users' usernames are unique to a Project, so two different Projects can have a user with the username 'demo'.","title":"Users"},{"location":"architecture/core/#api-access","text":"The Api Access key is used to allow a server to communicate with the Api Server as an admin of the project without having to login. This key is used with the api-service library.","title":"Api Access"},{"location":"architecture/network/","text":"Networks \u00b6 A Network represents a source of device data. When a device needs to be contacted, the Network is used as the target. In particular, messages are published to the <networkId>-outbound topic . The ingestion service setup to manage that network's data can listen on this topic and then communicate appropriately to the source server. The Network ID is also part external identity of a Device. Inside the Leverege Stack, devices (and many other elements of a project) are assigned a Base62 UUID. Base62 IDs consist of the capital letters A-Z, the lower case letters a-z, and the numbers 0\u20139. It is a binary-to-text encoding schemes that represent binary data in an ASCII string format. An example of a UUID is 1pTW01YR4mUAEbcHhbXHk8 . But these IDs are not how devices refer to themselves when sending a message, or how users refer to a device when they need to interact with it. Revisiting our farm example, you'll remember that we mentioned our tracker had an IMEI that was used as its identifier (deviceId) when it reported. Trackers also usually have some type of label on the hardware, which frequently include a QR code or barcode for scanning purposes. In our farm example, let's assume the tracker has a QR code which encodes a serial number used to identify the tracker. This is a different ID than the IMEI & the UUID. It's common that IoT devices have multiple IDs they go by. Networks let us define how our internal devices will be mapped onto the the source, and set up messaging topics that allow communication with the device using these external names. Creating a Network \u00b6 Creating a Network In your Architect project, click the Networks tab on the left side, and click the Add Custom button in the top right corner. The network creation form asks for three fields: a name, an api key (what we\u2019ll call a networkId for reasons that will be come clear in a moment), and list of network identifiers (what we\u2019ll call aliasKeys). Label Value Definition Name Display Name This is the display name of your network. Device ID deviceId This is the identifier of the given device ID. Identifiers aliasKey This describes what type of identifier the given device ID is. It refers to a identifier type that we will enter into our network definition. API Key networkId This is used as the networkID and tells us which network, from the list of the networks on the given API server, the API should look to find this device. To understand what work these options are doing, let\u2019s take a look at our message docs for inbound messages. Inbound messages include a networkId, an aliasKey, and a deviceId. Note the example below: /** ... * @param { s tr i n g } da ta . net workId The net workId o f t he source * @param { s tr i n g } da ta .deviceId A s tr i n g represe nt i n g t he ex ternal na me o f t he device. This could be a serial nu mber , MAC address , VIN , e t c. * @param { s tr i n g } da ta .aliasKey The na me o f t he key t ha t f orms t he mappi n g be t wee n t he ex ternal device\u2019s id a n d t he i nternal device. This is s t ored i n t he i nternal device\u2019s aliases lis t , a n d ten ds t o be u n ique per net work. ... */ API Server will, in essence, look at the given network for a device with an aliasKey value equal to the deviceId, and route the message to that device. When creating the network, we are defining the networkId and the aliasKeys on that network. The actual deviceId gets created at the device level. Choosing Good Network Values \u00b6 Back to our Architect UI, where we are creating the network, we need to choose the name, API Key ('networkId'), and Identifiers ('aliasKeys'). The name is simply a human readable display name for the network, so that we can pick it out on our list of networks. As an example, let's create a network for the trackers in our farm example. We are creating the network for our cow trackers which are GPS-based, so let's call it Cow GPS Tracker Network. Note that you should not include your environment in your network name (for example, Dev Tracker Network is a bad name). The networkId (entered in the \u2018Api Key\u2019 field) must be unique across all projects in your Architect instance. It should be short, and describe the source / interface. For our example, we'll use \u2018cow-tracker-network\u2019. By convention, networkIds are skewer cased. The aliasKeys are the types of external identifiers. In our farm example, the devices provide us with IMEIs when they send messages, and the users will use the serial number. It\u2019s a good practice to be descriptive and specific with these names (and not just default to \u2018deviceId\u2019, for example). So lets set that field to \u2018imei,serialNumber\u2019. Creating a Network To tie this together, this tells us that a parsed inbound Cow Tracker device message from our ingestor might look something like this: { t ype : 'i n bou n dDa ta Eve nt Msg' , t ime : 1619388341985 , net workId : 'cow - tra cker - net work' , aliasKey : 'imei , serialNumber' , deviceId : ' 981472630769911 ' , da ta : [ { pa t h : ' te mpera ture ' , value : 30.20 } ], }","title":"Networks"},{"location":"architecture/network/#networks","text":"A Network represents a source of device data. When a device needs to be contacted, the Network is used as the target. In particular, messages are published to the <networkId>-outbound topic . The ingestion service setup to manage that network's data can listen on this topic and then communicate appropriately to the source server. The Network ID is also part external identity of a Device. Inside the Leverege Stack, devices (and many other elements of a project) are assigned a Base62 UUID. Base62 IDs consist of the capital letters A-Z, the lower case letters a-z, and the numbers 0\u20139. It is a binary-to-text encoding schemes that represent binary data in an ASCII string format. An example of a UUID is 1pTW01YR4mUAEbcHhbXHk8 . But these IDs are not how devices refer to themselves when sending a message, or how users refer to a device when they need to interact with it. Revisiting our farm example, you'll remember that we mentioned our tracker had an IMEI that was used as its identifier (deviceId) when it reported. Trackers also usually have some type of label on the hardware, which frequently include a QR code or barcode for scanning purposes. In our farm example, let's assume the tracker has a QR code which encodes a serial number used to identify the tracker. This is a different ID than the IMEI & the UUID. It's common that IoT devices have multiple IDs they go by. Networks let us define how our internal devices will be mapped onto the the source, and set up messaging topics that allow communication with the device using these external names.","title":"Networks"},{"location":"architecture/network/#creating-a-network","text":"Creating a Network In your Architect project, click the Networks tab on the left side, and click the Add Custom button in the top right corner. The network creation form asks for three fields: a name, an api key (what we\u2019ll call a networkId for reasons that will be come clear in a moment), and list of network identifiers (what we\u2019ll call aliasKeys). Label Value Definition Name Display Name This is the display name of your network. Device ID deviceId This is the identifier of the given device ID. Identifiers aliasKey This describes what type of identifier the given device ID is. It refers to a identifier type that we will enter into our network definition. API Key networkId This is used as the networkID and tells us which network, from the list of the networks on the given API server, the API should look to find this device. To understand what work these options are doing, let\u2019s take a look at our message docs for inbound messages. Inbound messages include a networkId, an aliasKey, and a deviceId. Note the example below: /** ... * @param { s tr i n g } da ta . net workId The net workId o f t he source * @param { s tr i n g } da ta .deviceId A s tr i n g represe nt i n g t he ex ternal na me o f t he device. This could be a serial nu mber , MAC address , VIN , e t c. * @param { s tr i n g } da ta .aliasKey The na me o f t he key t ha t f orms t he mappi n g be t wee n t he ex ternal device\u2019s id a n d t he i nternal device. This is s t ored i n t he i nternal device\u2019s aliases lis t , a n d ten ds t o be u n ique per net work. ... */ API Server will, in essence, look at the given network for a device with an aliasKey value equal to the deviceId, and route the message to that device. When creating the network, we are defining the networkId and the aliasKeys on that network. The actual deviceId gets created at the device level.","title":"Creating a Network"},{"location":"architecture/network/#choosing-good-network-values","text":"Back to our Architect UI, where we are creating the network, we need to choose the name, API Key ('networkId'), and Identifiers ('aliasKeys'). The name is simply a human readable display name for the network, so that we can pick it out on our list of networks. As an example, let's create a network for the trackers in our farm example. We are creating the network for our cow trackers which are GPS-based, so let's call it Cow GPS Tracker Network. Note that you should not include your environment in your network name (for example, Dev Tracker Network is a bad name). The networkId (entered in the \u2018Api Key\u2019 field) must be unique across all projects in your Architect instance. It should be short, and describe the source / interface. For our example, we'll use \u2018cow-tracker-network\u2019. By convention, networkIds are skewer cased. The aliasKeys are the types of external identifiers. In our farm example, the devices provide us with IMEIs when they send messages, and the users will use the serial number. It\u2019s a good practice to be descriptive and specific with these names (and not just default to \u2018deviceId\u2019, for example). So lets set that field to \u2018imei,serialNumber\u2019. Creating a Network To tie this together, this tells us that a parsed inbound Cow Tracker device message from our ingestor might look something like this: { t ype : 'i n bou n dDa ta Eve nt Msg' , t ime : 1619388341985 , net workId : 'cow - tra cker - net work' , aliasKey : 'imei , serialNumber' , deviceId : ' 981472630769911 ' , da ta : [ { pa t h : ' te mpera ture ' , value : 30.20 } ], }","title":"Choosing Good Network Values"},{"location":"architecture/roles/","text":"Roles & Permissions Overview \u00b6 The Leverege Stack uses a role-based access control system (RBAC). Role-based access control refers to the idea of assigning permissions to users based on their role within an organization. It offers a simple, manageable approach to access management that is less prone to error than assigning permissions to users individually. When using RBAC, you analyze the needs of your users and group them into roles based on common responsibilities. You then assign one or more roles to each user and one or more permissions to each role. The user-role and role-permissions relationships make it simple to perform user assignments since users no longer need to be managed individually, but instead have privileges that conform to the permissions assigned to their role(s). For example, if you were using RBAC to control access for a cow tracking application, you could give the farm manager a role that allows them create locations, add & manage users, and view employee performance analytics. Farm hands may have a role that only shows them the cows at a given location and any alerts associated with that location. When planning your access control strategy, it's best practice to assign users the fewest number of permissions that allow them to get their work done. This is called the Principle of Least Privilege. Roles & Permissions UI Terminology \u00b6 Field Definition Permission Defines a single action that can be done (create, read, update, delete, list) Role A group of permissions that indicate what a user with this role can do. Usually based on the user personas of a given application. Roles have a specific ID referred to as role ID Resource ID The unique identity of something like a device, system, project, location, asset, etc. User ID The unique ID of the \u2018user\u2019. Can be any ID representing the account. This is also the API Access ID. User Role Combines a user ID and a role ID with a resource ID CRUDL An acronym that stands for Create, Read, Update, Delete, List. These are the most common operations that can be performed on objects in the Leverege Stack Roles \u00b6 Essentially, a role is a collection of permissions that you can apply to users. Using roles makes it easier to add, remove, and adjust permissions than assigning permissions to users individually. As your user base increases in scale and complexity, roles become particularly useful. You can also use roles to collect permissions defined for various APIs. For example, say you have a third-party tool that tracks your barn equipment. Your barn equipment API role could have a Create equipment in a location & Update equipment in a location permissions allow the API to create and update equipment in our database. User Roles \u00b6 User Roles represent bindings between a user ID, role ID, and resource ID. As an example, a user role represents \u201cgiving Steve (User ID) the ability to act as a Farm Hand (Role ID) at Eric\u2019s Farm (Resource ID)\u201d.","title":"Roles & Permissions Overview"},{"location":"architecture/roles/#roles-permissions-overview","text":"The Leverege Stack uses a role-based access control system (RBAC). Role-based access control refers to the idea of assigning permissions to users based on their role within an organization. It offers a simple, manageable approach to access management that is less prone to error than assigning permissions to users individually. When using RBAC, you analyze the needs of your users and group them into roles based on common responsibilities. You then assign one or more roles to each user and one or more permissions to each role. The user-role and role-permissions relationships make it simple to perform user assignments since users no longer need to be managed individually, but instead have privileges that conform to the permissions assigned to their role(s). For example, if you were using RBAC to control access for a cow tracking application, you could give the farm manager a role that allows them create locations, add & manage users, and view employee performance analytics. Farm hands may have a role that only shows them the cows at a given location and any alerts associated with that location. When planning your access control strategy, it's best practice to assign users the fewest number of permissions that allow them to get their work done. This is called the Principle of Least Privilege. Roles & Permissions UI","title":"Roles &amp; Permissions Overview"},{"location":"architecture/roles/#terminology","text":"Field Definition Permission Defines a single action that can be done (create, read, update, delete, list) Role A group of permissions that indicate what a user with this role can do. Usually based on the user personas of a given application. Roles have a specific ID referred to as role ID Resource ID The unique identity of something like a device, system, project, location, asset, etc. User ID The unique ID of the \u2018user\u2019. Can be any ID representing the account. This is also the API Access ID. User Role Combines a user ID and a role ID with a resource ID CRUDL An acronym that stands for Create, Read, Update, Delete, List. These are the most common operations that can be performed on objects in the Leverege Stack","title":"Terminology"},{"location":"architecture/roles/#roles","text":"Essentially, a role is a collection of permissions that you can apply to users. Using roles makes it easier to add, remove, and adjust permissions than assigning permissions to users individually. As your user base increases in scale and complexity, roles become particularly useful. You can also use roles to collect permissions defined for various APIs. For example, say you have a third-party tool that tracks your barn equipment. Your barn equipment API role could have a Create equipment in a location & Update equipment in a location permissions allow the API to create and update equipment in our database.","title":"Roles"},{"location":"architecture/roles/#user-roles","text":"User Roles represent bindings between a user ID, role ID, and resource ID. As an example, a user role represents \u201cgiving Steve (User ID) the ability to act as a Farm Hand (Role ID) at Eric\u2019s Farm (Resource ID)\u201d.","title":"User Roles"},{"location":"architecture/roles/permission/","text":"Permissions \u00b6 Terminology \u00b6 Field Definition System Systems are buckets of devices that can be used to logically separate sets of devices from each other. Systems use only the common CRUDL permissions. Device Devices are digital shadows of physical objects. They can represent hardware devices like trackers, physical assets like cows, or organizational buckets like companies. Blueprint Blueprints define the structure of our devices and relationship between device entities in our solution. Some permissions are generated when Blueprints or relationship Attributes are made. Common Permissions \u00b6 Some permissions can be seen used against nearly every type of object in the platform. These are the CRUDL permissions. CRUDL is an acronym that stands for Create, Read, Update, Delete, List. Create - the permission to create an object Read - given some object\u2019s id, the ability to read its data Update - given some object\u2019s id, the ability to update its data Delete - given some object\u2019s id, the ability to delete it List - the ability to get a list of all objects without having to know their ids Permission Categories \u00b6 When adding permissions to roles, you'll see that there are 3 different categories of permissions. Category Definition Custom Custom refers to custom permissions built for custom actions or access in your project Project Project permissions are permissions that are autogenerated for your blueprints, relationships, etc. They are project-specific and relate to your data architecture. Imagine Imagine permissions are permissions relating to modules and features that are the same across projects. An example of this is user management permissions. System Permissions \u00b6 Systems are buckets of devices that can be used to logically separate sets of devices from each other. Systems use only the common CRUDL permissions. Device \u00b6 Devices are digital shadows of physical objects. They can represent hardware devices like trackers, physical assets like cows, or organizational buckets like companies. Devices use the common CRUDL permissions, but also have the following custom permissions: readData - Read not only a device\u2019s header information (like a name), but also its data, which might include things like sensor readings, addresses, or contact information. readHistory - View the changes to a device\u2019s data over time readEvents - View the relevant events that have occurred to a device over time. Might include things like threshold violations or alerts. updateEvents - Update or create device events sendMessage - Send a device a message. This may only be relevant if a device is physically capable of receiving messages, like in the instance of configuring a tracker or other piece of hardware. runSimulation - Simulate a device readByNetworkAlias - Get devices by their network ids deleteRelationship - Delete a device's relationship. For instance, removing a cow from a barn stall, or unpairing a car and a tracker. Deleting a relationship will not delete the device. createRelationship - Create a device\u2019s relationships. For instance, pairing a car and tracker. Creating a relationship does not create a device. updateData - Update a device\u2019s data. This generates historical data points, and will be reflected to anyone with a readData permission. An example of updating a device\u2019s data would be setting a Farm\u2019s address. updateAnyData - A more powerful version of updateData. Users with updateData are restricted to updating fields as validated by the device\u2019s Blueprint. Users with updateAnyData are not subject to that restriction. As an example, a user with updateData likely couldn\u2019t change the temperature reported by a sensor, but a user with updateAnyData could. This permission is usually only for administrators. Blueprints & Relationships \u00b6 Some permissions are generated when Blueprints or relationship Attributes are made. They tend to follow a similar form as the Device permissions. The main difference is that Blueprint or Attribute level permissions only allow a user to perform actions on Devices of a given type, or at certain paths in the hierarchy as defined by the Attributes. Their permissions are as follows: Blueprints: \u00b6 For blueprint permissions, these will appear in the blueprint section. For our farm example, a permission the farm administrator might need is Create Locations . This would allow the farm manager to create new locations. Create Blueprint - create Devices of a given blueprint type Read Blueprint - read Devices of a type (if you know the id) Update Blueprint - update Devices of a given blueprint type Delete Blueprint - delete Devices of a type List Blueprint - list Devices of a type Read Blueprint History - read the history of any Devices of a given type Read Blueprint Events - read the events of any Devices of a given type Update Blueprint Events - update the events of any Devices of a given type Send Blueprint Messages - send messages to any Devices of a given type Delete Blueprint Relationships - delete any relationships that go to Devices of a given type Create Blueprint Relationships - delete any relationships that go to Devices of a given type Update Blueprint Data - update the data of any Devices of a given type Update Any Blueprint Data -update any data (unvalidated) of any Devices of a given type Relationship Attributes \u00b6 To better understand relationship attribute permissions, we will use our farm example. Imagine you want to permission a farmhand to take actions against a cow, but ONLY in the location they have access to. To do this, you would give the farm hand role permissions like \"Create a Cow in a Location\". If a user has the farmhand role in the Rockville location, they will be able to create cows inside that location. If they do not have a role at the Atlanta location, they will not be able to access that location or create cows in that location. To better understand the permissions below, we will include the example blueprints Cow & Location in parenthesis, while Blueprint X & Blueprint Y represent two generic blueprints that have a relationship with one another. Create Blueprint X (Cows) in Blueprint Y (Location): Create Devices of a given Blueprint at a given place in the hierarchy Read Blueprint X (Cow) from a Blueprint Y (Location): Read Devices of a given Blueprint at a given place in the hierarchy (must know the id) Update Blueprint X (Cow) in a Blueprint Y (Location): Update Devices of a given Blueprint at a given place in the hierarchy Delete Blueprint X (Cow) from a Blueprint Y (Location): Delete Devices of a given Blueprint at a given place in the hierarchy List Blueprint X (Cow) in a Blueprint Y (Location): List Devices of a given Blueprint at a given place in the hierarchy Read Blueprint X (Cow) History in a Blueprint Y (Location): Read the history of Devices of a given Blueprint at a given place in the hierarchy Read Blueprint X (Cow) Events in a Blueprint Y (Location): Read the events of Devices of a given Blueprint at a given place in the hierarchy Update Blueprint X (Cow) Events in a Blueprint Y (Location): Update the events of Devices of a given Blueprint at a given place in the hierarchy Send Blueprint X (Cow) Messages in a Blueprint Y (Location): Send messages to Devices of a given Blueprint at a given place in the hierarchy Remove Blueprint X (Cow) from a Blueprint Y (Location): Delete relationships to Devices of a given Blueprint at a given place in the hierarchy Add Blueprint X (Cow) to a Blueprint Y (Location): Create Relationships to Devices of a given Blueprint at a given place in the hierarchy Update Blueprint X (Cow) data in a Blueprint Y (Location): Update the data of Devices of a given Blueprint at a given place in the hierarchy Update Any Blueprint X (Cow) Data in a Blueprint Y (Location): Update any data (unvalidated) of Devices of a given Blueprint at a given place in the hierarchy Example \u00b6 In our farming example, let's imagine we have the following hierarchy. Example of Farm Hierarchy Let's say you want to give your farmhand role the ability to create a cow, but only in a location. Your permission for this would be: Create a cow in a location This permission allows the user to create a cow when they are at the location level cows page. This user would not be able to create a cow on the cows page at a company. Now, you want your farm manager role to be able to create a cow in a location and in a company. They would have two permissions on their role: Create a cow in a location Create a cow in a company Finally, let's say instead of letting the farm manager role create cows in a location or in a company, you want them to be able to create a cow anywhere in the system. For this, you would use the following blueprint-level permission Can create a cow API Access \u00b6 ApiAccess objects represent sets of tokens/keys that allow third party services to connect to the Leverege Platform (usually as project level admins) using OAuth2. ApiAccesses use only the common CRUDL permissions. User Management \u00b6 Users are the users of a give IoT project. Users use the common CRUDL permissions, but also have the following custom permission. assignRoles - allows a user to assign roles to other users. Unless they\u2019re admin, users can only assign roles they already have. For the common CRUDL permissions, when applied to user management, they look like the following. Users CRUDL Permissions \u00b6 Create Delete List Read Update Network \u00b6 Networks represent a collection of mappings from external ids to internal Leverege ids. Networks ensure that only one device at a given time can have a given external mapping. For example, if you are sending tracker data into the Leverege Stack, that data will need some form of identifier to say what device it is from. Many times that id is chosen by the manufacturer, say a serial number or SKU. A network will map that serial number or SKU to a device\u2019s unique id in the Leverege Stack, and ensure that mapping is one-to-one. Networks use only the common CRUDL permissions. Common Permission Needed for Pairing readByNetworkAlias is a common permission that must be added to a role if that role is responsible for pairing one device to another and the network ID is used in the pairing form Configuration \u00b6 By default, any user can perform UI configuration for themselves. To learn move about what UI configuration entails, please visit our section in the documentation on configuration. Note that an engineer has the ability to hide configuration on a per-role basis in the config file on the UI. System-Level Access Required For a user to configure UIs for other users, they must have a role at the system-level that has the resource permissions For a user to be able to configure a UI for a given role or for all roles, they will need specific permissions against resources, which refer to the UI resources used to show configurations per role. Resource permissions are common CRUDL permissions. Resource Permissions \u00b6 Create Delete List Read Update","title":"Permissions"},{"location":"architecture/roles/permission/#permissions","text":"","title":"Permissions"},{"location":"architecture/roles/permission/#terminology","text":"Field Definition System Systems are buckets of devices that can be used to logically separate sets of devices from each other. Systems use only the common CRUDL permissions. Device Devices are digital shadows of physical objects. They can represent hardware devices like trackers, physical assets like cows, or organizational buckets like companies. Blueprint Blueprints define the structure of our devices and relationship between device entities in our solution. Some permissions are generated when Blueprints or relationship Attributes are made.","title":"Terminology"},{"location":"architecture/roles/permission/#common-permissions","text":"Some permissions can be seen used against nearly every type of object in the platform. These are the CRUDL permissions. CRUDL is an acronym that stands for Create, Read, Update, Delete, List. Create - the permission to create an object Read - given some object\u2019s id, the ability to read its data Update - given some object\u2019s id, the ability to update its data Delete - given some object\u2019s id, the ability to delete it List - the ability to get a list of all objects without having to know their ids","title":"Common Permissions"},{"location":"architecture/roles/permission/#permission-categories","text":"When adding permissions to roles, you'll see that there are 3 different categories of permissions. Category Definition Custom Custom refers to custom permissions built for custom actions or access in your project Project Project permissions are permissions that are autogenerated for your blueprints, relationships, etc. They are project-specific and relate to your data architecture. Imagine Imagine permissions are permissions relating to modules and features that are the same across projects. An example of this is user management permissions.","title":"Permission Categories"},{"location":"architecture/roles/permission/#system-permissions","text":"Systems are buckets of devices that can be used to logically separate sets of devices from each other. Systems use only the common CRUDL permissions.","title":"System Permissions"},{"location":"architecture/roles/permission/#device","text":"Devices are digital shadows of physical objects. They can represent hardware devices like trackers, physical assets like cows, or organizational buckets like companies. Devices use the common CRUDL permissions, but also have the following custom permissions: readData - Read not only a device\u2019s header information (like a name), but also its data, which might include things like sensor readings, addresses, or contact information. readHistory - View the changes to a device\u2019s data over time readEvents - View the relevant events that have occurred to a device over time. Might include things like threshold violations or alerts. updateEvents - Update or create device events sendMessage - Send a device a message. This may only be relevant if a device is physically capable of receiving messages, like in the instance of configuring a tracker or other piece of hardware. runSimulation - Simulate a device readByNetworkAlias - Get devices by their network ids deleteRelationship - Delete a device's relationship. For instance, removing a cow from a barn stall, or unpairing a car and a tracker. Deleting a relationship will not delete the device. createRelationship - Create a device\u2019s relationships. For instance, pairing a car and tracker. Creating a relationship does not create a device. updateData - Update a device\u2019s data. This generates historical data points, and will be reflected to anyone with a readData permission. An example of updating a device\u2019s data would be setting a Farm\u2019s address. updateAnyData - A more powerful version of updateData. Users with updateData are restricted to updating fields as validated by the device\u2019s Blueprint. Users with updateAnyData are not subject to that restriction. As an example, a user with updateData likely couldn\u2019t change the temperature reported by a sensor, but a user with updateAnyData could. This permission is usually only for administrators.","title":"Device"},{"location":"architecture/roles/permission/#blueprints-relationships","text":"Some permissions are generated when Blueprints or relationship Attributes are made. They tend to follow a similar form as the Device permissions. The main difference is that Blueprint or Attribute level permissions only allow a user to perform actions on Devices of a given type, or at certain paths in the hierarchy as defined by the Attributes. Their permissions are as follows:","title":"Blueprints &amp; Relationships"},{"location":"architecture/roles/permission/#blueprints","text":"For blueprint permissions, these will appear in the blueprint section. For our farm example, a permission the farm administrator might need is Create Locations . This would allow the farm manager to create new locations. Create Blueprint - create Devices of a given blueprint type Read Blueprint - read Devices of a type (if you know the id) Update Blueprint - update Devices of a given blueprint type Delete Blueprint - delete Devices of a type List Blueprint - list Devices of a type Read Blueprint History - read the history of any Devices of a given type Read Blueprint Events - read the events of any Devices of a given type Update Blueprint Events - update the events of any Devices of a given type Send Blueprint Messages - send messages to any Devices of a given type Delete Blueprint Relationships - delete any relationships that go to Devices of a given type Create Blueprint Relationships - delete any relationships that go to Devices of a given type Update Blueprint Data - update the data of any Devices of a given type Update Any Blueprint Data -update any data (unvalidated) of any Devices of a given type","title":"Blueprints:"},{"location":"architecture/roles/permission/#relationship-attributes","text":"To better understand relationship attribute permissions, we will use our farm example. Imagine you want to permission a farmhand to take actions against a cow, but ONLY in the location they have access to. To do this, you would give the farm hand role permissions like \"Create a Cow in a Location\". If a user has the farmhand role in the Rockville location, they will be able to create cows inside that location. If they do not have a role at the Atlanta location, they will not be able to access that location or create cows in that location. To better understand the permissions below, we will include the example blueprints Cow & Location in parenthesis, while Blueprint X & Blueprint Y represent two generic blueprints that have a relationship with one another. Create Blueprint X (Cows) in Blueprint Y (Location): Create Devices of a given Blueprint at a given place in the hierarchy Read Blueprint X (Cow) from a Blueprint Y (Location): Read Devices of a given Blueprint at a given place in the hierarchy (must know the id) Update Blueprint X (Cow) in a Blueprint Y (Location): Update Devices of a given Blueprint at a given place in the hierarchy Delete Blueprint X (Cow) from a Blueprint Y (Location): Delete Devices of a given Blueprint at a given place in the hierarchy List Blueprint X (Cow) in a Blueprint Y (Location): List Devices of a given Blueprint at a given place in the hierarchy Read Blueprint X (Cow) History in a Blueprint Y (Location): Read the history of Devices of a given Blueprint at a given place in the hierarchy Read Blueprint X (Cow) Events in a Blueprint Y (Location): Read the events of Devices of a given Blueprint at a given place in the hierarchy Update Blueprint X (Cow) Events in a Blueprint Y (Location): Update the events of Devices of a given Blueprint at a given place in the hierarchy Send Blueprint X (Cow) Messages in a Blueprint Y (Location): Send messages to Devices of a given Blueprint at a given place in the hierarchy Remove Blueprint X (Cow) from a Blueprint Y (Location): Delete relationships to Devices of a given Blueprint at a given place in the hierarchy Add Blueprint X (Cow) to a Blueprint Y (Location): Create Relationships to Devices of a given Blueprint at a given place in the hierarchy Update Blueprint X (Cow) data in a Blueprint Y (Location): Update the data of Devices of a given Blueprint at a given place in the hierarchy Update Any Blueprint X (Cow) Data in a Blueprint Y (Location): Update any data (unvalidated) of Devices of a given Blueprint at a given place in the hierarchy","title":"Relationship Attributes"},{"location":"architecture/roles/permission/#example","text":"In our farming example, let's imagine we have the following hierarchy. Example of Farm Hierarchy Let's say you want to give your farmhand role the ability to create a cow, but only in a location. Your permission for this would be: Create a cow in a location This permission allows the user to create a cow when they are at the location level cows page. This user would not be able to create a cow on the cows page at a company. Now, you want your farm manager role to be able to create a cow in a location and in a company. They would have two permissions on their role: Create a cow in a location Create a cow in a company Finally, let's say instead of letting the farm manager role create cows in a location or in a company, you want them to be able to create a cow anywhere in the system. For this, you would use the following blueprint-level permission Can create a cow","title":"Example"},{"location":"architecture/roles/permission/#api-access","text":"ApiAccess objects represent sets of tokens/keys that allow third party services to connect to the Leverege Platform (usually as project level admins) using OAuth2. ApiAccesses use only the common CRUDL permissions.","title":"API Access"},{"location":"architecture/roles/permission/#user-management","text":"Users are the users of a give IoT project. Users use the common CRUDL permissions, but also have the following custom permission. assignRoles - allows a user to assign roles to other users. Unless they\u2019re admin, users can only assign roles they already have. For the common CRUDL permissions, when applied to user management, they look like the following.","title":"User Management"},{"location":"architecture/roles/permission/#users-crudl-permissions","text":"Create Delete List Read Update","title":"Users CRUDL Permissions"},{"location":"architecture/roles/permission/#network","text":"Networks represent a collection of mappings from external ids to internal Leverege ids. Networks ensure that only one device at a given time can have a given external mapping. For example, if you are sending tracker data into the Leverege Stack, that data will need some form of identifier to say what device it is from. Many times that id is chosen by the manufacturer, say a serial number or SKU. A network will map that serial number or SKU to a device\u2019s unique id in the Leverege Stack, and ensure that mapping is one-to-one. Networks use only the common CRUDL permissions. Common Permission Needed for Pairing readByNetworkAlias is a common permission that must be added to a role if that role is responsible for pairing one device to another and the network ID is used in the pairing form","title":"Network"},{"location":"architecture/roles/permission/#configuration","text":"By default, any user can perform UI configuration for themselves. To learn move about what UI configuration entails, please visit our section in the documentation on configuration. Note that an engineer has the ability to hide configuration on a per-role basis in the config file on the UI. System-Level Access Required For a user to configure UIs for other users, they must have a role at the system-level that has the resource permissions For a user to be able to configure a UI for a given role or for all roles, they will need specific permissions against resources, which refer to the UI resources used to show configurations per role. Resource permissions are common CRUDL permissions.","title":"Configuration"},{"location":"architecture/roles/permission/#resource-permissions","text":"Create Delete List Read Update","title":"Resource Permissions"},{"location":"architecture/roles/role/","text":"Creating a Custom Role \u00b6 The Leverege Stack builds up a large number of pre-configured roles based on blueprints that a user might wish to employ in their system during the early start-up stages. Common roles include things like Device Viewer, Device Editor, and Device List Editor. Realistically, once you reach a phase in your development where you have end-users, custom roles are needed to fine-tune your solution to your use case. Commonly, users create custom roles that match 1-to-1 with the personas of a customer or product. A persona is a set of responsibilities a certain type of user has to carry out one or more business processes. Examples of personas in an IoT application include Company Admin, Location Admin, Location Editor, and Location Viewer. In Architect, users would create roles corresponding to each of these roles. To create a custom role, you'll head to Architect and select the Roles tab in the left sidebar of your project. There, you will be able to create custom roles for your project by selecting the Create Role button in the top right corner. Create Role Form Terminology \u00b6 Field Definition Name The name is the path of the role. This must be named using camelCase. For example, Location Admin would be written locationAdmin Display Name This is the UI friendly version of the name. In the above example, you might write Location Admin Category This is an optional field where you can assign a role a category Description This is an optional field to help others understand what this role is for Metadata For a given role, you have a host of metadata options to help configure your UI. Review these in the role-specific UI setup section Assigning Permissions to a Role \u00b6 Once your role is created, you can assign permissions to the role. To do so, click the edit button next to the permissions section in the right hand panel. That will open the following modal. Add Permissions Form Note that you can search and filter permissions in the permissions pop-up. By default, the filter is set to show custom and project permissions. To show imagine permissions, open the filter dropdown and select imagine.","title":"Creating Roles"},{"location":"architecture/roles/role/#creating-a-custom-role","text":"The Leverege Stack builds up a large number of pre-configured roles based on blueprints that a user might wish to employ in their system during the early start-up stages. Common roles include things like Device Viewer, Device Editor, and Device List Editor. Realistically, once you reach a phase in your development where you have end-users, custom roles are needed to fine-tune your solution to your use case. Commonly, users create custom roles that match 1-to-1 with the personas of a customer or product. A persona is a set of responsibilities a certain type of user has to carry out one or more business processes. Examples of personas in an IoT application include Company Admin, Location Admin, Location Editor, and Location Viewer. In Architect, users would create roles corresponding to each of these roles. To create a custom role, you'll head to Architect and select the Roles tab in the left sidebar of your project. There, you will be able to create custom roles for your project by selecting the Create Role button in the top right corner. Create Role Form","title":"Creating a Custom Role"},{"location":"architecture/roles/role/#terminology","text":"Field Definition Name The name is the path of the role. This must be named using camelCase. For example, Location Admin would be written locationAdmin Display Name This is the UI friendly version of the name. In the above example, you might write Location Admin Category This is an optional field where you can assign a role a category Description This is an optional field to help others understand what this role is for Metadata For a given role, you have a host of metadata options to help configure your UI. Review these in the role-specific UI setup section","title":"Terminology"},{"location":"architecture/roles/role/#assigning-permissions-to-a-role","text":"Once your role is created, you can assign permissions to the role. To do so, click the edit button next to the permissions section in the right hand panel. That will open the following modal. Add Permissions Form Note that you can search and filter permissions in the permissions pop-up. By default, the filter is set to show custom and project permissions. To show imagine permissions, open the filter dropdown and select imagine.","title":"Assigning Permissions to a Role"},{"location":"architecture/roles/routing/","text":"Routing \u00b6 Routing defines on which page a user of a particular role lands when they first log in. Adding Routing on User Login \u00b6 To set on which page a user of a particular role lands when they first log in: Navigate to the Permissions > Roles page in Architect Select the role to configure In the panel on the right, click the Edit button next to the Metadata section to open up a dialog box Enter in a JSON object in the metadata structured like the following: { \"ui\" : { \"defaultUrl\" : { \"type\" : \"urlPathRoleCalculator\" , \"single\" : \"/p/[persona]/[blueprint]/:resourceId\" , \"multiple\" : \"/p/[persona]/[blueprint]\" , \"resourceType\" : \"[blueprintId]\" } } } Input the following fields: Type : set to be urlPathRoleCalculator Single : defines if the user only has access to a single resource of the given resource type (e.g. if the user has access to only one location) Persona - name of the role to configure Blueprint - the blueprint name for the page to which to navigate :resourceId - leave as-is, as this specifies that the system should navigate to the single available resource Multiple : defines if the user has access to multiple resources of the given resource type (e.g. if the user has access to multiple locations) Persona - name of the role to configure Blueprint - the blueprint name for the page to which to navigate ResourceType : the blueprint ID of the blueprint name specified earlier. This can be found by going to Blueprints > [Blueprint Name] > Info . Make sure any blueprints referenced in this routing config have the is:root tag applied. If not, add it in the tag field in Blueprints > [Blueprint Name] > Info Below is an example metadata used for role called Admin (named admin ). It routes users on login into the single company if they only have access to one company, or to a list of company if they have access to multiple companies: { \"ui\" : { \"defaultUrl\" : { \"type\" : \"urlPathRoleCalculator\" , \"single\" : \"/p/admin/company/:resourceId\" , \"multiple\" : \"/p/admin/company\" , \"resourceType\" : \"5MCUDvbtjFYMlI9sCAcgXJ\" } } } Specifying default screen within a page Users can also specify the default screen that a user should arrive it when they are routed to a specific page. This can be done by applying the is:preferredView tag in the attribute of the parent blueprint that the user should arrive at by default.","title":"Routing"},{"location":"architecture/roles/routing/#routing","text":"Routing defines on which page a user of a particular role lands when they first log in.","title":"Routing"},{"location":"architecture/roles/routing/#adding-routing-on-user-login","text":"To set on which page a user of a particular role lands when they first log in: Navigate to the Permissions > Roles page in Architect Select the role to configure In the panel on the right, click the Edit button next to the Metadata section to open up a dialog box Enter in a JSON object in the metadata structured like the following: { \"ui\" : { \"defaultUrl\" : { \"type\" : \"urlPathRoleCalculator\" , \"single\" : \"/p/[persona]/[blueprint]/:resourceId\" , \"multiple\" : \"/p/[persona]/[blueprint]\" , \"resourceType\" : \"[blueprintId]\" } } } Input the following fields: Type : set to be urlPathRoleCalculator Single : defines if the user only has access to a single resource of the given resource type (e.g. if the user has access to only one location) Persona - name of the role to configure Blueprint - the blueprint name for the page to which to navigate :resourceId - leave as-is, as this specifies that the system should navigate to the single available resource Multiple : defines if the user has access to multiple resources of the given resource type (e.g. if the user has access to multiple locations) Persona - name of the role to configure Blueprint - the blueprint name for the page to which to navigate ResourceType : the blueprint ID of the blueprint name specified earlier. This can be found by going to Blueprints > [Blueprint Name] > Info . Make sure any blueprints referenced in this routing config have the is:root tag applied. If not, add it in the tag field in Blueprints > [Blueprint Name] > Info Below is an example metadata used for role called Admin (named admin ). It routes users on login into the single company if they only have access to one company, or to a list of company if they have access to multiple companies: { \"ui\" : { \"defaultUrl\" : { \"type\" : \"urlPathRoleCalculator\" , \"single\" : \"/p/admin/company/:resourceId\" , \"multiple\" : \"/p/admin/company\" , \"resourceType\" : \"5MCUDvbtjFYMlI9sCAcgXJ\" } } } Specifying default screen within a page Users can also specify the default screen that a user should arrive it when they are routed to a specific page. This can be done by applying the is:preferredView tag in the attribute of the parent blueprint that the user should arrive at by default.","title":"Adding Routing on User Login"},{"location":"architecture/system/","text":"Systems & Devices \u00b6 A System holds a collection of Devices. Projects can have multiple systems. Systems are entirely separate from each other with separate databases. Devices are the digital representations of the real world entities in our project: facilities, zones, trucks, and trackers for example. They are collected in a system in our Architect project. Systems are one of the places where we introduce permissioning and access control. Project Users can be given access rights to a System, allowing different users to access different collections of Devices. Systems can be used to silo devices on a project. A good use case for this would be a hospital equipment tracking project where each hospital company has it's own system, ensuring complete data separation. Systems give a clean, simple division for separating devices that will never need to interact. Creating a System \u00b6 System Management To create a new System, go to the System tab on the left, and click Add New System in the top right corner. Once your system is created, you will want to update the display name and the alias. The alias is how custom API calls will refer to this collection of devices. Using an alias instead of the system ID (which is also an option) allows us to make minimal changes when deploying a production application off of a staging or development environment. System Information","title":"Systems & Devices"},{"location":"architecture/system/#systems-devices","text":"A System holds a collection of Devices. Projects can have multiple systems. Systems are entirely separate from each other with separate databases. Devices are the digital representations of the real world entities in our project: facilities, zones, trucks, and trackers for example. They are collected in a system in our Architect project. Systems are one of the places where we introduce permissioning and access control. Project Users can be given access rights to a System, allowing different users to access different collections of Devices. Systems can be used to silo devices on a project. A good use case for this would be a hospital equipment tracking project where each hospital company has it's own system, ensuring complete data separation. Systems give a clean, simple division for separating devices that will never need to interact.","title":"Systems &amp; Devices"},{"location":"architecture/system/#creating-a-system","text":"System Management To create a new System, go to the System tab on the left, and click Add New System in the top right corner. Once your system is created, you will want to update the display name and the alias. The alias is how custom API calls will refer to this collection of devices. Using an alias instead of the system ID (which is also an option) allows us to make minimal changes when deploying a production application off of a staging or development environment. System Information","title":"Creating a System"},{"location":"config/","text":"Getting Started with UI Configuration \u00b6 Leverege Amplify provides users with the ability to configure the look, feel, and behavior of the vast majority of components in the application. Examples of components include tables, maps, rollover cards, and graphs. Configuring a page of the application relies on three primary steps: Configuring each component using its configuration panel . A configuration panel is a popup or screen where a user can configure and change settings of an individual component on a page Saving the components to a dashboard . A dashboard is a single view that arranges and displays all the components on the page Setting where and for whom the dashboard appears . By setting the dashboard availability and defaults, a user can specify on which pages and for which types of users the dashboard is seen. This documentation covers how to configure the UI with various components save configuration to dashboards to be used throughout the application.","title":"Getting Started with UI Configuration"},{"location":"config/#getting-started-with-ui-configuration","text":"Leverege Amplify provides users with the ability to configure the look, feel, and behavior of the vast majority of components in the application. Examples of components include tables, maps, rollover cards, and graphs. Configuring a page of the application relies on three primary steps: Configuring each component using its configuration panel . A configuration panel is a popup or screen where a user can configure and change settings of an individual component on a page Saving the components to a dashboard . A dashboard is a single view that arranges and displays all the components on the page Setting where and for whom the dashboard appears . By setting the dashboard availability and defaults, a user can specify on which pages and for which types of users the dashboard is seen. This documentation covers how to configure the UI with various components save configuration to dashboards to be used throughout the application.","title":"Getting Started with UI Configuration"},{"location":"config/aggregations-viewer/","text":"Aggregations Viewer \u00b6 The aggregations viewer is a UI component that allows users to display data based on configurable groupings/aggregations of values. The component can be used in a number different ways. For example, the aggregations viewer can be used to: Show the counts of assets by type Show the counts of devices by zone Show the average count of assets in each zone Aggregations viewer example Accessing the Aggregations Viewer Configuration \u00b6 To access the aggregations viewer configuration, verify that the aggregations viewer component is added to the page using the layout controller. Then click the gear icon on the right side of the aggregations viewer panel and select Edit Settings. Configuring Aggregations \u00b6 The aggregations panel is organized by aggregation type. Each of the aggregation types and the configuration options for each are described in the following sections. Filters \u00b6 The filters aggregation allows users to create a count of devices/assets/objects based on a filter that they configure. For example, a user can create an aggregation that shows the number of vehicles that have a Make = Toyota and Year >= 2017 . To create a filter aggregation, users must configure the Aggregation and the View : Click the Aggregations > + Add button and select Filter Click the + Add button in the first column under Filters. This should create an entry called Filter 1 . Enter the name of the filter in the field where Filter 1 is shown. Click the + Add button in the 2 nd column to add a condition. A condition can be a Comparison , Enum Equals , Equals , Exists , Parent Equals , or Resource Enum Equals : Comparison - Compares a field against a known value using a comparison operator (greater than, less than, or between) Select the name of the field in the Field dropdown Select the type of comparison in the dropdown below the field option (Less Than, Greater Than, etc.) and the desired comparison value in the text box below it To include empty values in the comparison, check the Include Empty box Enum Equals - Checks if a field is equal to one or more enum values. The value should already exist in the data table (be filterable already). Select the name of the field in the Field dropdown Select the one or more values in the list of values by checking the box Any of the selected values will be counted in the Enum Equals filter Equals - Checks if a field is equal to one or more values. The value should already exist in the data table (be filterable already). Select the name of the field in the Field dropdown Select the one or more values in the list of values by checking the box Any of the selected values will be counted in the Equals filter Exists - Checks if a field is not empty or empty to include in the count Select the name of the field in the Field dropdown Select whether the field should be included if the value Exists or if the value Does Not Exist Parent Equals - Checks if a the parent of a device has attribute is equal to one or more values. The value should already exist in the data table (be filterable already). Select the name of the field in the Field dropdown Select the one or more values in the list of values by checking the box Any of the selected values will be counted in the Parent Equals filter Resource Enum Equals - Checks if a field is equal to one or more resource enum values. The value should already exist in the data table (be filterable already). Select the name of the field in the Field dropdown Select the one or more values in the list of values by checking the box Any of the selected values will be counted in the Resource Enum Equals filter Click the Views menu and click the + Add button and select the View Type The Text view type represents the data as text (or in numerics, a count) Configure the appearance of the Header and Value of the aggregation using the configuration opened on the right The JSON view type represents the data as JSON Click Apply to apply the changes. Save the configuration to the current dashboard by clicking the checkmark next to the dashboard selector. Geo Distance \u00b6 The Geo Distance aggregation groups devices/objects into distances from an origin point. To create a geo distance aggregation, users must configure the Aggregation and the View : Click the Aggregations > + Add button and select Geo Distance Enter the name of the aggregation in the Name field Select the name of the field in the Field dropdown In the Origin section, enter in the Latitude and Longitude of the point to measure from, the Unit of measurement, and the Distance Type (plane or arc) Set the ranges of the bins in the Ranges section by entering in the min and max values of each range. Add additional bins with the Add Range button. Click the Views menu and click the + Add button and select the View Type The Text view type represents the data as text (or in numerics, a count) Configure the appearance of the Header , Sub Header , and Value of the aggregation using the configuration opened on the right The JSON view type represents the data as JSON Click Apply to apply the changes. Save the configuration to the current dashboard by clicking the checkmark next to the dashboard selector. Histogram \u00b6 The Histogram aggregation groups devices into equal sized bins based on the entire range of data. To create a histogram aggregation, users must configure the Aggregation and the View : Click the Aggregations > + Add button and select Histogram Enter the name of the aggregation in the Name field Select the name of the field in the Field dropdown Set the bin width using the Interval field Set the lower and upper bounds of the histogram using the Min Bounds and Max Bounds fields To set the start of a bin at a given offset, set the Offset value To define the bins that missing/empty values take, set the Missing field Click the Views menu and click the + Add button and select the View Type The Text view type represents the data as text (or in numerics, a count) Configure the appearance of the Header and Value of the aggregation using the configuration opened on the right The JSON view type represents the data as JSON Click Apply to apply the changes. Save the configuration to the current dashboard by clicking the checkmark next to the dashboard selector. Range \u00b6 The Range aggregation groups devices into configurable bins of any size. As opposed to a histogram which uses bins of equal size to continuously span the entire dataset, the range aggregation allows users to specify ranges of any size and do not have to be continuous. For example, if there exists a dataset that spans from 1 to 20, a histogram may have four bins, each of size 5 to span from 1 to 20 (e.g. 1-5, 6-10, 11-15 ,16-20). A range aggregation can arbitrarily specify any sub-spans of the data which do not have to be continuous or the same size bin (e.g. 5-9, 10-17). To create a range aggregation, users must configure the Aggregation and the View : Click the Aggregations > + Add button and select Range Enter the name of the aggregation in the Name field Select the name of the field in the Field dropdown Set the ranges of the bins in the Ranges section by entering in the min and max values of each range. Add additional bins with the Add Range button. Click the Views menu and click the + Add button and select the View Type The Text view type represents the data as text (or in numerics, a count) Configure the appearance of the Header ,and Value of the aggregation using the configuration opened on the right The JSON view type represents the data as JSON Click Apply to apply the changes. Save the configuration to the current dashboard by clicking the checkmark next to the dashboard selector. Stats \u00b6 The Stats aggregation type shows a set of basic statistics of a numeric field. By default, the stats shown are: count of records, minimum value, maximum value, average value, and sum of values. To create a stats aggregation, users must configure the Aggregation and the View : Click the Aggregations > + Add button and select Stats Enter the name of the aggregation in the Name field Select the name of the field in the Field dropdown Click the Views menu and click the + Add button and select the View Type The Stats view type represents the configuration for each of the stats Configure the appearance of the Header and Value of the aggregation using the configuration opened on the right Configure whether each stat is shown or hidden in the aggregation by checking or unchecking the Show [Stat] box next to each stat Configure the label of the stat by setting the [Stat] Label field Click Apply to apply the changes. Save the configuration to the current dashboard by clicking the checkmark next to the dashboard selector. Terms \u00b6 The Terms aggregation type shows the count of records by values in a field. For example, the terms aggregation can show the count of vehicles by make, or the count of vehicles by zone name. To create a terms aggregation, users must configure the Aggregation and the View : Click the Aggregations > + Add button and select Terms Enter the name of the aggregation in the Name field Select the name of the field in the Field dropdown To limit the aggregation to showing first X number of possible values (e.g. if there are 10 total possible vehicle makes, only show the first 4 makes), set the value in the Size field Enter any values to explicitly exclude in the aggregation type in the Exclude field Enter any values to explicitly include in the aggregation type in the Include field. Note: typically a user would configure only one of the Exclude or Include fields To only show terms that have a count greater than a certain minimum count threshold, set the Min Count field To define the value that terms with empty/no counts take, set the Missing Value field Click the Views menu and click the + Add button and select the View Type The Text view type represents the data as text (or in numerics, a count) Configure the appearance of the Header and Value of the aggregation using the configuration opened on the right The JSON view type represents the data as JSON Click Apply to apply the changes. Save the configuration to the current dashboard by clicking the checkmark next to the dashboard selector. Changing the Aggregation Panel Variant \u00b6 To change the variant that the aggregation panel uses, go to the aggregation panel configuration > Options menu and enter the variant name in the Variant field.","title":"Aggregations Viewer"},{"location":"config/aggregations-viewer/#aggregations-viewer","text":"The aggregations viewer is a UI component that allows users to display data based on configurable groupings/aggregations of values. The component can be used in a number different ways. For example, the aggregations viewer can be used to: Show the counts of assets by type Show the counts of devices by zone Show the average count of assets in each zone Aggregations viewer example","title":"Aggregations Viewer"},{"location":"config/aggregations-viewer/#accessing-the-aggregations-viewer-configuration","text":"To access the aggregations viewer configuration, verify that the aggregations viewer component is added to the page using the layout controller. Then click the gear icon on the right side of the aggregations viewer panel and select Edit Settings.","title":"Accessing the Aggregations Viewer Configuration"},{"location":"config/aggregations-viewer/#configuring-aggregations","text":"The aggregations panel is organized by aggregation type. Each of the aggregation types and the configuration options for each are described in the following sections.","title":"Configuring Aggregations"},{"location":"config/aggregations-viewer/#filters","text":"The filters aggregation allows users to create a count of devices/assets/objects based on a filter that they configure. For example, a user can create an aggregation that shows the number of vehicles that have a Make = Toyota and Year >= 2017 . To create a filter aggregation, users must configure the Aggregation and the View : Click the Aggregations > + Add button and select Filter Click the + Add button in the first column under Filters. This should create an entry called Filter 1 . Enter the name of the filter in the field where Filter 1 is shown. Click the + Add button in the 2 nd column to add a condition. A condition can be a Comparison , Enum Equals , Equals , Exists , Parent Equals , or Resource Enum Equals : Comparison - Compares a field against a known value using a comparison operator (greater than, less than, or between) Select the name of the field in the Field dropdown Select the type of comparison in the dropdown below the field option (Less Than, Greater Than, etc.) and the desired comparison value in the text box below it To include empty values in the comparison, check the Include Empty box Enum Equals - Checks if a field is equal to one or more enum values. The value should already exist in the data table (be filterable already). Select the name of the field in the Field dropdown Select the one or more values in the list of values by checking the box Any of the selected values will be counted in the Enum Equals filter Equals - Checks if a field is equal to one or more values. The value should already exist in the data table (be filterable already). Select the name of the field in the Field dropdown Select the one or more values in the list of values by checking the box Any of the selected values will be counted in the Equals filter Exists - Checks if a field is not empty or empty to include in the count Select the name of the field in the Field dropdown Select whether the field should be included if the value Exists or if the value Does Not Exist Parent Equals - Checks if a the parent of a device has attribute is equal to one or more values. The value should already exist in the data table (be filterable already). Select the name of the field in the Field dropdown Select the one or more values in the list of values by checking the box Any of the selected values will be counted in the Parent Equals filter Resource Enum Equals - Checks if a field is equal to one or more resource enum values. The value should already exist in the data table (be filterable already). Select the name of the field in the Field dropdown Select the one or more values in the list of values by checking the box Any of the selected values will be counted in the Resource Enum Equals filter Click the Views menu and click the + Add button and select the View Type The Text view type represents the data as text (or in numerics, a count) Configure the appearance of the Header and Value of the aggregation using the configuration opened on the right The JSON view type represents the data as JSON Click Apply to apply the changes. Save the configuration to the current dashboard by clicking the checkmark next to the dashboard selector.","title":"Filters"},{"location":"config/aggregations-viewer/#geo-distance","text":"The Geo Distance aggregation groups devices/objects into distances from an origin point. To create a geo distance aggregation, users must configure the Aggregation and the View : Click the Aggregations > + Add button and select Geo Distance Enter the name of the aggregation in the Name field Select the name of the field in the Field dropdown In the Origin section, enter in the Latitude and Longitude of the point to measure from, the Unit of measurement, and the Distance Type (plane or arc) Set the ranges of the bins in the Ranges section by entering in the min and max values of each range. Add additional bins with the Add Range button. Click the Views menu and click the + Add button and select the View Type The Text view type represents the data as text (or in numerics, a count) Configure the appearance of the Header , Sub Header , and Value of the aggregation using the configuration opened on the right The JSON view type represents the data as JSON Click Apply to apply the changes. Save the configuration to the current dashboard by clicking the checkmark next to the dashboard selector.","title":"Geo Distance"},{"location":"config/aggregations-viewer/#histogram","text":"The Histogram aggregation groups devices into equal sized bins based on the entire range of data. To create a histogram aggregation, users must configure the Aggregation and the View : Click the Aggregations > + Add button and select Histogram Enter the name of the aggregation in the Name field Select the name of the field in the Field dropdown Set the bin width using the Interval field Set the lower and upper bounds of the histogram using the Min Bounds and Max Bounds fields To set the start of a bin at a given offset, set the Offset value To define the bins that missing/empty values take, set the Missing field Click the Views menu and click the + Add button and select the View Type The Text view type represents the data as text (or in numerics, a count) Configure the appearance of the Header and Value of the aggregation using the configuration opened on the right The JSON view type represents the data as JSON Click Apply to apply the changes. Save the configuration to the current dashboard by clicking the checkmark next to the dashboard selector.","title":"Histogram"},{"location":"config/aggregations-viewer/#range","text":"The Range aggregation groups devices into configurable bins of any size. As opposed to a histogram which uses bins of equal size to continuously span the entire dataset, the range aggregation allows users to specify ranges of any size and do not have to be continuous. For example, if there exists a dataset that spans from 1 to 20, a histogram may have four bins, each of size 5 to span from 1 to 20 (e.g. 1-5, 6-10, 11-15 ,16-20). A range aggregation can arbitrarily specify any sub-spans of the data which do not have to be continuous or the same size bin (e.g. 5-9, 10-17). To create a range aggregation, users must configure the Aggregation and the View : Click the Aggregations > + Add button and select Range Enter the name of the aggregation in the Name field Select the name of the field in the Field dropdown Set the ranges of the bins in the Ranges section by entering in the min and max values of each range. Add additional bins with the Add Range button. Click the Views menu and click the + Add button and select the View Type The Text view type represents the data as text (or in numerics, a count) Configure the appearance of the Header ,and Value of the aggregation using the configuration opened on the right The JSON view type represents the data as JSON Click Apply to apply the changes. Save the configuration to the current dashboard by clicking the checkmark next to the dashboard selector.","title":"Range"},{"location":"config/aggregations-viewer/#stats","text":"The Stats aggregation type shows a set of basic statistics of a numeric field. By default, the stats shown are: count of records, minimum value, maximum value, average value, and sum of values. To create a stats aggregation, users must configure the Aggregation and the View : Click the Aggregations > + Add button and select Stats Enter the name of the aggregation in the Name field Select the name of the field in the Field dropdown Click the Views menu and click the + Add button and select the View Type The Stats view type represents the configuration for each of the stats Configure the appearance of the Header and Value of the aggregation using the configuration opened on the right Configure whether each stat is shown or hidden in the aggregation by checking or unchecking the Show [Stat] box next to each stat Configure the label of the stat by setting the [Stat] Label field Click Apply to apply the changes. Save the configuration to the current dashboard by clicking the checkmark next to the dashboard selector.","title":"Stats"},{"location":"config/aggregations-viewer/#terms","text":"The Terms aggregation type shows the count of records by values in a field. For example, the terms aggregation can show the count of vehicles by make, or the count of vehicles by zone name. To create a terms aggregation, users must configure the Aggregation and the View : Click the Aggregations > + Add button and select Terms Enter the name of the aggregation in the Name field Select the name of the field in the Field dropdown To limit the aggregation to showing first X number of possible values (e.g. if there are 10 total possible vehicle makes, only show the first 4 makes), set the value in the Size field Enter any values to explicitly exclude in the aggregation type in the Exclude field Enter any values to explicitly include in the aggregation type in the Include field. Note: typically a user would configure only one of the Exclude or Include fields To only show terms that have a count greater than a certain minimum count threshold, set the Min Count field To define the value that terms with empty/no counts take, set the Missing Value field Click the Views menu and click the + Add button and select the View Type The Text view type represents the data as text (or in numerics, a count) Configure the appearance of the Header and Value of the aggregation using the configuration opened on the right The JSON view type represents the data as JSON Click Apply to apply the changes. Save the configuration to the current dashboard by clicking the checkmark next to the dashboard selector.","title":"Terms"},{"location":"config/aggregations-viewer/#changing-the-aggregation-panel-variant","text":"To change the variant that the aggregation panel uses, go to the aggregation panel configuration > Options menu and enter the variant name in the Variant field.","title":"Changing the Aggregation Panel Variant"},{"location":"config/config-basics/","text":"Configuration and Dashboard Basics \u00b6 The following sections describe how to interact with configuration panel, save configured components to a dashboard, and administer a dashboard to be seen by either all or select users of an application. Accessing a Configuration Panel \u00b6 Each configurable component in the application is controlled by a configuration panel. All configuration panels share a similar layout and set of functions. Accessing the configuration panel differs by component, but most can be identified with the gear icon. Refer to the specific component\u2019s documentation for instructions on how to exactly access its configuration panel. Configuration is only available for those users with the appropriate permission. Primary Configuration Area \u00b6 The primary configuration area on a configuration page is typically a 2-panel card. For example, tables have a configuration area where the list of available fields are selectable on the left and the configurable values are displayed on the right. Example configuration panel for table viewer component The primary configuration may vary slightly depending on the UI component. For example, in the search bar configuration, the configuration area is a list of the searchable fields with checkboxes. Example configuration panel for search bar component Versions \u00b6 A version is a saved configuration profile for an individual UI component. A user may use versions when experimenting with the configuration of a component before rolling it out to others. A version is specific to the user, in that no users can see another\u2019s user versions. Create A Version \u00b6 To create a version, use the Save To > Create Version button in the upper right of the configuration panel. Save A Version \u00b6 Once created, users can save their current component\u2019s configuration to the version by clicking Save To > Versions and selecting the version. Once saved, click Apply to apply the configuration to the component. Saving to configuration a version Load A Version \u00b6 To retrieve a previously saved version, click the Load From button in the upper left of the configuration panel and select the desired version. This will load that version\u2019s configuration into the panel. Click Apply to the apply that version\u2019s configuration to the component. Loading a configuration a version Delete A Version \u00b6 To delete a version, click the three dots icon next to Save To > Delete Versions , and select the version to delete. Confirm the deletion in the prompt. Configuring a Page \u00b6 The high-level steps to configuring a page are: Pick the role and page : If the configured page is applicable to a specific role, assume the role using the role selector. Then, navigate to the page where the configuration should apply. Configure each component on the page : Refer to the UI component documentation as necessary Save the configured state to a dashboard : The dashboard can either be an existing or new dashboard. If new, specify where and to which users the dashboard can be shown as a selection option. Set the priority of the dashboards by setting defaults : once the dashboard is saved, determine when it should be shown to a user in relative priority to other dashboards already configured for the page Pick the Role and Page \u00b6 It\u2019s common for an application to present data on the same page differently to users with different roles. For example, a field engineer may want to see the battery level and firmeware version of a device, while a customer service rep may want to see its last known location. If the configuration is applicable to a specific role, assume the role by selecting it from the role selector. Access the role selector by clicking the username in upper right of the page and selecting the role under User Role . Navigate to the page to where the configuration should be applied. For example, if the configuration is intended for the Assets page, navigate to the Assets page. If the configuration is meant to be applied to an existing dashboard, load the dashboard by selecting it from the dashboard selector at the top of the page. Dashboard selector Configure Each Component on the Page \u00b6 Use the layout controller to place the desired components on the page. Refer to the documentation for the layout controller for more details. For each component, access the control panel and make the desired configuration changes. Click Apply in the configuration panel of that component once all the desired changes are performed. Refer to the document for the specific component for more details. Save the Configured State to a Dashboard \u00b6 Once all configuration to all components have been completed, a user can save the entire state of the page to a dashboard. To save the configured state to the current dashboard, click the check mark icon next to the dashboard selector. To revert the changes back to its previously saved state, click the reverse circle icon. Save and revert dashboard changes Note: Default Dashboard Note: The Default dashboard is a user\u2019s personal dashboard configuration for exact page location. Saving the configuration to the dashboard titled \u201cDefault\u201d will only apply the configuration as the default dashboard to the current user, for currently assumed role, and to exact path for which the configuration was performed. For example, if a user A is on the Company > Assets page as Role A and saves a new configuration to the Default dashboard at that page, it will affect only the Default dashboard for User A while they are using Role A on the Company > Assets page. It will not impact the Default dashboard for user B at Company > Assets using Role A, not impact Default dashboard for any users at Company > Assets using Role B, and not impact the Default dashboard of user A at other Asset paths (e.g. Location > Assets) using Role A. To save the configured state to a new dashboard, click the three-dot icon next to the dashboard selector and click Save Dashboard As\u2026 In the Save Dashboard As\u2026 popup, enter the name of the new dashboard Select the availability of the dashboard from the Available To dropdown: Role Level - Any on this page: The option to select this dashboard will appear for any users of role X on this exact page path, with role X being the currently assumed role of the user doing the configuration. For example, only show this dashboard for users with Role A and on the Assets page at the Company > Assets path. This will create an option in the dropdown under the \u201cRole\u201d section of the dashboard selector. Page Level - Any user on this page: The option to select this dashboard will appear for any user of any role on this exact page path. For example, show this dashboard for all users on the Assets page at the Company > Assets path. This will create an option in the dropdown under the \u201cPage\u201d section. Blueprint Level - Any user on the page showing this page's Blueprint type: The option to select this dashboard will appear for any user of any role on a page of the same Blueprint type as the one being configured. For example, show this dashboard for all users on all Asset pages, regardless of its specific path. This will create an option in the dropdown under the section named after the Blueprint type (e.g. Assets). Personal Blueprint Level - Me on any page showing this page's Blueprint type: The option to select this dashboard will appear for only the current user on any page of any role on a page of the same Blueprint type as the one being configured. This will create an option in the dropdown under the \u201cMine\u201d section. Available To dashboard options Saving to Current User & Page Only Looking for an option to save the configured page to the current user for the current role and current path? Save the dashboard to the Default dashboard by click the check mark next to the left of the dashboard selector. Set the Defaults Of The Page \u00b6 The previous section on Saving the Dashboard produces a dashboard that is available for selection by a user on a give page. It does not yet specify whether it will load by default when a user visits that page. In order to apply the dashboard to pages so that it loads for given users, page locations, and roles, set the dashboard defaults. Click the three dots icon next to the dashboard selector to load the list of editable dashboards Depending on how many dashboards you have configured and their availability on the page, you will see dashboards separated into the following categories based on availability criteria: Role - Dashboards that are available to show on this page based on the user\u2019s role Page - Dashboards that are available to show on this page based on the user\u2019s page path in the application [Name of Blueprint Type] (e.g. Assets) - Dashboards that are available to show on this page based on the type of blueprint that page is showing Mine - Personal dashboards that are available to show on this page based on the type of blueprint that page is showing To set a dashboard to show by default on the page when it meets the availability criteria, select the dashboard > Use as Default . Only one dashboard from each section can be set as default (e.g. only one Role-level dashboard can be set as default, one Page-level dashboard can be set as default, etc.) In the event that multiple dashboards across each section is set as default, the application shows the default dashboard based on this ranking (from highest to lowest): Mine Role Page Blueprint Default Setting a dashboard to be default on this page for users in the Editor role Managing Dashboards \u00b6 Renaming A Dashboard \u00b6 To rename a dashboard, click the three dots icon next to the dashboard selector and select the [dashboard name] > Rename . Delete a Dashboard \u00b6 To delete a dashboard, click the three dots icon next to the dashboard selector and select the dashboard name > Delete . If the deleted dashboard was displayed on the page, the page will switch to showing the Default dashboard. Reset Personal Default Dashboard Back to Stock \u00b6 If the Default dashboard has been changed and a user wishes to reset it back to its original state (e.g. \u201cfactory defaults\u201d), select the Default dashboard from the dashboard selector. Then click the three dots icon next to the dashboard selector > Reset to Default Dashboard . Configuration Best Practices \u00b6 We\u2019re working on making a list of best practices, stay tuned!","title":"Configuration Panels"},{"location":"config/config-basics/#configuration-and-dashboard-basics","text":"The following sections describe how to interact with configuration panel, save configured components to a dashboard, and administer a dashboard to be seen by either all or select users of an application.","title":"Configuration and Dashboard Basics"},{"location":"config/config-basics/#accessing-a-configuration-panel","text":"Each configurable component in the application is controlled by a configuration panel. All configuration panels share a similar layout and set of functions. Accessing the configuration panel differs by component, but most can be identified with the gear icon. Refer to the specific component\u2019s documentation for instructions on how to exactly access its configuration panel. Configuration is only available for those users with the appropriate permission.","title":"Accessing a Configuration Panel"},{"location":"config/config-basics/#primary-configuration-area","text":"The primary configuration area on a configuration page is typically a 2-panel card. For example, tables have a configuration area where the list of available fields are selectable on the left and the configurable values are displayed on the right. Example configuration panel for table viewer component The primary configuration may vary slightly depending on the UI component. For example, in the search bar configuration, the configuration area is a list of the searchable fields with checkboxes. Example configuration panel for search bar component","title":"Primary Configuration Area"},{"location":"config/config-basics/#versions","text":"A version is a saved configuration profile for an individual UI component. A user may use versions when experimenting with the configuration of a component before rolling it out to others. A version is specific to the user, in that no users can see another\u2019s user versions.","title":"Versions"},{"location":"config/config-basics/#create-a-version","text":"To create a version, use the Save To > Create Version button in the upper right of the configuration panel.","title":"Create A Version"},{"location":"config/config-basics/#save-a-version","text":"Once created, users can save their current component\u2019s configuration to the version by clicking Save To > Versions and selecting the version. Once saved, click Apply to apply the configuration to the component. Saving to configuration a version","title":"Save A Version"},{"location":"config/config-basics/#load-a-version","text":"To retrieve a previously saved version, click the Load From button in the upper left of the configuration panel and select the desired version. This will load that version\u2019s configuration into the panel. Click Apply to the apply that version\u2019s configuration to the component. Loading a configuration a version","title":"Load A Version"},{"location":"config/config-basics/#delete-a-version","text":"To delete a version, click the three dots icon next to Save To > Delete Versions , and select the version to delete. Confirm the deletion in the prompt.","title":"Delete A Version"},{"location":"config/config-basics/#configuring-a-page","text":"The high-level steps to configuring a page are: Pick the role and page : If the configured page is applicable to a specific role, assume the role using the role selector. Then, navigate to the page where the configuration should apply. Configure each component on the page : Refer to the UI component documentation as necessary Save the configured state to a dashboard : The dashboard can either be an existing or new dashboard. If new, specify where and to which users the dashboard can be shown as a selection option. Set the priority of the dashboards by setting defaults : once the dashboard is saved, determine when it should be shown to a user in relative priority to other dashboards already configured for the page","title":"Configuring a Page"},{"location":"config/config-basics/#pick-the-role-and-page","text":"It\u2019s common for an application to present data on the same page differently to users with different roles. For example, a field engineer may want to see the battery level and firmeware version of a device, while a customer service rep may want to see its last known location. If the configuration is applicable to a specific role, assume the role by selecting it from the role selector. Access the role selector by clicking the username in upper right of the page and selecting the role under User Role . Navigate to the page to where the configuration should be applied. For example, if the configuration is intended for the Assets page, navigate to the Assets page. If the configuration is meant to be applied to an existing dashboard, load the dashboard by selecting it from the dashboard selector at the top of the page. Dashboard selector","title":"Pick the Role and Page"},{"location":"config/config-basics/#configure-each-component-on-the-page","text":"Use the layout controller to place the desired components on the page. Refer to the documentation for the layout controller for more details. For each component, access the control panel and make the desired configuration changes. Click Apply in the configuration panel of that component once all the desired changes are performed. Refer to the document for the specific component for more details.","title":"Configure Each Component on the Page"},{"location":"config/config-basics/#save-the-configured-state-to-a-dashboard","text":"Once all configuration to all components have been completed, a user can save the entire state of the page to a dashboard. To save the configured state to the current dashboard, click the check mark icon next to the dashboard selector. To revert the changes back to its previously saved state, click the reverse circle icon. Save and revert dashboard changes Note: Default Dashboard Note: The Default dashboard is a user\u2019s personal dashboard configuration for exact page location. Saving the configuration to the dashboard titled \u201cDefault\u201d will only apply the configuration as the default dashboard to the current user, for currently assumed role, and to exact path for which the configuration was performed. For example, if a user A is on the Company > Assets page as Role A and saves a new configuration to the Default dashboard at that page, it will affect only the Default dashboard for User A while they are using Role A on the Company > Assets page. It will not impact the Default dashboard for user B at Company > Assets using Role A, not impact Default dashboard for any users at Company > Assets using Role B, and not impact the Default dashboard of user A at other Asset paths (e.g. Location > Assets) using Role A. To save the configured state to a new dashboard, click the three-dot icon next to the dashboard selector and click Save Dashboard As\u2026 In the Save Dashboard As\u2026 popup, enter the name of the new dashboard Select the availability of the dashboard from the Available To dropdown: Role Level - Any on this page: The option to select this dashboard will appear for any users of role X on this exact page path, with role X being the currently assumed role of the user doing the configuration. For example, only show this dashboard for users with Role A and on the Assets page at the Company > Assets path. This will create an option in the dropdown under the \u201cRole\u201d section of the dashboard selector. Page Level - Any user on this page: The option to select this dashboard will appear for any user of any role on this exact page path. For example, show this dashboard for all users on the Assets page at the Company > Assets path. This will create an option in the dropdown under the \u201cPage\u201d section. Blueprint Level - Any user on the page showing this page's Blueprint type: The option to select this dashboard will appear for any user of any role on a page of the same Blueprint type as the one being configured. For example, show this dashboard for all users on all Asset pages, regardless of its specific path. This will create an option in the dropdown under the section named after the Blueprint type (e.g. Assets). Personal Blueprint Level - Me on any page showing this page's Blueprint type: The option to select this dashboard will appear for only the current user on any page of any role on a page of the same Blueprint type as the one being configured. This will create an option in the dropdown under the \u201cMine\u201d section. Available To dashboard options Saving to Current User & Page Only Looking for an option to save the configured page to the current user for the current role and current path? Save the dashboard to the Default dashboard by click the check mark next to the left of the dashboard selector.","title":"Save the Configured State to a Dashboard"},{"location":"config/config-basics/#set-the-defaults-of-the-page","text":"The previous section on Saving the Dashboard produces a dashboard that is available for selection by a user on a give page. It does not yet specify whether it will load by default when a user visits that page. In order to apply the dashboard to pages so that it loads for given users, page locations, and roles, set the dashboard defaults. Click the three dots icon next to the dashboard selector to load the list of editable dashboards Depending on how many dashboards you have configured and their availability on the page, you will see dashboards separated into the following categories based on availability criteria: Role - Dashboards that are available to show on this page based on the user\u2019s role Page - Dashboards that are available to show on this page based on the user\u2019s page path in the application [Name of Blueprint Type] (e.g. Assets) - Dashboards that are available to show on this page based on the type of blueprint that page is showing Mine - Personal dashboards that are available to show on this page based on the type of blueprint that page is showing To set a dashboard to show by default on the page when it meets the availability criteria, select the dashboard > Use as Default . Only one dashboard from each section can be set as default (e.g. only one Role-level dashboard can be set as default, one Page-level dashboard can be set as default, etc.) In the event that multiple dashboards across each section is set as default, the application shows the default dashboard based on this ranking (from highest to lowest): Mine Role Page Blueprint Default Setting a dashboard to be default on this page for users in the Editor role","title":"Set the Defaults Of The Page"},{"location":"config/config-basics/#managing-dashboards","text":"","title":"Managing Dashboards"},{"location":"config/config-basics/#renaming-a-dashboard","text":"To rename a dashboard, click the three dots icon next to the dashboard selector and select the [dashboard name] > Rename .","title":"Renaming A Dashboard"},{"location":"config/config-basics/#delete-a-dashboard","text":"To delete a dashboard, click the three dots icon next to the dashboard selector and select the dashboard name > Delete . If the deleted dashboard was displayed on the page, the page will switch to showing the Default dashboard.","title":"Delete a Dashboard"},{"location":"config/config-basics/#reset-personal-default-dashboard-back-to-stock","text":"If the Default dashboard has been changed and a user wishes to reset it back to its original state (e.g. \u201cfactory defaults\u201d), select the Default dashboard from the dashboard selector. Then click the three dots icon next to the dashboard selector > Reset to Default Dashboard .","title":"Reset Personal Default Dashboard Back to Stock"},{"location":"config/config-basics/#configuration-best-practices","text":"We\u2019re working on making a list of best practices, stay tuned!","title":"Configuration Best Practices"},{"location":"config/dashboard-viewer/","text":"Dashboard Viewer \u00b6 The dashboard viewer is a component that displays details of assets, devices, or objects and its associated blueprints in a multi-card dashboard. Users access a dashboard by double-clicking into a row in a table of those objects. Accessing the Dashboard Configuration \u00b6 To access the dashboard configuration, double click an entry in a table viewer or list viewer. Then scroll down to the bottom of the page and click Edit Layout . The dashboard will become editable by surfacing a series of buttons to add, remove, and update cards. Accessing the dashboard configuration edit mode View of a dashboard in edit mode Configuring the Dashboard Viewer \u00b6 Configuring the Dashboard Page Layout \u00b6 While it is common for the dashboard to take up the entire page, users can display the dashboard viewer alongside one or more other UI components. For example, users configure the dashboard on the left and the map on the right. Set the layout of the dashboard with other components by clicking the layout controller icon in the upper right of the page. Grid Options \u00b6 A grid is a dashboard element designed to hold and organize other dashboard cards. Without grids, cards added To access grid options, click the gear icon next to the Dashboard title. Users can also access grid options for individual grids by clicking the gear icon next to the Grid title. Columns : To set the number of columns of cards on the dashboard, change the Columns field Column Width : To set the width of each column, change the Column With field. Widths can be specified in units such as px or fr. Row Gap : To set the gap size between rows of cards at the given grid level, change the Row Gap field Column Gap : To set the gap size between rows of cards at the given grid level, change the Column Gap field Card Options \u00b6 To access card options, click the gear icon next to the Grid title. The dialog that appears will contain both the Card Options and Grid Options. Title : To set the title of the card, change the value in the Title field Icon : To set an icon on the grid title, specify the name of the icon in the field. To have no icon, use the value \u201cno\u201d Show Title : To show/hide the title, toggle the checkbox Size : To set the width and height of the card, change the W and H fields Style : To set the style of the card, select the style from the dropdown Grid Section : Adds a border radius only at the bottom edge of the card. The intended use is as the \u201cbottom half\u201d of a card, with a secondary card located above it to look like a single card. A common configuration of this card is to turn off the header and set the parent\u2019s grid row gap to 0. Transparent Secondary - Adds a border radius only at the top edge of the card. The intended use is as the \u201ctop half\u201d of a card, with a section card underneath to display more detailed data Tertiary - Adds extra padding around the card to give the appearance of supporting information Height : To set the height of the card, change the value in the Height field Adding a Card Type \u00b6 To add a card type, select the + sign next to the title of the grid. Available card types are Grid , Data Card , History Card , and Map Card . [Screenshot of navigation to adding a card to a dashboard or grid within a dashboard] Configuring the Grid \u00b6 Use a grid element to organize cards and create sections to display cards. Users can add one or more grids to the dashboard to hold a combination of data, history, and map cards. Users can also add grids within other grids for further organization. Grids for independent columns One advantage to using grids is to make data cards in each column more independent. Even though a dashboard may have multiple columns and will automatically fill cards into those columns, having a dedicated grid in a column will allow the cards to fill down each column. Without grids, cards in adjacent columns will get set to the same card height. To take advantage of this \u2018independent fill down\u2019 behavior, make sure to set the Size of the grid to have a W = 1. By default the grid has a Size with W = 2. For grid and card configuration options, refer to the sections on Grid Options and Card Options . Configuring the Data Card \u00b6 A data card is used to display data on assets, devices, and related blueprints in a card format. To access the data card configuration, click the gear icon in the bottom right of the card. The data card configuration follows the same configuration as a List Viewer . Refer to the List Viewer configuration for details. Configuring the History Card \u00b6 The history card shows the historical data on the selected asset/device on the dashboard. The history card behaves like a Responsive History Table with the card showing as a History Table view above a certain dimension threshold and as a History List Viewer below the threshold. The history card configuration follows the same configuration as the Responsive History Table , so refer to the configuration for the History Table Viewer and a History List Viewer for details. Configuring the Map Card \u00b6 The map card uses icons to show objects on the map in the dashboard view. To access the map card configuration, click the gear icon in the bottom right of the card. The map card configuration follows the same configuration as a Map Viewer . Refer to the Map configuration for details. Dashboard Configuration Best Practices If using a map card on mobile, consider using a map layout component to take up an entire section (configured using a layout controller) instead of using a map card in the dashboard. Using a map card on the mobile view may generate more whitespace/margins on mobile than desired, which detracts from the total viewable area of the map.","title":"Dashboard Viewer"},{"location":"config/dashboard-viewer/#dashboard-viewer","text":"The dashboard viewer is a component that displays details of assets, devices, or objects and its associated blueprints in a multi-card dashboard. Users access a dashboard by double-clicking into a row in a table of those objects.","title":"Dashboard Viewer"},{"location":"config/dashboard-viewer/#accessing-the-dashboard-configuration","text":"To access the dashboard configuration, double click an entry in a table viewer or list viewer. Then scroll down to the bottom of the page and click Edit Layout . The dashboard will become editable by surfacing a series of buttons to add, remove, and update cards. Accessing the dashboard configuration edit mode View of a dashboard in edit mode","title":"Accessing the Dashboard Configuration"},{"location":"config/dashboard-viewer/#configuring-the-dashboard-viewer","text":"","title":"Configuring the Dashboard Viewer"},{"location":"config/dashboard-viewer/#configuring-the-dashboard-page-layout","text":"While it is common for the dashboard to take up the entire page, users can display the dashboard viewer alongside one or more other UI components. For example, users configure the dashboard on the left and the map on the right. Set the layout of the dashboard with other components by clicking the layout controller icon in the upper right of the page.","title":"Configuring the Dashboard Page Layout"},{"location":"config/dashboard-viewer/#grid-options","text":"A grid is a dashboard element designed to hold and organize other dashboard cards. Without grids, cards added To access grid options, click the gear icon next to the Dashboard title. Users can also access grid options for individual grids by clicking the gear icon next to the Grid title. Columns : To set the number of columns of cards on the dashboard, change the Columns field Column Width : To set the width of each column, change the Column With field. Widths can be specified in units such as px or fr. Row Gap : To set the gap size between rows of cards at the given grid level, change the Row Gap field Column Gap : To set the gap size between rows of cards at the given grid level, change the Column Gap field","title":"Grid Options"},{"location":"config/dashboard-viewer/#card-options","text":"To access card options, click the gear icon next to the Grid title. The dialog that appears will contain both the Card Options and Grid Options. Title : To set the title of the card, change the value in the Title field Icon : To set an icon on the grid title, specify the name of the icon in the field. To have no icon, use the value \u201cno\u201d Show Title : To show/hide the title, toggle the checkbox Size : To set the width and height of the card, change the W and H fields Style : To set the style of the card, select the style from the dropdown Grid Section : Adds a border radius only at the bottom edge of the card. The intended use is as the \u201cbottom half\u201d of a card, with a secondary card located above it to look like a single card. A common configuration of this card is to turn off the header and set the parent\u2019s grid row gap to 0. Transparent Secondary - Adds a border radius only at the top edge of the card. The intended use is as the \u201ctop half\u201d of a card, with a section card underneath to display more detailed data Tertiary - Adds extra padding around the card to give the appearance of supporting information Height : To set the height of the card, change the value in the Height field","title":"Card Options"},{"location":"config/dashboard-viewer/#adding-a-card-type","text":"To add a card type, select the + sign next to the title of the grid. Available card types are Grid , Data Card , History Card , and Map Card . [Screenshot of navigation to adding a card to a dashboard or grid within a dashboard]","title":"Adding a Card Type"},{"location":"config/dashboard-viewer/#configuring-the-grid","text":"Use a grid element to organize cards and create sections to display cards. Users can add one or more grids to the dashboard to hold a combination of data, history, and map cards. Users can also add grids within other grids for further organization. Grids for independent columns One advantage to using grids is to make data cards in each column more independent. Even though a dashboard may have multiple columns and will automatically fill cards into those columns, having a dedicated grid in a column will allow the cards to fill down each column. Without grids, cards in adjacent columns will get set to the same card height. To take advantage of this \u2018independent fill down\u2019 behavior, make sure to set the Size of the grid to have a W = 1. By default the grid has a Size with W = 2. For grid and card configuration options, refer to the sections on Grid Options and Card Options .","title":"Configuring the Grid"},{"location":"config/dashboard-viewer/#configuring-the-data-card","text":"A data card is used to display data on assets, devices, and related blueprints in a card format. To access the data card configuration, click the gear icon in the bottom right of the card. The data card configuration follows the same configuration as a List Viewer . Refer to the List Viewer configuration for details.","title":"Configuring the Data Card"},{"location":"config/dashboard-viewer/#configuring-the-history-card","text":"The history card shows the historical data on the selected asset/device on the dashboard. The history card behaves like a Responsive History Table with the card showing as a History Table view above a certain dimension threshold and as a History List Viewer below the threshold. The history card configuration follows the same configuration as the Responsive History Table , so refer to the configuration for the History Table Viewer and a History List Viewer for details.","title":"Configuring the History Card"},{"location":"config/dashboard-viewer/#configuring-the-map-card","text":"The map card uses icons to show objects on the map in the dashboard view. To access the map card configuration, click the gear icon in the bottom right of the card. The map card configuration follows the same configuration as a Map Viewer . Refer to the Map configuration for details. Dashboard Configuration Best Practices If using a map card on mobile, consider using a map layout component to take up an entire section (configured using a layout controller) instead of using a map card in the dashboard. Using a map card on the mobile view may generate more whitespace/margins on mobile than desired, which detracts from the total viewable area of the map.","title":"Configuring the Map Card"},{"location":"config/grouping-selector/","text":"Grouping Selector \u00b6 A grouping selector is a UI component that applies exclusivity/filtering to data. After defining groups in configuration, selecting those groups in the UI results in the rendering of that specific group\u2019s data in the map and/or table. A grouping selector will also show the count of devices that are in each group. For example, assets in an indoor facility may be grouped by floors. Grouping selector example Adding a Grouping Selector \u00b6 To add a grouping selector to the UI, select it from the layout controller. The grouping selector can occupy any of the outside sections of the page layout. Configuring the Grouping Selector \u00b6 The appearance of a grouping selectors is based on the metadata in the root blueprint where all groupings should be viewed. For example, to set grouping of assets by floor at a location , the metadata for groupings is set in the location blueprint. Grouping metadata can be set by power users but are more typically composed by engineers. Refer to the groupings described in the developer documention for more information.","title":"Grouping Selector"},{"location":"config/grouping-selector/#grouping-selector","text":"A grouping selector is a UI component that applies exclusivity/filtering to data. After defining groups in configuration, selecting those groups in the UI results in the rendering of that specific group\u2019s data in the map and/or table. A grouping selector will also show the count of devices that are in each group. For example, assets in an indoor facility may be grouped by floors. Grouping selector example","title":"Grouping Selector"},{"location":"config/grouping-selector/#adding-a-grouping-selector","text":"To add a grouping selector to the UI, select it from the layout controller. The grouping selector can occupy any of the outside sections of the page layout.","title":"Adding a Grouping Selector"},{"location":"config/grouping-selector/#configuring-the-grouping-selector","text":"The appearance of a grouping selectors is based on the metadata in the root blueprint where all groupings should be viewed. For example, to set grouping of assets by floor at a location , the metadata for groupings is set in the location blueprint. Grouping metadata can be set by power users but are more typically composed by engineers. Refer to the groupings described in the developer documention for more information.","title":"Configuring the Grouping Selector"},{"location":"config/layout-controller/","text":"Layout Controller \u00b6 The layout controller allows users to configure the layout of UI elements on the page. Users can select from a variety of UI components to occupy different spaces on a page. Accessing the Layout Controller \u00b6 The layout controller is located in the upper right area of the page next to the search bar. Click the layout controller icon to expand the configuration pop-up. The layout controller configuration panel Using the Layout Controller \u00b6 The layout controller divides the page into sections. Each section can hold one UI component. Caption: View of layout controller expanded with available components to display in the center right section. To select a UI component, click the icon in the section and select the type of component to display from the dropdown list. To hide a section entirely, select the No (crossed-out circle) symbol. When a section is hidden, its adjacent sections will expand to fill the gap. Selecting a component from the layout controller Certain Components in Each Layout Section Only certain components can be displayed in certain sections. For example, maps and certain table types can only be placed in one of the center sections. To configure which section expands to the corners of the page, click the directional arrow buttons at the ends of the section. The configuration popup and arrow directions should change appropriately to show which section is now expanding to the ends. Before and after view of the layout controller when indicating which section fills to the end of the page To reset the layout to the persona\u2019s default, click the Reset button. Saving Layouts to Dashboards \u00b6 To save a layout to the page, make the desired changes and then click the checkmark next to the dashboard selector. This will save the layout to the currently displayed dashboard. For more information on saving pages to dashboards, see Config Basics. Save and revert dashboard changes","title":"Layout Controller"},{"location":"config/layout-controller/#layout-controller","text":"The layout controller allows users to configure the layout of UI elements on the page. Users can select from a variety of UI components to occupy different spaces on a page.","title":"Layout Controller"},{"location":"config/layout-controller/#accessing-the-layout-controller","text":"The layout controller is located in the upper right area of the page next to the search bar. Click the layout controller icon to expand the configuration pop-up. The layout controller configuration panel","title":"Accessing the Layout Controller"},{"location":"config/layout-controller/#using-the-layout-controller","text":"The layout controller divides the page into sections. Each section can hold one UI component. Caption: View of layout controller expanded with available components to display in the center right section. To select a UI component, click the icon in the section and select the type of component to display from the dropdown list. To hide a section entirely, select the No (crossed-out circle) symbol. When a section is hidden, its adjacent sections will expand to fill the gap. Selecting a component from the layout controller Certain Components in Each Layout Section Only certain components can be displayed in certain sections. For example, maps and certain table types can only be placed in one of the center sections. To configure which section expands to the corners of the page, click the directional arrow buttons at the ends of the section. The configuration popup and arrow directions should change appropriately to show which section is now expanding to the ends. Before and after view of the layout controller when indicating which section fills to the end of the page To reset the layout to the persona\u2019s default, click the Reset button.","title":"Using the Layout Controller"},{"location":"config/layout-controller/#saving-layouts-to-dashboards","text":"To save a layout to the page, make the desired changes and then click the checkmark next to the dashboard selector. This will save the layout to the currently displayed dashboard. For more information on saving pages to dashboards, see Config Basics. Save and revert dashboard changes","title":"Saving Layouts to Dashboards"},{"location":"config/map-config/","text":"Configuring the Map \u00b6 Accessing the Map Options \u00b6 To access the map configuration options, click the gear icon at the bottom of the map component and select Edit Settings . Locating the map settings icon Configuring Map Layers \u00b6 Icons and geofences on maps are represented as layers. The layers menu lists the layers available for configuration. The list of layers are automatically generated based on position and geofence attribute types. To update the ordering of which layers display over others, click and drag the name of the layer into the desired position. Map configuration panel Configuration Options for Position Attributes \u00b6 For position attributes (e.g. user position, asset positions, device positions), the following configuration options are available: Visible : To set the layer to be visible, check the box next to Visible. To hide the layer, uncheck the box. Zoom : To set the minimum zoom level by which the layer is visible, update the \u201cShow At Zoom\u201d field To set the maximum zoom level by which the layer is visible, update the \u201cHide at Zoom\u201d field To set the zoom level by which layer begins a transition from fading in/out, update the \u201cFade In/Out Zoom\u201d Note : As a reference, zoom levels range from 0-22, with 0 being the lowest zoom level (fully zoomed out) and 22 being the highest (fully zoomed in). Here are some helpful benchmarks as to what geographic features are visible at which zoom level:* Zoom Level Visible Features 0 The Earth 3 A continent 4 Large island 6 Large rivers 10 Large roads 15 Buildings 18 A Vehicle Interaction Rollover : To generate an info card upon rolling over the layer on the map, check the box next to Rollover . To hide an info card from appearing upon rollover, uncheck the box. Selectable : To generate an info card upon clicking a layer on the map, check the box next to Selectable. To hide an info card from appearing upon selection, uncheck the box. Rollover and selection config Configuration of the rollover and selection cards themselves are performed in Global Configuration Appearance : Select a custom-made symbolizer for the icon Scale : To make a layer bigger or small upon certain states and actions, update the number next to the appropriate action. The layer is scaled relative to the original icon size, with the original size corresponding to a scale of 1. Doubling the size of the icon would correspond to a scale of 2. The available states/actions to scale are: Normal : scale when the layer is unselected, not rolled-over, and have no alerts Rollover : scale when the mouse rolls-over the layer Selected : scale when the layer is selected Alert : scale when the layer has an outstanding alert Zoom to Scale : To have the scale change based on zoom level, check the box next to Zoom to Scale . Set the additional scaling factor to take effect at the starting zoom level threshold and the additional scaling factor that is applied at the ending zoom level threshold. The system will additionally scale the icon according to the zoom level. For example, in the below configuration: The asset icons will scale to 2 at a minimum upon rollover Prior to a zoom level of 5, the icon will scale by 2 upon rollover Starting at a zoom level of 5 to a zoom level of 10, the vehicle icons will scale proportionally from a scale of 2 to a scale of 4 upon rollover (4 = original scale of 2 times the factor of 2 at zoom level 10) After zoom level 10, the icon will scale by 4 upon rollover (4 = original scale of 2 times the factor of 2 at zoom level 10). Zoom to scale settings Configuration Options for Geofence/Floor Attributes \u00b6 Visibility \u00b6 Visible : To set the layer to be visible, check the box next to Visible. To hide the layer, uncheck the box. Zoom : To set the minimum zoom level by which the layer is visible, update the \u201cShow At Zoom\u201d field To set the maximum zoom level by which the layer is visible, update the \u201cHide at Zoom\u201d field To set the zoom level by which layer begins a transition from fading in/out, update the \u201cFade In/Out Zoom\u201d Interaction Rollover : To generate an info card upon rolling over the layer on the map, check the box next to Rollover . To hide an info card from appearing upon rollover, uncheck the box. Selectable : To generate an info card upon clicking a layer on the map, check the box next to Selectable . To hide an info card from appearing upon selection, uncheck the box. Rollover and selection config Configuration of the rollover and selection cards themselves are performed in Global Configuration Appearance \u00b6 Fill Color : Set the fill color using a set of known rgb values (e.g. rgb(0,0,200)) Fill Opacity : Set the fill opacity using a value between 0 (transparent) to 1 (opaque) Fill Pattern : Set the fill pattern using a known string Outline Width : Set the geofence outline width Outline Color : Set the outline color using a set of known rgb values (e.g. rgb(0,0,200)) Outline Opacity : Set the outline opacity using a value between 0 (transparent) to 1 (opaque) Outline Pattern : Set the outline style by selecting from the dropdown of patterns (dashed, dotted, etc.) Outline Cap & Join : Set outline cap and join styles Label Visible : To set the label to be visible, check the box next to Visible. To hide the label, uncheck the box. Label Attribute and Attribute Line 2 : Provide the field name to display as the primary label and second line label Label Color : Set the label color using a set of known rgb values (e.g. (rgb(255,255,255)) Label Size : Set the label size (is this px?) Label Opacity : Set the label opacity using a value between 0 (transparent) to 1 (opaque) Label Line 2 Scale : Set the line 2 attribute scale relative to the first line Label Collision : Set whether labels allow overlap or ignore placement Rollover \u00b6 To set specific geofence/floor appearance properties to display upon rollover, go to the Rollover tab. Fill, outline, and label properties are configurable to change upon rollover. See the documentation on the appearance tab for details on the settings available to configure upon rollover. Selected \u00b6 To set specific geofence/floor appearance properties to display upon selection, go to the Selection tab. Fill, outline, and label settings are configurable to change upon selection. Setting a Custom Map Style \u00b6 To change the map style, go to the Options tab on the map configuration panel. Users can select from pre-defined styles or supply their own custom style using Mapbox. Map style configuration options To change the map style, select a style from the dropdown: To use a pre-defined style (e.g. satellite, streets, etc.), select it from the list To use a custom map style, select Custom and enter in the Mapbox style URL","title":"Map"},{"location":"config/map-config/#configuring-the-map","text":"","title":"Configuring the Map"},{"location":"config/map-config/#accessing-the-map-options","text":"To access the map configuration options, click the gear icon at the bottom of the map component and select Edit Settings . Locating the map settings icon","title":"Accessing the Map Options"},{"location":"config/map-config/#configuring-map-layers","text":"Icons and geofences on maps are represented as layers. The layers menu lists the layers available for configuration. The list of layers are automatically generated based on position and geofence attribute types. To update the ordering of which layers display over others, click and drag the name of the layer into the desired position. Map configuration panel","title":"Configuring Map Layers"},{"location":"config/map-config/#configuration-options-for-position-attributes","text":"For position attributes (e.g. user position, asset positions, device positions), the following configuration options are available: Visible : To set the layer to be visible, check the box next to Visible. To hide the layer, uncheck the box. Zoom : To set the minimum zoom level by which the layer is visible, update the \u201cShow At Zoom\u201d field To set the maximum zoom level by which the layer is visible, update the \u201cHide at Zoom\u201d field To set the zoom level by which layer begins a transition from fading in/out, update the \u201cFade In/Out Zoom\u201d Note : As a reference, zoom levels range from 0-22, with 0 being the lowest zoom level (fully zoomed out) and 22 being the highest (fully zoomed in). Here are some helpful benchmarks as to what geographic features are visible at which zoom level:* Zoom Level Visible Features 0 The Earth 3 A continent 4 Large island 6 Large rivers 10 Large roads 15 Buildings 18 A Vehicle Interaction Rollover : To generate an info card upon rolling over the layer on the map, check the box next to Rollover . To hide an info card from appearing upon rollover, uncheck the box. Selectable : To generate an info card upon clicking a layer on the map, check the box next to Selectable. To hide an info card from appearing upon selection, uncheck the box. Rollover and selection config Configuration of the rollover and selection cards themselves are performed in Global Configuration Appearance : Select a custom-made symbolizer for the icon Scale : To make a layer bigger or small upon certain states and actions, update the number next to the appropriate action. The layer is scaled relative to the original icon size, with the original size corresponding to a scale of 1. Doubling the size of the icon would correspond to a scale of 2. The available states/actions to scale are: Normal : scale when the layer is unselected, not rolled-over, and have no alerts Rollover : scale when the mouse rolls-over the layer Selected : scale when the layer is selected Alert : scale when the layer has an outstanding alert Zoom to Scale : To have the scale change based on zoom level, check the box next to Zoom to Scale . Set the additional scaling factor to take effect at the starting zoom level threshold and the additional scaling factor that is applied at the ending zoom level threshold. The system will additionally scale the icon according to the zoom level. For example, in the below configuration: The asset icons will scale to 2 at a minimum upon rollover Prior to a zoom level of 5, the icon will scale by 2 upon rollover Starting at a zoom level of 5 to a zoom level of 10, the vehicle icons will scale proportionally from a scale of 2 to a scale of 4 upon rollover (4 = original scale of 2 times the factor of 2 at zoom level 10) After zoom level 10, the icon will scale by 4 upon rollover (4 = original scale of 2 times the factor of 2 at zoom level 10). Zoom to scale settings","title":"Configuration Options for Position Attributes"},{"location":"config/map-config/#configuration-options-for-geofencefloor-attributes","text":"","title":"Configuration Options for Geofence/Floor Attributes"},{"location":"config/map-config/#visibility","text":"Visible : To set the layer to be visible, check the box next to Visible. To hide the layer, uncheck the box. Zoom : To set the minimum zoom level by which the layer is visible, update the \u201cShow At Zoom\u201d field To set the maximum zoom level by which the layer is visible, update the \u201cHide at Zoom\u201d field To set the zoom level by which layer begins a transition from fading in/out, update the \u201cFade In/Out Zoom\u201d Interaction Rollover : To generate an info card upon rolling over the layer on the map, check the box next to Rollover . To hide an info card from appearing upon rollover, uncheck the box. Selectable : To generate an info card upon clicking a layer on the map, check the box next to Selectable . To hide an info card from appearing upon selection, uncheck the box. Rollover and selection config Configuration of the rollover and selection cards themselves are performed in Global Configuration","title":"Visibility"},{"location":"config/map-config/#appearance","text":"Fill Color : Set the fill color using a set of known rgb values (e.g. rgb(0,0,200)) Fill Opacity : Set the fill opacity using a value between 0 (transparent) to 1 (opaque) Fill Pattern : Set the fill pattern using a known string Outline Width : Set the geofence outline width Outline Color : Set the outline color using a set of known rgb values (e.g. rgb(0,0,200)) Outline Opacity : Set the outline opacity using a value between 0 (transparent) to 1 (opaque) Outline Pattern : Set the outline style by selecting from the dropdown of patterns (dashed, dotted, etc.) Outline Cap & Join : Set outline cap and join styles Label Visible : To set the label to be visible, check the box next to Visible. To hide the label, uncheck the box. Label Attribute and Attribute Line 2 : Provide the field name to display as the primary label and second line label Label Color : Set the label color using a set of known rgb values (e.g. (rgb(255,255,255)) Label Size : Set the label size (is this px?) Label Opacity : Set the label opacity using a value between 0 (transparent) to 1 (opaque) Label Line 2 Scale : Set the line 2 attribute scale relative to the first line Label Collision : Set whether labels allow overlap or ignore placement","title":"Appearance"},{"location":"config/map-config/#rollover","text":"To set specific geofence/floor appearance properties to display upon rollover, go to the Rollover tab. Fill, outline, and label properties are configurable to change upon rollover. See the documentation on the appearance tab for details on the settings available to configure upon rollover.","title":"Rollover"},{"location":"config/map-config/#selected","text":"To set specific geofence/floor appearance properties to display upon selection, go to the Selection tab. Fill, outline, and label settings are configurable to change upon selection.","title":"Selected"},{"location":"config/map-config/#setting-a-custom-map-style","text":"To change the map style, go to the Options tab on the map configuration panel. Users can select from pre-defined styles or supply their own custom style using Mapbox. Map style configuration options To change the map style, select a style from the dropdown: To use a pre-defined style (e.g. satellite, streets, etc.), select it from the list To use a custom map style, select Custom and enter in the Mapbox style URL","title":"Setting a Custom Map Style"},{"location":"config/rollover-selection/","text":"Rollovers and Selections \u00b6 Users can configure the appearance of the rollover card that surface when a user mouses over either a table entry or map icon. They can also configure the appearance of the selection card that surfaces when a user selects an entry on a table or map. Card appearance Rollover and selection cards will only appear when a map component is shown on the page. Accessing the Rollover Configuration \u00b6 To access the rollover configuration, click the user account settings menu in the upper right of the page and select Settings > Global Configuration . Global configuration settings To configure the rollover card, select the Rollovers list item under Settings To configure the selection card, select the Selections list item under Settings Rollover configuration panel Configuring The Rollover & Selection Card \u00b6 The configurable settings of the rollover and selection cards are the same. The following section describes the configuration settings of the rollover and selection cards. Available Blueprints for Card Display \u00b6 The list of available blueprints/objects that can display rollovers are listed in the Types menu. Each item corresponds to an element on the UI. For example, there may be an entry for assets that corresponds to the card that appears when rolling over or selecting an asset on the map. Each entry will also have an associated .history item - this is the configuration for when a user rolls over or selects an item in a history list viewer. Attribute Configuration \u00b6 Label \u00b6 The Label section allows users to configure properties about the label on attributes added to the card. Show Label/Label Name : To show the name of the attribute in the card next to the value, check the box next to Show Label and input the name of the Label. To hide the name of the attribute (e.g. show the value only), uncheck the box. Label Color : To set the color of the label text, click the 3-dot button and select Color . Specify a color in the field that appears. To set the color back to the default color, click the 3 dot bottom and select None . Label Font : To set the label\u2019s font family, size, weight, and style, change the appropriate fields in the Font section Label Justify/Align : To set the label text justification and alignment, change the Justify and Align fields Label Allow Text Wrap : To allow the text of the label to wrap, check the box next to Allow Text Wrap . To prevent the label text from wrapping (it will get truncated instead), clear the checkbox. Value \u00b6 The Value section allows users to configure properties about the values displayed on the card. Value Show if Empty : To show a value if the attribute is empty, check the box next to Show if Empty . To hide the value if the attribute is empty, uncheck the box. Empty Value : To set the value that appears if the attribute is empty, specify the value in the Empty Value field. Common options are double dashes ( -- ) or blank. Value Color : To set the color of the value text, click the 3-dot button and select Color . Specify a color in the field that appears. To set the color back to the default color, click the 3 dot bottom and select None . Value Font : To set the value text\u2019s font family, size, weight, and style, change the appropriate fields in the Font section. Value Justify/Align : To set the value text justification and alignment, change the Justify and Align fields. Value Allow Text Wrap : To allow the text of the value to wrap, check the box next to Allow Text Wrap . To prevent the value text from wrapping (it will get truncated instead), clear the checkbox. Value Background : To set the color of the value background text, specify a color in the Background field. Note: This only changes the color around the text, it does not change the color of the entire cell. Attribute Options \u00b6 Variant : To have the card use a particular variant in UI builder, set the desired variant name in the Variant field Background : To set the color of the card background, specify a color in the Background field. Note: Unless overridden by the even/odd row background color configuration, the rows of the card will alternate between the specified background color and a secondary color that is slightly lighter than background color. Even Row Background : To set the background color of even numbered rows, specify a color in the Even Row Background field. Odd Row Background : To set the background color of odd numbered rows, specify a color in the Odd Row Background field. Title Color : To set the color of the card title, specify a color in the Title Color field. Default Label Color : To set a default color for the attribute labels on a card, specify the color in the Default Label Color field. This configuration is overridden by an attribute\u2019s label color configuration. Default Value Color : To set a default color for the attribute values on a card, specify the color in the Default Value Color field. This configuration is overridden by an attribute\u2019s value color configuration. Default Suffix Color : To set the default suffix color, specify the color in the Default Suffix Color field. Header Visible : To show the header/title of the card, check the box next to Header Visible . To hide the header/title of the card, uncheck the box. Title Attribute : To specify which attribute is shown in the title of the card, indicate the name of the attribute in the Title Attribute field. This should match the name of the tag applied to the attribute of the Blueprint (e.g. if the asset ID attribute in the blueprint has a tag of is:name , then put \u201cname\u201d into the Title Attribute field). Icon Attribute : To set the icon used in the card, leave the attribute as icon . Change the typeIcon URL in the blueprint\u2019s metadata to change the icon image. Icon Size : To set the size of the icon, specify the size with px added at the end. Display Options \u00b6 These settings are found in the Display tab next to the Types tab. Visible : To toggle whether rollovers are visible or hidden across the entire UI, check or uncheck the Visible checkbox. Placement : Specify the placement of the card on the map when mousing over (in the case of a rollover card) or selecting (in the case of a selection card) a table entry Pointer Placement (rollovers only) : Specify the placement of the rollover card on the map when mousing over an icon/object on the map. This placement is relative to the user\u2019s pointer when they roll over an icon. It is independent of the Placement field which indicates the location of the rollover card upon table entry rollover.","title":"Rollovers and Selections"},{"location":"config/rollover-selection/#rollovers-and-selections","text":"Users can configure the appearance of the rollover card that surface when a user mouses over either a table entry or map icon. They can also configure the appearance of the selection card that surfaces when a user selects an entry on a table or map. Card appearance Rollover and selection cards will only appear when a map component is shown on the page.","title":"Rollovers and Selections"},{"location":"config/rollover-selection/#accessing-the-rollover-configuration","text":"To access the rollover configuration, click the user account settings menu in the upper right of the page and select Settings > Global Configuration . Global configuration settings To configure the rollover card, select the Rollovers list item under Settings To configure the selection card, select the Selections list item under Settings Rollover configuration panel","title":"Accessing the Rollover Configuration"},{"location":"config/rollover-selection/#configuring-the-rollover-selection-card","text":"The configurable settings of the rollover and selection cards are the same. The following section describes the configuration settings of the rollover and selection cards.","title":"Configuring The Rollover &amp; Selection Card"},{"location":"config/rollover-selection/#available-blueprints-for-card-display","text":"The list of available blueprints/objects that can display rollovers are listed in the Types menu. Each item corresponds to an element on the UI. For example, there may be an entry for assets that corresponds to the card that appears when rolling over or selecting an asset on the map. Each entry will also have an associated .history item - this is the configuration for when a user rolls over or selects an item in a history list viewer.","title":"Available Blueprints for Card Display"},{"location":"config/rollover-selection/#attribute-configuration","text":"","title":"Attribute Configuration"},{"location":"config/rollover-selection/#label","text":"The Label section allows users to configure properties about the label on attributes added to the card. Show Label/Label Name : To show the name of the attribute in the card next to the value, check the box next to Show Label and input the name of the Label. To hide the name of the attribute (e.g. show the value only), uncheck the box. Label Color : To set the color of the label text, click the 3-dot button and select Color . Specify a color in the field that appears. To set the color back to the default color, click the 3 dot bottom and select None . Label Font : To set the label\u2019s font family, size, weight, and style, change the appropriate fields in the Font section Label Justify/Align : To set the label text justification and alignment, change the Justify and Align fields Label Allow Text Wrap : To allow the text of the label to wrap, check the box next to Allow Text Wrap . To prevent the label text from wrapping (it will get truncated instead), clear the checkbox.","title":"Label"},{"location":"config/rollover-selection/#value","text":"The Value section allows users to configure properties about the values displayed on the card. Value Show if Empty : To show a value if the attribute is empty, check the box next to Show if Empty . To hide the value if the attribute is empty, uncheck the box. Empty Value : To set the value that appears if the attribute is empty, specify the value in the Empty Value field. Common options are double dashes ( -- ) or blank. Value Color : To set the color of the value text, click the 3-dot button and select Color . Specify a color in the field that appears. To set the color back to the default color, click the 3 dot bottom and select None . Value Font : To set the value text\u2019s font family, size, weight, and style, change the appropriate fields in the Font section. Value Justify/Align : To set the value text justification and alignment, change the Justify and Align fields. Value Allow Text Wrap : To allow the text of the value to wrap, check the box next to Allow Text Wrap . To prevent the value text from wrapping (it will get truncated instead), clear the checkbox. Value Background : To set the color of the value background text, specify a color in the Background field. Note: This only changes the color around the text, it does not change the color of the entire cell.","title":"Value"},{"location":"config/rollover-selection/#attribute-options","text":"Variant : To have the card use a particular variant in UI builder, set the desired variant name in the Variant field Background : To set the color of the card background, specify a color in the Background field. Note: Unless overridden by the even/odd row background color configuration, the rows of the card will alternate between the specified background color and a secondary color that is slightly lighter than background color. Even Row Background : To set the background color of even numbered rows, specify a color in the Even Row Background field. Odd Row Background : To set the background color of odd numbered rows, specify a color in the Odd Row Background field. Title Color : To set the color of the card title, specify a color in the Title Color field. Default Label Color : To set a default color for the attribute labels on a card, specify the color in the Default Label Color field. This configuration is overridden by an attribute\u2019s label color configuration. Default Value Color : To set a default color for the attribute values on a card, specify the color in the Default Value Color field. This configuration is overridden by an attribute\u2019s value color configuration. Default Suffix Color : To set the default suffix color, specify the color in the Default Suffix Color field. Header Visible : To show the header/title of the card, check the box next to Header Visible . To hide the header/title of the card, uncheck the box. Title Attribute : To specify which attribute is shown in the title of the card, indicate the name of the attribute in the Title Attribute field. This should match the name of the tag applied to the attribute of the Blueprint (e.g. if the asset ID attribute in the blueprint has a tag of is:name , then put \u201cname\u201d into the Title Attribute field). Icon Attribute : To set the icon used in the card, leave the attribute as icon . Change the typeIcon URL in the blueprint\u2019s metadata to change the icon image. Icon Size : To set the size of the icon, specify the size with px added at the end.","title":"Attribute Options"},{"location":"config/rollover-selection/#display-options","text":"These settings are found in the Display tab next to the Types tab. Visible : To toggle whether rollovers are visible or hidden across the entire UI, check or uncheck the Visible checkbox. Placement : Specify the placement of the card on the map when mousing over (in the case of a rollover card) or selecting (in the case of a selection card) a table entry Pointer Placement (rollovers only) : Specify the placement of the rollover card on the map when mousing over an icon/object on the map. This placement is relative to the user\u2019s pointer when they roll over an icon. It is independent of the Placement field which indicates the location of the rollover card upon table entry rollover.","title":"Display Options"},{"location":"config/search-config/","text":"Configuring the Search Bar \u00b6 Users can configure which fields are searchable on a given dashboard. When a user searches for one or more terms in the search bar, the system will search among the selected fields for a result. Accessing the Search Configuration \u00b6 To access the search configuration panel, click the gear icon on the right side of the search bar. Example configuration panel for search bar component Configuring Search \u00b6 To select a field to be included in the search, check the box next to the field. Changes performed here will be applied to the currently shown dashboard. To reset the search criteria to the default for the persona, click the Reset button in the upper right of the panel. Default search behavior Having nothing selected will default to searching all fields. Enabling QR Code Scanning on the Search Bar \u00b6 To enable QR code scanning on the search bar, use the scannable:qr tag on the attribute of the blueprint to be searched. This will add a QR code icon in the search bar when the attribute is configured to be among the searchable fields. The QR code icon will be hidden if the attribute is not configured to be among the searchable fields. If a QR code contains multiple terms that need to be parsed prior to search, set the scanTextHandler path in the attribute metadata. See the attribute documentation for scanTextHandler for more details. Top: Adding the scannableQr tag on the asset.assetId attribute Bottom: The QR scan icon on the Assets search bar Saving Search Configuration to Personas \u00b6 To save a search configuration to a version or persona, make the desired changes to the search and then click the checkmark next to the dashboard selector. This will save the search configuration to the currently shown dashboard. Use the Advanced button on the search configuration panel to save the configuration to a specific version.","title":"Search"},{"location":"config/search-config/#configuring-the-search-bar","text":"Users can configure which fields are searchable on a given dashboard. When a user searches for one or more terms in the search bar, the system will search among the selected fields for a result.","title":"Configuring the Search Bar"},{"location":"config/search-config/#accessing-the-search-configuration","text":"To access the search configuration panel, click the gear icon on the right side of the search bar. Example configuration panel for search bar component","title":"Accessing the Search Configuration"},{"location":"config/search-config/#configuring-search","text":"To select a field to be included in the search, check the box next to the field. Changes performed here will be applied to the currently shown dashboard. To reset the search criteria to the default for the persona, click the Reset button in the upper right of the panel. Default search behavior Having nothing selected will default to searching all fields.","title":"Configuring Search"},{"location":"config/search-config/#enabling-qr-code-scanning-on-the-search-bar","text":"To enable QR code scanning on the search bar, use the scannable:qr tag on the attribute of the blueprint to be searched. This will add a QR code icon in the search bar when the attribute is configured to be among the searchable fields. The QR code icon will be hidden if the attribute is not configured to be among the searchable fields. If a QR code contains multiple terms that need to be parsed prior to search, set the scanTextHandler path in the attribute metadata. See the attribute documentation for scanTextHandler for more details. Top: Adding the scannableQr tag on the asset.assetId attribute Bottom: The QR scan icon on the Assets search bar","title":"Enabling QR Code Scanning on the Search Bar"},{"location":"config/search-config/#saving-search-configuration-to-personas","text":"To save a search configuration to a version or persona, make the desired changes to the search and then click the checkmark next to the dashboard selector. This will save the search configuration to the currently shown dashboard. Use the Advanced button on the search configuration panel to save the configuration to a specific version.","title":"Saving Search Configuration to Personas"},{"location":"config/tables/history-list-viewer/","text":"History List Viewer \u00b6 A History List Viewer is a component that displays historical data on the devices, assets, and related blueprints in a card format. Accessing the History List Viewer \u00b6 To access the history list viewer configuration, click the gear icon in the upper right of the component and select Edit Settings . Configuring the History List Viewer \u00b6 History list viewer configuration panel Attribute Configuration \u00b6 The currently displayed attributes are shown in the list on the left side of the panel. To add attributes to the card, click the Attributes > Add button and select the desired attribute. To reorder the attributes, click and drag the attribute you wish to reorder into the desired location in the list. Label \u00b6 The Label section allows users to configure properties about the label on attributes added to the card. Show Label/Label Name : To show the name of the attribute in the card next to the value, check the box next to Show Label and input the name of the Label. To hide the name of the attribute (e.g. show the value only), uncheck the box. Label Color : To set the color of the label text, click the 3-dot button and select Color . Specify a color in the field that appears. To set the color back to the default color, click the 3 dot bottom and select None . Label Font : To set the label\u2019s font family, size, weight, and style, change the appropriate fields in the Font section Label Justify/Align : To set the label text justification and alignment, change the Justify and Aligns fields Label Allow Text Wrap : To allow the text of the label to wrap, check the box next to Allow Text Wrap . To prevent the label text from wrapping (it will get truncated instead), clear the checkbox. Value \u00b6 The Value section allows users to configure properties about the values displayed on the card. Value Show if Empty : To show a value if the attribute is empty, check the box next to Show if Empty . To hide the value if the attribute is empty, uncheck the box. Empty Value : To set the value that appears if the attribute is empty, specify the value in the Empty Value field. Common options are double dashes ( -- ) or blank. Value Color : To set the color of the value text, click the 3-dot button and select Color . Specify a color in the field that appears. To set the color back to the default color, click the 3 dot bottom and select None . Value Font : To set the value text\u2019s font family, size, weight, and style, change the appropriate fields in the Font section. Value Justify/Align : To set the value text justification and alignment, change the Justify and Aligns fields. Value Allow Text Wrap : To allow the text of the value to wrap, check the box next to Allow Text Wrap . To prevent the value text from wrapping (it will get truncated instead), clear the checkbox. Value Background : To set the color of the value background text, specify a color in the Background field. Note: This only changes the color around the text, it does not change the color of the entire cell. Attribute Options \u00b6 Variant : To have the card use a particular variant in UI builder, set the desired variant name in the Variant field Background : To set the color of the card background, specify a color in the Background field. Note: Unless overridden by the even/odd row background color configuration, the rows of the card will alternate between the specified background color and a secondary color that is slightly lighter than background color. Even Row Background : To set the background color of even numbered rows, specify a color in the Even Row Background field. Odd Row Background : To set the background color of odd numbered rows, specify a color in the Odd Row Background field. Title Color : To set the color of the card title, specify a color in the Title Color field. Default Label Color : To set a default color for the attribute labels on a card, specify the color in the Default Label Color field. This configuration is overridden by an attribute\u2019s label color configuration. Default Value Color : To set a default color for the attribute values on a card, specify the color in the Default Value Color field. This configuration is overridden by an attribute\u2019s value color configuration. Default Suffix Color : To set a default suffix color for the attribute on a card, specify the color in the Default Suffix Color field. Header Visible : To show the header/title of the card, check the box next to Header Visible . To hide the header/title of the card, uncheck the box. Title Attribute : To specify which attribute is shown in the title of the card, indicate the name of the attribute in the Title Attribute field. By default it is name . To specify another attribute, use the format [blueprintName].[attribute] (e.g. asset.vin ). Icon Attribute : To set the icon used in the card, leave the attribute as icon . Change the typeIcon URL in the blueprint\u2019s metadata to change the icon image. Icon Size : To set the size of the icon, specify the size with px added at the end. Display Options \u00b6 In the Options tab next to Detail , select the Display option from one of the following: Default Block Inline Inline Block Query Options \u00b6 In the Options menu next to the Editor tab, users can configure the query parameters and aspects on how the data results are displayed. Per Page : To set how many results are loaded per page, change the Per Page field to the desired number of results. Users with the correct permissions can also edit this amount in the bottom of the component when data is displayed Query Mode : To set what scope data is displayed, change the Query Mode : Selected : Historical data is shown for devices/assets that are selected (clicked on the map) Targeted : Historical data is shown for devices/assets that are targeted (checkbox checked in a list) All : Historical data is shown for all devices/assets Query Range : To set the time range of data that the historical query uses, use the date picker to select a predefined range (e.g. Last 7 Days, Last 30 Days) or a specific date range.","title":"History List Viewer"},{"location":"config/tables/history-list-viewer/#history-list-viewer","text":"A History List Viewer is a component that displays historical data on the devices, assets, and related blueprints in a card format.","title":"History List Viewer"},{"location":"config/tables/history-list-viewer/#accessing-the-history-list-viewer","text":"To access the history list viewer configuration, click the gear icon in the upper right of the component and select Edit Settings .","title":"Accessing the History List Viewer"},{"location":"config/tables/history-list-viewer/#configuring-the-history-list-viewer","text":"History list viewer configuration panel","title":"Configuring the History List Viewer"},{"location":"config/tables/history-list-viewer/#attribute-configuration","text":"The currently displayed attributes are shown in the list on the left side of the panel. To add attributes to the card, click the Attributes > Add button and select the desired attribute. To reorder the attributes, click and drag the attribute you wish to reorder into the desired location in the list.","title":"Attribute Configuration"},{"location":"config/tables/history-list-viewer/#label","text":"The Label section allows users to configure properties about the label on attributes added to the card. Show Label/Label Name : To show the name of the attribute in the card next to the value, check the box next to Show Label and input the name of the Label. To hide the name of the attribute (e.g. show the value only), uncheck the box. Label Color : To set the color of the label text, click the 3-dot button and select Color . Specify a color in the field that appears. To set the color back to the default color, click the 3 dot bottom and select None . Label Font : To set the label\u2019s font family, size, weight, and style, change the appropriate fields in the Font section Label Justify/Align : To set the label text justification and alignment, change the Justify and Aligns fields Label Allow Text Wrap : To allow the text of the label to wrap, check the box next to Allow Text Wrap . To prevent the label text from wrapping (it will get truncated instead), clear the checkbox.","title":"Label"},{"location":"config/tables/history-list-viewer/#value","text":"The Value section allows users to configure properties about the values displayed on the card. Value Show if Empty : To show a value if the attribute is empty, check the box next to Show if Empty . To hide the value if the attribute is empty, uncheck the box. Empty Value : To set the value that appears if the attribute is empty, specify the value in the Empty Value field. Common options are double dashes ( -- ) or blank. Value Color : To set the color of the value text, click the 3-dot button and select Color . Specify a color in the field that appears. To set the color back to the default color, click the 3 dot bottom and select None . Value Font : To set the value text\u2019s font family, size, weight, and style, change the appropriate fields in the Font section. Value Justify/Align : To set the value text justification and alignment, change the Justify and Aligns fields. Value Allow Text Wrap : To allow the text of the value to wrap, check the box next to Allow Text Wrap . To prevent the value text from wrapping (it will get truncated instead), clear the checkbox. Value Background : To set the color of the value background text, specify a color in the Background field. Note: This only changes the color around the text, it does not change the color of the entire cell.","title":"Value"},{"location":"config/tables/history-list-viewer/#attribute-options","text":"Variant : To have the card use a particular variant in UI builder, set the desired variant name in the Variant field Background : To set the color of the card background, specify a color in the Background field. Note: Unless overridden by the even/odd row background color configuration, the rows of the card will alternate between the specified background color and a secondary color that is slightly lighter than background color. Even Row Background : To set the background color of even numbered rows, specify a color in the Even Row Background field. Odd Row Background : To set the background color of odd numbered rows, specify a color in the Odd Row Background field. Title Color : To set the color of the card title, specify a color in the Title Color field. Default Label Color : To set a default color for the attribute labels on a card, specify the color in the Default Label Color field. This configuration is overridden by an attribute\u2019s label color configuration. Default Value Color : To set a default color for the attribute values on a card, specify the color in the Default Value Color field. This configuration is overridden by an attribute\u2019s value color configuration. Default Suffix Color : To set a default suffix color for the attribute on a card, specify the color in the Default Suffix Color field. Header Visible : To show the header/title of the card, check the box next to Header Visible . To hide the header/title of the card, uncheck the box. Title Attribute : To specify which attribute is shown in the title of the card, indicate the name of the attribute in the Title Attribute field. By default it is name . To specify another attribute, use the format [blueprintName].[attribute] (e.g. asset.vin ). Icon Attribute : To set the icon used in the card, leave the attribute as icon . Change the typeIcon URL in the blueprint\u2019s metadata to change the icon image. Icon Size : To set the size of the icon, specify the size with px added at the end.","title":"Attribute Options"},{"location":"config/tables/history-list-viewer/#display-options","text":"In the Options tab next to Detail , select the Display option from one of the following: Default Block Inline Inline Block","title":"Display Options"},{"location":"config/tables/history-list-viewer/#query-options","text":"In the Options menu next to the Editor tab, users can configure the query parameters and aspects on how the data results are displayed. Per Page : To set how many results are loaded per page, change the Per Page field to the desired number of results. Users with the correct permissions can also edit this amount in the bottom of the component when data is displayed Query Mode : To set what scope data is displayed, change the Query Mode : Selected : Historical data is shown for devices/assets that are selected (clicked on the map) Targeted : Historical data is shown for devices/assets that are targeted (checkbox checked in a list) All : Historical data is shown for all devices/assets Query Range : To set the time range of data that the historical query uses, use the date picker to select a predefined range (e.g. Last 7 Days, Last 30 Days) or a specific date range.","title":"Query Options"},{"location":"config/tables/history-table-viewer/","text":"History Table Viewer \u00b6 A History Table Viewer is a component that displays historical data on the devices, assets, and related blueprints in a table format. Accessing the History Table Viewer Configuration \u00b6 To access the history table configuration, click the gear icon in the upper right of the component and select Edit Settings . Configuring the History Table Viewer \u00b6 History table viewer configuration panel History Screen Options \u00b6 The history table view is organized by columns. The currently displayed columns are shown in the list on the left side of the panel. To add a column to the table, click Add > [new column] . To reorder the columns, click and drag the column you wish to reorder into the desired location in the list. Column Configuration \u00b6 Column Name : To edit the display name of the column, change the Column Name field Column Width : To set the default width of the column, change the Column Width field Column Min and Max Width : To set the minimum and maximum allowable width of the column, set the Min Width and Max Width fields Header Configuration \u00b6 Header Color : To set the color of the column Header text, click the 3-dot button and select Color . Specify a color in the field that appears. To set the color back to the default color, click the 3 dot bottom and select None . Header Font : To set the header\u2019s font family, size, weight, and style, change the appropriate fields in the Header Font section Header Justify/Align : To set the header text justification and alignment, change the Justify and Align fields Header Allow Text Wrap : To allow the text of the header to wrap, check the box next to Allow Text Wrap . To prevent the header text from wrapping (it will get truncated instead), clear the checkbox. Header Background : To set the color of the header background text, specify a color in the Background field. Note: This only changes the color behind the text, it does not change the color of the header cell. Cell Configuration \u00b6 The Cell configuration section refers to text in the main body of the table. Cell Empty Value : To set the value that appears if the cell contents are empty, specify the value in the Empty Value field. Common options are double dashes ( -- ) or blank. Cell Color : To set the color of the cell text, click the 3-dot button and select Color . Specify a color in the field that appears. To set the color back to the default color, click the 3 dot bottom and select None . Cell Font : To set the cell\u2019s font family, size, weight, and style, change the appropriate fields in the Cell Font section Cell Justify/Align : To set the cell text justification and alignment, change the Justify and Align fields Cell Allow Text Wrap : To allow the text of the cell to wrap, check the box next to Allow Text Wrap . To prevent the cell text from wrapping (it will get truncated instead), clear the checkbox. Cell Background : To set the color of the cell background text, specify a color in the Background field. Note: This only changes the color behind the text, it does not change the color of the entire cell. Query Options \u00b6 In the Options menu next to the Editor tab, users can configure the query parameters and aspects on how the data results are displayed. Per Page : To set how many results are loaded per page, change the Per Page field to the desired number of results. Users with the correct permissions can also edit this amount in the bottom of the component when data is displayed Query Mode : To set what scope data is displayed, change the Query Mode : Selected : Historical data is shown for devices/assets that are selected (clicked on the map) Targeted : Historical data is shown for devices/assets that are targeted (checkbox checked in a list) All : Historical data is shown for all devices/assets Query Range : To set the time range of data that the historical query uses, use the date picker to select a predefined range (e.g. Last 7 Days, Last 30 Days) or a specific date range.","title":"History Table Viewer"},{"location":"config/tables/history-table-viewer/#history-table-viewer","text":"A History Table Viewer is a component that displays historical data on the devices, assets, and related blueprints in a table format.","title":"History Table Viewer"},{"location":"config/tables/history-table-viewer/#accessing-the-history-table-viewer-configuration","text":"To access the history table configuration, click the gear icon in the upper right of the component and select Edit Settings .","title":"Accessing the History Table Viewer Configuration"},{"location":"config/tables/history-table-viewer/#configuring-the-history-table-viewer","text":"History table viewer configuration panel","title":"Configuring the History Table Viewer"},{"location":"config/tables/history-table-viewer/#history-screen-options","text":"The history table view is organized by columns. The currently displayed columns are shown in the list on the left side of the panel. To add a column to the table, click Add > [new column] . To reorder the columns, click and drag the column you wish to reorder into the desired location in the list.","title":"History Screen Options"},{"location":"config/tables/history-table-viewer/#column-configuration","text":"Column Name : To edit the display name of the column, change the Column Name field Column Width : To set the default width of the column, change the Column Width field Column Min and Max Width : To set the minimum and maximum allowable width of the column, set the Min Width and Max Width fields","title":"Column Configuration"},{"location":"config/tables/history-table-viewer/#header-configuration","text":"Header Color : To set the color of the column Header text, click the 3-dot button and select Color . Specify a color in the field that appears. To set the color back to the default color, click the 3 dot bottom and select None . Header Font : To set the header\u2019s font family, size, weight, and style, change the appropriate fields in the Header Font section Header Justify/Align : To set the header text justification and alignment, change the Justify and Align fields Header Allow Text Wrap : To allow the text of the header to wrap, check the box next to Allow Text Wrap . To prevent the header text from wrapping (it will get truncated instead), clear the checkbox. Header Background : To set the color of the header background text, specify a color in the Background field. Note: This only changes the color behind the text, it does not change the color of the header cell.","title":"Header Configuration"},{"location":"config/tables/history-table-viewer/#cell-configuration","text":"The Cell configuration section refers to text in the main body of the table. Cell Empty Value : To set the value that appears if the cell contents are empty, specify the value in the Empty Value field. Common options are double dashes ( -- ) or blank. Cell Color : To set the color of the cell text, click the 3-dot button and select Color . Specify a color in the field that appears. To set the color back to the default color, click the 3 dot bottom and select None . Cell Font : To set the cell\u2019s font family, size, weight, and style, change the appropriate fields in the Cell Font section Cell Justify/Align : To set the cell text justification and alignment, change the Justify and Align fields Cell Allow Text Wrap : To allow the text of the cell to wrap, check the box next to Allow Text Wrap . To prevent the cell text from wrapping (it will get truncated instead), clear the checkbox. Cell Background : To set the color of the cell background text, specify a color in the Background field. Note: This only changes the color behind the text, it does not change the color of the entire cell.","title":"Cell Configuration"},{"location":"config/tables/history-table-viewer/#query-options","text":"In the Options menu next to the Editor tab, users can configure the query parameters and aspects on how the data results are displayed. Per Page : To set how many results are loaded per page, change the Per Page field to the desired number of results. Users with the correct permissions can also edit this amount in the bottom of the component when data is displayed Query Mode : To set what scope data is displayed, change the Query Mode : Selected : Historical data is shown for devices/assets that are selected (clicked on the map) Targeted : Historical data is shown for devices/assets that are targeted (checkbox checked in a list) All : Historical data is shown for all devices/assets Query Range : To set the time range of data that the historical query uses, use the date picker to select a predefined range (e.g. Last 7 Days, Last 30 Days) or a specific date range.","title":"Query Options"},{"location":"config/tables/list-viewer/","text":"List Viewer \u00b6 The list viewer is a UI component that shows data as a list of cards. The data fields shown in each card is configurable by the user. Accessing the List Viewer Configuration \u00b6 To access the responsive table configuration, click the gear icon in the upper right of the component and select Edit Settings . Configuring the List Viewer \u00b6 The list viewer shows data in a card format. By default, the primary label on the card corresponds to the primary name attribute of the blueprint of the page (e.g. Vehicles). This can be changed in the Options > Title Attribute field by specifying the desired title in the format [blueprintName].[attribute] . List viewer configuration panel The currently displayed attributes are shown in the list on the left side of the panel. To add attributes to the card, click the Attributes > Add button and select the desired attribute. To reorder the attributes, click and drag the attribute you wish to reorder into the desired location in the list. Attribute Configuration \u00b6 Label \u00b6 The Label section allows users to configure properties about the label on attributes added to the card. Show Label/Label Name : To show the name of the attribute in the card next to the value, check the box next to Show Label and input the name of the Label. To hide the name of the attribute (e.g. show the value only), uncheck the box. Label Color : To set the color of the label text, click the 3-dot button and select Color . Specify a color in the field that appears. To set the color back to the default color, click the 3 dot bottom and select None . Label Font : To set the label\u2019s font family, size, weight, and style, change the appropriate fields in the Font section Label Justify/Align : To set the label text justification and alignment, change the Justify and Aligns fields Label Allow Text Wrap : To allow the text of the label to wrap, check the box next to Allow Text Wrap . To prevent the label text from wrapping (it will get truncated instead), clear the checkbox. Value \u00b6 The Value section allows users to configure properties about the values displayed on the card. Value Show if Empty : To show a value if the attribute is empty, check the box next to Show if Empty . To hide the value if the attribute is empty, uncheck the box. Empty Value : To set the value that appears if the attribute is empty, specify the value in the Empty Value field. Common options are double dashes ( -- ) or blank. Value Color : To set the color of the value text, click the 3-dot button and select Color . Specify a color in the field that appears. To set the color back to the default color, click the 3 dot bottom and select None . Value Font : To set the value text\u2019s font family, size, weight, and style, change the appropriate fields in the Font section. Value Justify/Align : To set the value text justification and alignment, change the Justify and Aligns fields. Value Allow Text Wrap : To allow the text of the value to wrap, check the box next to Allow Text Wrap . To prevent the value text from wrapping (it will get truncated instead), clear the checkbox. Value Background : To set the color of the value background text, specify a color in the Background field. Note: This only changes the color around the text, it does not change the color of the entire cell. Attribute Options \u00b6 Variant : To have the card use a particular variant in UI builder, set the desired variant name in the Variant field Background : To set the color of the card background, specify a color in the Background field. Note: Unless overridden by the even/odd row background color configuration, the rows of the card will alternate between the specified background color and a secondary color that is slightly lighter than background color. Even Row Background : To set the background color of even numbered rows, specify a color in the Even Row Background field. Odd Row Background : To set the background color of odd numbered rows, specify a color in the Odd Row Background field. Title Color : To set the color of the card title, specify a color in the Title Color field. Default Label Color : To set a default color for the attribute labels on a card, specify the color in the Default Label Color field. This configuration is overridden by an attribute\u2019s label color configuration. Default Value Color : To set a default color for the attribute values on a card, specify the color in the Default Value Color field. This configuration is overridden by an attribute\u2019s value color configuration. Default Suffix Color : To set a default suffix color for the attribute on a card, specify the color in the Default Suffix Color field. Header Visible : To show the header/title of the card, check the box next to Header Visible . To hide the header/title of the card, uncheck the box. Title Attribute : To specify which attribute is shown in the title of the card, indicate the name of the attribute in the Title Attribute field. By default it is name . To specify another attribute, use the format [blueprintName].[attribute] (e.g. asset.vin ). Icon Attribute : To set the icon used in the card, leave the attribute as icon . Change the typeIcon URL in the blueprint\u2019s metadata to change the icon image. Icon Size : To set the size of the icon, specify the size with px added at the end. Display Options \u00b6 In the Options tab next to Detail , select the Display option from one of the following: Default Block Inline Inline Block","title":"List Viewer"},{"location":"config/tables/list-viewer/#list-viewer","text":"The list viewer is a UI component that shows data as a list of cards. The data fields shown in each card is configurable by the user.","title":"List Viewer"},{"location":"config/tables/list-viewer/#accessing-the-list-viewer-configuration","text":"To access the responsive table configuration, click the gear icon in the upper right of the component and select Edit Settings .","title":"Accessing the List Viewer Configuration"},{"location":"config/tables/list-viewer/#configuring-the-list-viewer","text":"The list viewer shows data in a card format. By default, the primary label on the card corresponds to the primary name attribute of the blueprint of the page (e.g. Vehicles). This can be changed in the Options > Title Attribute field by specifying the desired title in the format [blueprintName].[attribute] . List viewer configuration panel The currently displayed attributes are shown in the list on the left side of the panel. To add attributes to the card, click the Attributes > Add button and select the desired attribute. To reorder the attributes, click and drag the attribute you wish to reorder into the desired location in the list.","title":"Configuring the List Viewer"},{"location":"config/tables/list-viewer/#attribute-configuration","text":"","title":"Attribute Configuration"},{"location":"config/tables/list-viewer/#label","text":"The Label section allows users to configure properties about the label on attributes added to the card. Show Label/Label Name : To show the name of the attribute in the card next to the value, check the box next to Show Label and input the name of the Label. To hide the name of the attribute (e.g. show the value only), uncheck the box. Label Color : To set the color of the label text, click the 3-dot button and select Color . Specify a color in the field that appears. To set the color back to the default color, click the 3 dot bottom and select None . Label Font : To set the label\u2019s font family, size, weight, and style, change the appropriate fields in the Font section Label Justify/Align : To set the label text justification and alignment, change the Justify and Aligns fields Label Allow Text Wrap : To allow the text of the label to wrap, check the box next to Allow Text Wrap . To prevent the label text from wrapping (it will get truncated instead), clear the checkbox.","title":"Label"},{"location":"config/tables/list-viewer/#value","text":"The Value section allows users to configure properties about the values displayed on the card. Value Show if Empty : To show a value if the attribute is empty, check the box next to Show if Empty . To hide the value if the attribute is empty, uncheck the box. Empty Value : To set the value that appears if the attribute is empty, specify the value in the Empty Value field. Common options are double dashes ( -- ) or blank. Value Color : To set the color of the value text, click the 3-dot button and select Color . Specify a color in the field that appears. To set the color back to the default color, click the 3 dot bottom and select None . Value Font : To set the value text\u2019s font family, size, weight, and style, change the appropriate fields in the Font section. Value Justify/Align : To set the value text justification and alignment, change the Justify and Aligns fields. Value Allow Text Wrap : To allow the text of the value to wrap, check the box next to Allow Text Wrap . To prevent the value text from wrapping (it will get truncated instead), clear the checkbox. Value Background : To set the color of the value background text, specify a color in the Background field. Note: This only changes the color around the text, it does not change the color of the entire cell.","title":"Value"},{"location":"config/tables/list-viewer/#attribute-options","text":"Variant : To have the card use a particular variant in UI builder, set the desired variant name in the Variant field Background : To set the color of the card background, specify a color in the Background field. Note: Unless overridden by the even/odd row background color configuration, the rows of the card will alternate between the specified background color and a secondary color that is slightly lighter than background color. Even Row Background : To set the background color of even numbered rows, specify a color in the Even Row Background field. Odd Row Background : To set the background color of odd numbered rows, specify a color in the Odd Row Background field. Title Color : To set the color of the card title, specify a color in the Title Color field. Default Label Color : To set a default color for the attribute labels on a card, specify the color in the Default Label Color field. This configuration is overridden by an attribute\u2019s label color configuration. Default Value Color : To set a default color for the attribute values on a card, specify the color in the Default Value Color field. This configuration is overridden by an attribute\u2019s value color configuration. Default Suffix Color : To set a default suffix color for the attribute on a card, specify the color in the Default Suffix Color field. Header Visible : To show the header/title of the card, check the box next to Header Visible . To hide the header/title of the card, uncheck the box. Title Attribute : To specify which attribute is shown in the title of the card, indicate the name of the attribute in the Title Attribute field. By default it is name . To specify another attribute, use the format [blueprintName].[attribute] (e.g. asset.vin ). Icon Attribute : To set the icon used in the card, leave the attribute as icon . Change the typeIcon URL in the blueprint\u2019s metadata to change the icon image. Icon Size : To set the size of the icon, specify the size with px added at the end.","title":"Attribute Options"},{"location":"config/tables/list-viewer/#display-options","text":"In the Options tab next to Detail , select the Display option from one of the following: Default Block Inline Inline Block","title":"Display Options"},{"location":"config/tables/parents/","text":"Parent Data Columns in Tables \u00b6 Sometimes, you want to show the parent on the child table. You can see an example of this below, where the table is showing the parent location of the asset. In this guide, we'll show you how to set that up in your interface. Parent table column example To add and configure parent columns in the child blueprint's table, you can add metadata to the parent attribute on the child blueprint. Edit metadata of parent attribute For the setter metadata, there are two values you need to understand, path and sourcePath . Setter Value Description path The path of the current blueprint you are trying to configure the parent column for. Paths determine where you are in the UI looking at this blueprint. sourcePath The path of the parent you are trying to load into the chid table. For example, if your root is Location which has a one to many relationship with Assets and you are on the assets page in a given location, your path would be location.assets and your source path would be location . Whether you use singular or plural depends on the type of relationship. If it was a one-to-one relationship, your path would look like location.asset . Alternatively, if your root was company and company had a one-to-many relationship with locations while locations still had a one-to-many relationship with assets, your path and sourcePath would be company.locations.assets & company.locations respectively. For our final example, lets say both your location blueprint and asset blueprint are roots and you want to load the location column into the root-level asset page. In this case your path is asset and your source path is location . Both will be singular since they are roots. Metadata Example { \"setter\" : { \"parentSources\" : [ { \"path\" : \"location.assets\" , \"sourcePath\" : \"location\" }, { \"path\" : \"company.locations.assets\" , \"sourcePath\" : \"company.locations\" }, { \"path\" : \"asset\" , \"sourcePath\" : \"location\" } ] } } Copying Parent Attributes onto the Child \u00b6 Along with enabling the parent to show up in the child table, you can also copy attributes from the parent onto the child. Note that this only gets updated when a relationship is created. If the attribute is changed on the parent later, the copied value on the child does not update . Setter Value Description child Child represents the attribute on the child blueprint you want to copy the value to. The format should follow blueprint.attribute . Note that if you have your attributes in a group it may look like blueprint.group.attribute copyNull If the value is null, you can either copy the value by setting this to true or ignoring the value by setting this to false parent Parent represents the attribute from the parent blueprint you want to copy onto the child. The format is the same as the child value. Metadata Example { \"setter\" : { \"copyValues\" : [ { \"child\" : \"asset.address\" , \"copyNull\" : true , \"parent\" : \"location.address\" } ], } } Running Functions Against the Parent Value \u00b6 When copying the value from the parent, sometimes you want to run a function against it to get the correct child data. The two valid options for this are geoJsonCenter and geoJsonCenterOfMass , which are only usable with a parent geoShape value and a geoPoint child value. If type is not set, the parent value will be copied to the child. The types must be the same. Setter Value Description geoJsonCenter If you drew a box around the geoshape, this represents the center of that box. geoJsonCenterOfMass This represents the geometric center of the geoshape, the arithmetic mean position of all of the points in the figure. Center vs. Center of Mass A good use case example for this function is beacon installation into zones. When installing beacons, you might want them to automatically be placed in the center of a zone, in which case you would want to use type:geoShapeCenterOfMass { \"setter\" : { \"copyValues\" : [ { \"child\" : \"beacon.position\" , \"copyNull\" : false , \"parent\" : \"zone.area\" , \"type\" : \"geoShapeCenterOfMass\" } ] } }","title":"Parent Data Columns in Tables"},{"location":"config/tables/parents/#parent-data-columns-in-tables","text":"Sometimes, you want to show the parent on the child table. You can see an example of this below, where the table is showing the parent location of the asset. In this guide, we'll show you how to set that up in your interface. Parent table column example To add and configure parent columns in the child blueprint's table, you can add metadata to the parent attribute on the child blueprint. Edit metadata of parent attribute For the setter metadata, there are two values you need to understand, path and sourcePath . Setter Value Description path The path of the current blueprint you are trying to configure the parent column for. Paths determine where you are in the UI looking at this blueprint. sourcePath The path of the parent you are trying to load into the chid table. For example, if your root is Location which has a one to many relationship with Assets and you are on the assets page in a given location, your path would be location.assets and your source path would be location . Whether you use singular or plural depends on the type of relationship. If it was a one-to-one relationship, your path would look like location.asset . Alternatively, if your root was company and company had a one-to-many relationship with locations while locations still had a one-to-many relationship with assets, your path and sourcePath would be company.locations.assets & company.locations respectively. For our final example, lets say both your location blueprint and asset blueprint are roots and you want to load the location column into the root-level asset page. In this case your path is asset and your source path is location . Both will be singular since they are roots. Metadata Example { \"setter\" : { \"parentSources\" : [ { \"path\" : \"location.assets\" , \"sourcePath\" : \"location\" }, { \"path\" : \"company.locations.assets\" , \"sourcePath\" : \"company.locations\" }, { \"path\" : \"asset\" , \"sourcePath\" : \"location\" } ] } }","title":"Parent Data Columns in Tables"},{"location":"config/tables/parents/#copying-parent-attributes-onto-the-child","text":"Along with enabling the parent to show up in the child table, you can also copy attributes from the parent onto the child. Note that this only gets updated when a relationship is created. If the attribute is changed on the parent later, the copied value on the child does not update . Setter Value Description child Child represents the attribute on the child blueprint you want to copy the value to. The format should follow blueprint.attribute . Note that if you have your attributes in a group it may look like blueprint.group.attribute copyNull If the value is null, you can either copy the value by setting this to true or ignoring the value by setting this to false parent Parent represents the attribute from the parent blueprint you want to copy onto the child. The format is the same as the child value. Metadata Example { \"setter\" : { \"copyValues\" : [ { \"child\" : \"asset.address\" , \"copyNull\" : true , \"parent\" : \"location.address\" } ], } }","title":"Copying Parent Attributes onto the Child"},{"location":"config/tables/parents/#running-functions-against-the-parent-value","text":"When copying the value from the parent, sometimes you want to run a function against it to get the correct child data. The two valid options for this are geoJsonCenter and geoJsonCenterOfMass , which are only usable with a parent geoShape value and a geoPoint child value. If type is not set, the parent value will be copied to the child. The types must be the same. Setter Value Description geoJsonCenter If you drew a box around the geoshape, this represents the center of that box. geoJsonCenterOfMass This represents the geometric center of the geoshape, the arithmetic mean position of all of the points in the figure. Center vs. Center of Mass A good use case example for this function is beacon installation into zones. When installing beacons, you might want them to automatically be placed in the center of a zone, in which case you would want to use type:geoShapeCenterOfMass { \"setter\" : { \"copyValues\" : [ { \"child\" : \"beacon.position\" , \"copyNull\" : false , \"parent\" : \"zone.area\" , \"type\" : \"geoShapeCenterOfMass\" } ] } }","title":"Running Functions Against the Parent Value"},{"location":"config/tables/responsive-history-table/","text":"Responsive History Table \u00b6 A responsive history table is a component that displays historical data on the devices/assets/related blueprints. The component changes its presentation of its data based on the size of the page or panel that it occupies. When a user drags the boundaries or resizes the page containing a responsive history table to smaller than a given threshold, the view switches from a history table view to a history list view. Accessing the Responsive History Table Configuration \u00b6 To access the responsive table configuration, click the gear icon in the upper right of the component and select Edit Settings . History Table/List The responsive history table is called History Table/List in the layout controller. Configuring the Responsive Table \u00b6 To configure a responsive table, users must configure both: The expanded history table viewer and The collapsed history list viewer To do so, users edit the configuration when the responsive history table is expanded, and then users collapse the table and edit the configuration when the responsive history table is collapsed. The responsive history table will pull from the same configuration as the \u201cstatic\u201d versions of the history table viewer and the history list viewer. History table and history list viewere configuration Please refer to the sections on the history table viewer and the history list viewer for more details on how to configure the components which make up the responsive history table.","title":"Responsive History Table"},{"location":"config/tables/responsive-history-table/#responsive-history-table","text":"A responsive history table is a component that displays historical data on the devices/assets/related blueprints. The component changes its presentation of its data based on the size of the page or panel that it occupies. When a user drags the boundaries or resizes the page containing a responsive history table to smaller than a given threshold, the view switches from a history table view to a history list view.","title":"Responsive History Table"},{"location":"config/tables/responsive-history-table/#accessing-the-responsive-history-table-configuration","text":"To access the responsive table configuration, click the gear icon in the upper right of the component and select Edit Settings . History Table/List The responsive history table is called History Table/List in the layout controller.","title":"Accessing the Responsive History Table Configuration"},{"location":"config/tables/responsive-history-table/#configuring-the-responsive-table","text":"To configure a responsive table, users must configure both: The expanded history table viewer and The collapsed history list viewer To do so, users edit the configuration when the responsive history table is expanded, and then users collapse the table and edit the configuration when the responsive history table is collapsed. The responsive history table will pull from the same configuration as the \u201cstatic\u201d versions of the history table viewer and the history list viewer. History table and history list viewere configuration Please refer to the sections on the history table viewer and the history list viewer for more details on how to configure the components which make up the responsive history table.","title":"Configuring the Responsive Table"},{"location":"config/tables/responsive-table/","text":"Responsive Table \u00b6 A responsive table is a component that changes its presentation of its data based on the size of the page or panel that it occupies. When a user drags the boundaries of a responsive table to smaller than a given threshold or resizes the page, the view switches from a table viewer to a list viewer. Table/List The responsive table is called Table/List when selecting it from the layout controller. View of responsive table showing as a table viewer when component is expanded View of responsive table showing as a list viewer when component is collapsed Accessing the Responsive Table Configuration \u00b6 To access the responsive table configuration, click the gear icon in the upper right of the component and select Edit Settings . Configuring the Responsive Table \u00b6 To configure a responsive table, users must configure both: The expanded table viewer and The collapsed list viewer To do so, users edit the configuration when the responsive table is expanded, and then users collapse the table and edit the configuration when the responsive table is collapsed. The responsive table will pull from the same configuration as the \u201cstatic\u201d versions of the table viewer and the list viewer. Table and list viewer configuration Please refer to the sections on the table viewer and the list viewer for more details on how to configure the components which make up the responsive table.","title":"Responsive Table"},{"location":"config/tables/responsive-table/#responsive-table","text":"A responsive table is a component that changes its presentation of its data based on the size of the page or panel that it occupies. When a user drags the boundaries of a responsive table to smaller than a given threshold or resizes the page, the view switches from a table viewer to a list viewer. Table/List The responsive table is called Table/List when selecting it from the layout controller. View of responsive table showing as a table viewer when component is expanded View of responsive table showing as a list viewer when component is collapsed","title":"Responsive Table"},{"location":"config/tables/responsive-table/#accessing-the-responsive-table-configuration","text":"To access the responsive table configuration, click the gear icon in the upper right of the component and select Edit Settings .","title":"Accessing the Responsive Table Configuration"},{"location":"config/tables/responsive-table/#configuring-the-responsive-table","text":"To configure a responsive table, users must configure both: The expanded table viewer and The collapsed list viewer To do so, users edit the configuration when the responsive table is expanded, and then users collapse the table and edit the configuration when the responsive table is collapsed. The responsive table will pull from the same configuration as the \u201cstatic\u201d versions of the table viewer and the list viewer. Table and list viewer configuration Please refer to the sections on the table viewer and the list viewer for more details on how to configure the components which make up the responsive table.","title":"Configuring the Responsive Table"},{"location":"config/tables/sorting/","text":"Configuration and Dashboard Basics \u00b6 Leverege Amplify provides users with the ability to configure the look, feel, and behavior of the vast majority of components in the application. Examples of components include tables, maps, rollover cards, and graphs. Configuring a page of the application relies on three primary steps: Configuring each component using its configuration panel . A configuration panel is a popup or screen where a user can configure and change settings of an individual component on a page Saving the components to a dashboard . A dashboard is a single view that arranges and displays all the components on the page Setting where and for whom the dashboard appears . By setting the dashboard availability and defaults, a user can specify on which pages and for which types of users the dashboard is seen. The following sections describe how to interact with configuration panel, save configured components to a dashboard, and administer a dashboard to be seen by either all or select users of an application. Accessing a Configuration Panel \u00b6 Each configurable component in the application is controlled by a configuration panel. All configuration panels share a similar layout and set of functions. Accessing the configuration panel differs by component, but most can be identified with the gear icon. Refer to the specific component\u2019s documentation for instructions on how to exactly access its configuration panel. Configuration is only available for those users with the appropriate permission. Primary Configuration Area \u00b6 The primary configuration area on a configuration page is typically a 2-panel card. For example, tables have a configuration area where the list of available fields are selectable on the left and the configurable values are displayed on the right. [Screenshot of table configuration panel with each side outlined and labeled] The primary configuration may vary slightly depending on the UI component. For example, in the search bar configuration, the configuration area is a list of the searchable fields with checkboxes. [Screenshot of search bar configuration] Versions \u00b6 A version is a saved configuration profile for an individual UI component. A user may use versions when experimenting with the configuration of a component before rolling it out to others. A version is specific to the user, in that no users can see another\u2019s user versions. Create A Version \u00b6 To create a version, use the Save To > Create Version button in the upper right of the configuration panel. Save A Version \u00b6 Once created, users can save their current component\u2019s configuration to the version by clicking Save To > Versions and selecting the version. Once saved, click Apply to apply the configuration to the component. Load A Version \u00b6 To retrieve a previously saved version, click the Load From button in the upper left of the configuration panel and select the desired version. This will load that version\u2019s configuration into the panel. Click Apply to the apply that version\u2019s configuration to the component. [Save To Screenshot] [Load From Screenshot] Delete A Version \u00b6 To delete a version, click the three dots icon next to Save To > Delete Versions , and select the version to delete. Confirm the deletion in the prompt. Configuring a Page \u00b6 The high-level steps to configuring a page are: Pick the role and page : If the configured page is applicable to a specific role, assume the role using the role selector. Then, navigate to the page where the configuration should apply. Configure each component on the page : Refer to the UI component documentation as necessary Save the configured state to a dashboard : The dashboard can either be an existing or new dashboard. If new, specify where and to which users the dashboard can be shown as a selection option. Set the priority of the dashboards by setting defaults : once the dashboard is saved, determine when it should be shown to a user in relative priority to other dashboards already configured for the page Pick the Role and Page \u00b6 It\u2019s common for an application to present data on the same page differently to users with different roles. For example, a field engineer may want to see the battery level and firmeware version of a device, while a customer service rep may want to see its last known location. If the configuration is applicable to a specific role, assume the role by selecting it from the role selector. Access the role selector by clicking the username in upper right of the page and selecting the role under User Role . [Screenshot of role selector] Navigate to the page to where the configuration should be applied. For example, if the configuration is intended for the Assets page, navigate to the Assets page. If the configuration is meant to be applied to an existing dashboard, load the dashboard by selecting it from the dashboard selector at the top of the page. [Screenshot of the dashboard selector] Configure Each Component on the Page \u00b6 Use the layout controller to place the desired components on the page. Refer to the documentation for the layout controller for more details. [Screenshot of layout controller on the UI] For each component, access the control panel and make the desired configuration changes. Click Apply in the configuration panel of that component once all the desired changes are performed. Refer to the document for the specific component for more details. Save the Configured State to a Dashboard \u00b6 Once all configuration to all components have been completed, a user can save the entire state of the page to a dashboard. To save the configured state to the current dashboard, click the check mark icon next to the dashboard selector. To revert the changes back to its previously saved state, click the reverse circle icon. [Screenshot of save & revert of current dashboard] Note: The Default dashboard is a user\u2019s personal dashboard configuration for exact page location. Saving the configuration to the dashboard titled \u201cDefault\u201d will only apply the configuration as the default dashboard to the current user, for currently assumed role, and to exact path for which the configuration was performed. For example, if a user A is on the Company > Assets page as Role A and saves a new configuration to the Default dashboard at that page, it will affect only the Default dashboard for User A while they are using Role A on the Company > Assets page. It will not impact the Default dashboard for user B at Company > Assets using Role A, not impact Default dashboard for any users at Company > Assets using Role B, and not impact the Default dashboard of user A at other Asset paths (e.g. Location > Assets) using Role A. To save the configured state to a new dashboard, click the three-dot icon next to the dashboard selector and click Save Dashboard As\u2026 In the Save Dashboard As\u2026 popup, enter the name of the new dashboard Select the availability of the dashboard from the Available To dropdown: Role Level - Any on this page: The option to select this dashboard will appear for any users of role X on this exact page path, with role X being the currently assumed role of the user doing the configuration. For example, only show this dashboard for users with Role A and on the Assets page at the Company > Assets path. This will create an option in the dropdown under the \u201cRole\u201d section of the dashboard selector. Page Level - Any user on this page: The option to select this dashboard will appear for any user of any role on this exact page path. For example, show this dashboard for all users on the Assets page at the Company > Assets path. This will create an option in the dropdown under the \u201cPage\u201d section. Blueprint Level - Any user on the page showing this page's Blueprint type: The option to select this dashboard will appear for any user of any role on a page of the same Blueprint type as the one being configured. For example, show this dashboard for all users on all Asset pages, regardless of its specific path. This will create an option in the dropdown under the section named after the Blueprint type (e.g. Assets). Personal Blueprint Level - Me on any page showing this page's Blueprint type: The option to select this dashboard will appear for only the current user on any page of any role on a page of the same Blueprint type as the one being configured. This will create an option in the dropdown under the \u201cMine\u201d section. Looking for an option to save the configured page to the current user for the current role and current path? Save the dashboard to the Default dashboard by click the check mark next to the left of the dashboard selector? Set the Defaults Of The Page \u00b6 The previous section on Saving the Dashboard produces a dashboard that is available for selection by a user on a give page. It does not yet specify whether it will load by default when a user visits that page. In order to apply the dashboard to pages so that it loads for given users, page locations, and roles, set the dashboard defaults. Click the three dots icon next to the dashboard selector to load the list of editable dashboards Depending on how many dashboards you have configured and their availability on the page, you will see dashboards separated into the following categories based on availability criteria: Role - Dashboards that are available to show on this page based on the user\u2019s role Page - Dashboards that are available to show on this page based on the user\u2019s page path in the application [Name of Blueprint Type] (e.g. Assets) - Dashboards that are available to show on this page based on the type of blueprint that page is showing Mine - Personal dashboards that are available to show on this page based on the type of blueprint that page is showing To set a dashboard to show by default on the page when it meets the availability criteria, select the dashboard > Use as Default . Only one dashboard from each section can be set as default (e.g. only one Role-level dashboard can be set as default, one Page-level dashboard can be set as default, etc.) In the event that multiple dashboards across each section is set as default, the application shows the default dashboard based on this ranking (from highest to lowest): Mine Role Page Blueprint Default Managing Dashboards \u00b6 Renaming A Dashboard \u00b6 To rename a dashboard, click the three dots icon next to the dashboard selector and select the [dashboard name] > Rename . Delete a Dashboard \u00b6 To delete a dashboard, click the three dots icon next to the dashboard selector and select the dashboard name > Delete . If the deleted dashboard was displayed on the page, the page will switch to showing the Default dashboard. Reset Personal Default Dashboard Back to Stock \u00b6 If the Default dashboard has been changed and a user wishes to reset it back to its original state (e.g. \u201cfactory defaults\u201d), select the Default dashboard from the dashboard selector. Then click the three dots icon next to the dashboard selector > Reset to Default Dashboard . Configuration Best Practices \u00b6 We\u2019re working on making a list of best practices, stay tuned!","title":"Configuration and Dashboard Basics"},{"location":"config/tables/sorting/#configuration-and-dashboard-basics","text":"Leverege Amplify provides users with the ability to configure the look, feel, and behavior of the vast majority of components in the application. Examples of components include tables, maps, rollover cards, and graphs. Configuring a page of the application relies on three primary steps: Configuring each component using its configuration panel . A configuration panel is a popup or screen where a user can configure and change settings of an individual component on a page Saving the components to a dashboard . A dashboard is a single view that arranges and displays all the components on the page Setting where and for whom the dashboard appears . By setting the dashboard availability and defaults, a user can specify on which pages and for which types of users the dashboard is seen. The following sections describe how to interact with configuration panel, save configured components to a dashboard, and administer a dashboard to be seen by either all or select users of an application.","title":"Configuration and Dashboard Basics"},{"location":"config/tables/sorting/#accessing-a-configuration-panel","text":"Each configurable component in the application is controlled by a configuration panel. All configuration panels share a similar layout and set of functions. Accessing the configuration panel differs by component, but most can be identified with the gear icon. Refer to the specific component\u2019s documentation for instructions on how to exactly access its configuration panel. Configuration is only available for those users with the appropriate permission.","title":"Accessing a Configuration Panel"},{"location":"config/tables/sorting/#primary-configuration-area","text":"The primary configuration area on a configuration page is typically a 2-panel card. For example, tables have a configuration area where the list of available fields are selectable on the left and the configurable values are displayed on the right. [Screenshot of table configuration panel with each side outlined and labeled] The primary configuration may vary slightly depending on the UI component. For example, in the search bar configuration, the configuration area is a list of the searchable fields with checkboxes. [Screenshot of search bar configuration]","title":"Primary Configuration Area"},{"location":"config/tables/sorting/#versions","text":"A version is a saved configuration profile for an individual UI component. A user may use versions when experimenting with the configuration of a component before rolling it out to others. A version is specific to the user, in that no users can see another\u2019s user versions.","title":"Versions"},{"location":"config/tables/sorting/#create-a-version","text":"To create a version, use the Save To > Create Version button in the upper right of the configuration panel.","title":"Create A Version"},{"location":"config/tables/sorting/#save-a-version","text":"Once created, users can save their current component\u2019s configuration to the version by clicking Save To > Versions and selecting the version. Once saved, click Apply to apply the configuration to the component.","title":"Save A Version"},{"location":"config/tables/sorting/#load-a-version","text":"To retrieve a previously saved version, click the Load From button in the upper left of the configuration panel and select the desired version. This will load that version\u2019s configuration into the panel. Click Apply to the apply that version\u2019s configuration to the component. [Save To Screenshot] [Load From Screenshot]","title":"Load A Version"},{"location":"config/tables/sorting/#delete-a-version","text":"To delete a version, click the three dots icon next to Save To > Delete Versions , and select the version to delete. Confirm the deletion in the prompt.","title":"Delete A Version"},{"location":"config/tables/sorting/#configuring-a-page","text":"The high-level steps to configuring a page are: Pick the role and page : If the configured page is applicable to a specific role, assume the role using the role selector. Then, navigate to the page where the configuration should apply. Configure each component on the page : Refer to the UI component documentation as necessary Save the configured state to a dashboard : The dashboard can either be an existing or new dashboard. If new, specify where and to which users the dashboard can be shown as a selection option. Set the priority of the dashboards by setting defaults : once the dashboard is saved, determine when it should be shown to a user in relative priority to other dashboards already configured for the page","title":"Configuring a Page"},{"location":"config/tables/sorting/#pick-the-role-and-page","text":"It\u2019s common for an application to present data on the same page differently to users with different roles. For example, a field engineer may want to see the battery level and firmeware version of a device, while a customer service rep may want to see its last known location. If the configuration is applicable to a specific role, assume the role by selecting it from the role selector. Access the role selector by clicking the username in upper right of the page and selecting the role under User Role . [Screenshot of role selector] Navigate to the page to where the configuration should be applied. For example, if the configuration is intended for the Assets page, navigate to the Assets page. If the configuration is meant to be applied to an existing dashboard, load the dashboard by selecting it from the dashboard selector at the top of the page. [Screenshot of the dashboard selector]","title":"Pick the Role and Page"},{"location":"config/tables/sorting/#configure-each-component-on-the-page","text":"Use the layout controller to place the desired components on the page. Refer to the documentation for the layout controller for more details. [Screenshot of layout controller on the UI] For each component, access the control panel and make the desired configuration changes. Click Apply in the configuration panel of that component once all the desired changes are performed. Refer to the document for the specific component for more details.","title":"Configure Each Component on the Page"},{"location":"config/tables/sorting/#save-the-configured-state-to-a-dashboard","text":"Once all configuration to all components have been completed, a user can save the entire state of the page to a dashboard. To save the configured state to the current dashboard, click the check mark icon next to the dashboard selector. To revert the changes back to its previously saved state, click the reverse circle icon. [Screenshot of save & revert of current dashboard] Note: The Default dashboard is a user\u2019s personal dashboard configuration for exact page location. Saving the configuration to the dashboard titled \u201cDefault\u201d will only apply the configuration as the default dashboard to the current user, for currently assumed role, and to exact path for which the configuration was performed. For example, if a user A is on the Company > Assets page as Role A and saves a new configuration to the Default dashboard at that page, it will affect only the Default dashboard for User A while they are using Role A on the Company > Assets page. It will not impact the Default dashboard for user B at Company > Assets using Role A, not impact Default dashboard for any users at Company > Assets using Role B, and not impact the Default dashboard of user A at other Asset paths (e.g. Location > Assets) using Role A. To save the configured state to a new dashboard, click the three-dot icon next to the dashboard selector and click Save Dashboard As\u2026 In the Save Dashboard As\u2026 popup, enter the name of the new dashboard Select the availability of the dashboard from the Available To dropdown: Role Level - Any on this page: The option to select this dashboard will appear for any users of role X on this exact page path, with role X being the currently assumed role of the user doing the configuration. For example, only show this dashboard for users with Role A and on the Assets page at the Company > Assets path. This will create an option in the dropdown under the \u201cRole\u201d section of the dashboard selector. Page Level - Any user on this page: The option to select this dashboard will appear for any user of any role on this exact page path. For example, show this dashboard for all users on the Assets page at the Company > Assets path. This will create an option in the dropdown under the \u201cPage\u201d section. Blueprint Level - Any user on the page showing this page's Blueprint type: The option to select this dashboard will appear for any user of any role on a page of the same Blueprint type as the one being configured. For example, show this dashboard for all users on all Asset pages, regardless of its specific path. This will create an option in the dropdown under the section named after the Blueprint type (e.g. Assets). Personal Blueprint Level - Me on any page showing this page's Blueprint type: The option to select this dashboard will appear for only the current user on any page of any role on a page of the same Blueprint type as the one being configured. This will create an option in the dropdown under the \u201cMine\u201d section. Looking for an option to save the configured page to the current user for the current role and current path? Save the dashboard to the Default dashboard by click the check mark next to the left of the dashboard selector?","title":"Save the Configured State to a Dashboard"},{"location":"config/tables/sorting/#set-the-defaults-of-the-page","text":"The previous section on Saving the Dashboard produces a dashboard that is available for selection by a user on a give page. It does not yet specify whether it will load by default when a user visits that page. In order to apply the dashboard to pages so that it loads for given users, page locations, and roles, set the dashboard defaults. Click the three dots icon next to the dashboard selector to load the list of editable dashboards Depending on how many dashboards you have configured and their availability on the page, you will see dashboards separated into the following categories based on availability criteria: Role - Dashboards that are available to show on this page based on the user\u2019s role Page - Dashboards that are available to show on this page based on the user\u2019s page path in the application [Name of Blueprint Type] (e.g. Assets) - Dashboards that are available to show on this page based on the type of blueprint that page is showing Mine - Personal dashboards that are available to show on this page based on the type of blueprint that page is showing To set a dashboard to show by default on the page when it meets the availability criteria, select the dashboard > Use as Default . Only one dashboard from each section can be set as default (e.g. only one Role-level dashboard can be set as default, one Page-level dashboard can be set as default, etc.) In the event that multiple dashboards across each section is set as default, the application shows the default dashboard based on this ranking (from highest to lowest): Mine Role Page Blueprint Default","title":"Set the Defaults Of The Page"},{"location":"config/tables/sorting/#managing-dashboards","text":"","title":"Managing Dashboards"},{"location":"config/tables/sorting/#renaming-a-dashboard","text":"To rename a dashboard, click the three dots icon next to the dashboard selector and select the [dashboard name] > Rename .","title":"Renaming A Dashboard"},{"location":"config/tables/sorting/#delete-a-dashboard","text":"To delete a dashboard, click the three dots icon next to the dashboard selector and select the dashboard name > Delete . If the deleted dashboard was displayed on the page, the page will switch to showing the Default dashboard.","title":"Delete a Dashboard"},{"location":"config/tables/sorting/#reset-personal-default-dashboard-back-to-stock","text":"If the Default dashboard has been changed and a user wishes to reset it back to its original state (e.g. \u201cfactory defaults\u201d), select the Default dashboard from the dashboard selector. Then click the three dots icon next to the dashboard selector > Reset to Default Dashboard .","title":"Reset Personal Default Dashboard Back to Stock"},{"location":"config/tables/sorting/#configuration-best-practices","text":"We\u2019re working on making a list of best practices, stay tuned!","title":"Configuration Best Practices"},{"location":"config/tables/table-viewer/","text":"Table Viewer \u00b6 The table viewer is a component which displays real-time data of devices, assets, or related blueprints in a table form. Accessing the Table Viewer Configuration \u00b6 To access the table configuration, click the gear icon in the upper right of the component and select Edit Settings. Configuring the Table Viewer \u00b6 Table viewer configuration panel The table view is organized by columns. The currently displayed columns are shown in the list on the left side of the panel. To add a column to the table, click Add > [new column] . To reorder the columns, click and drag the column you wish to reorder into the desired location in the list. Column Configuration \u00b6 Column Name : To edit the display name of the column, change the Column Name field Column Width : To set the default width of the column, change the Column Width field Column Min and Max Width : To set the minimum and maximum allowable width of the column, set the Min Width and Max Width fields Header Configuration \u00b6 Header Color : To set the color of the column Header text, click the 3-dot button and select Color . Specify a color in the field that appears. To set the color back to the default color, click the 3 dot bottom and select None . Header Font : To set the header\u2019s font family, size, weight, and style, change the appropriate fields in the Header Font section Header Justify/Align : To set the header text justification and alignment, change the Justify and Align fields Header Allow Text Wrap : To allow the text of the header to wrap, check the box next to Allow Text Wrap . To prevent the header text from wrapping (it will get truncated instead), clear the checkbox. Header Background : To set the color of the header background text, specify a color in the Background field. Note: This only changes the color behind the text, it does not change the color of the header cell. Cell Configuration \u00b6 The Cell configuration section refers to text in the main body of the table. Cell Empty Value : To set the value that appears if the cell contents are empty, specify the value in the Empty Value field. Common options are double dashes ( -- ) or blank. Cell Color : To set the color of the cell text, click the 3-dot button and select Color . Specify a color in the field that appears. To set the color back to the default color, click the 3 dot bottom and select None . Cell Font : To set the cell\u2019s font family, size, weight, and style, change the appropriate fields in the Cell Font section Cell Justify/Align : To set the cell text justification and alignment, change the Justify and Align fields Cell Allow Text Wrap : To allow the text of the cell to wrap, check the box next to Allow Text Wrap . To prevent the cell text from wrapping (it will get truncated instead), clear the checkbox. Cell Background : To set the color of the cell background text, specify a color in the Background field. Note: This only changes the color behind the text, it does not change the color of the entire cell. Allowing fields to be editable \u00b6 To enable fields in the table to be editable by user input, click the gear icon in the upper right of the component and select Editable . In addition, the fields must be set to Source = User in Architect. This will make the following types of fields editable on the table by creating dropdowns: Attributes that represent parent blueprints (e.g. the Company of an Asset). These fields must be populated using parent setters in Architect. See the documentation on setters for more information. Attributes that are associated in a one-to-one relationship with the blueprints of the current page. For example, if assets and trackers are paired one-to-one, the Tracker field on the Assets table can be made editable, which will expose a dropdown listing all trackers for pairing Fields using enum types (e.g. a discrete set of possible values)","title":"Table Viewer"},{"location":"config/tables/table-viewer/#table-viewer","text":"The table viewer is a component which displays real-time data of devices, assets, or related blueprints in a table form.","title":"Table Viewer"},{"location":"config/tables/table-viewer/#accessing-the-table-viewer-configuration","text":"To access the table configuration, click the gear icon in the upper right of the component and select Edit Settings.","title":"Accessing the Table Viewer Configuration"},{"location":"config/tables/table-viewer/#configuring-the-table-viewer","text":"Table viewer configuration panel The table view is organized by columns. The currently displayed columns are shown in the list on the left side of the panel. To add a column to the table, click Add > [new column] . To reorder the columns, click and drag the column you wish to reorder into the desired location in the list.","title":"Configuring the Table Viewer"},{"location":"config/tables/table-viewer/#column-configuration","text":"Column Name : To edit the display name of the column, change the Column Name field Column Width : To set the default width of the column, change the Column Width field Column Min and Max Width : To set the minimum and maximum allowable width of the column, set the Min Width and Max Width fields","title":"Column Configuration"},{"location":"config/tables/table-viewer/#header-configuration","text":"Header Color : To set the color of the column Header text, click the 3-dot button and select Color . Specify a color in the field that appears. To set the color back to the default color, click the 3 dot bottom and select None . Header Font : To set the header\u2019s font family, size, weight, and style, change the appropriate fields in the Header Font section Header Justify/Align : To set the header text justification and alignment, change the Justify and Align fields Header Allow Text Wrap : To allow the text of the header to wrap, check the box next to Allow Text Wrap . To prevent the header text from wrapping (it will get truncated instead), clear the checkbox. Header Background : To set the color of the header background text, specify a color in the Background field. Note: This only changes the color behind the text, it does not change the color of the header cell.","title":"Header Configuration"},{"location":"config/tables/table-viewer/#cell-configuration","text":"The Cell configuration section refers to text in the main body of the table. Cell Empty Value : To set the value that appears if the cell contents are empty, specify the value in the Empty Value field. Common options are double dashes ( -- ) or blank. Cell Color : To set the color of the cell text, click the 3-dot button and select Color . Specify a color in the field that appears. To set the color back to the default color, click the 3 dot bottom and select None . Cell Font : To set the cell\u2019s font family, size, weight, and style, change the appropriate fields in the Cell Font section Cell Justify/Align : To set the cell text justification and alignment, change the Justify and Align fields Cell Allow Text Wrap : To allow the text of the cell to wrap, check the box next to Allow Text Wrap . To prevent the cell text from wrapping (it will get truncated instead), clear the checkbox. Cell Background : To set the color of the cell background text, specify a color in the Background field. Note: This only changes the color behind the text, it does not change the color of the entire cell.","title":"Cell Configuration"},{"location":"config/tables/table-viewer/#allowing-fields-to-be-editable","text":"To enable fields in the table to be editable by user input, click the gear icon in the upper right of the component and select Editable . In addition, the fields must be set to Source = User in Architect. This will make the following types of fields editable on the table by creating dropdowns: Attributes that represent parent blueprints (e.g. the Company of an Asset). These fields must be populated using parent setters in Architect. See the documentation on setters for more information. Attributes that are associated in a one-to-one relationship with the blueprints of the current page. For example, if assets and trackers are paired one-to-one, the Tracker field on the Assets table can be made editable, which will expose a dropdown listing all trackers for pairing Fields using enum types (e.g. a discrete set of possible values)","title":"Allowing fields to be editable"},{"location":"features/","text":"Features \u00b6 The Leverege IoT Stack offers a full suite of out-of-the-box features that are available for use throughout its applications.","title":"Features"},{"location":"features/#features","text":"The Leverege IoT Stack offers a full suite of out-of-the-box features that are available for use throughout its applications.","title":"Features"},{"location":"features/account/authentication/","text":"Two-Step Verification \u00b6 Enabling Two-Step Verification in Your Architect Project \u00b6 Two-step Verification offers enhanced security to users by requiring two distinct factors of Verification in order to gain access to their account. Two-Step Verification is automatically enabled on all projects by default, but you will need to add the email and SMS templates in order for the feature to work. Create Your Two-Step Verification Email & SMS Template \u00b6 Start by going to Templates in Architect and create a blank template. You can use whatever display name you would like for this template, but the alias must be twoFactorCode . Template Alias Input Field For the email template, you can change the text, images, and styling to whatever you would like, but please note that you will have to use {{code}} wherever you want the Verification code to appear. You can even add it to the subject line of the email. Email Example \u00b6 <div s t yle= \"font-family:Inter, sans-serif; max-width:600px; min-width:200px; background-color: #181e25; margin: 0 auto;\" > <div s t yle= \"background-color:white; padding: 32px 32px 32px 32px; text-align: left;\" > <img wid t h= \"140\" heigh t = \"30\" s t yle= \"margin: 24px 0px;\" src= \"https://molten-ui-assets.storage.googleapis.com/leverege-logo.png\" > <hr class= \"solid\" s t yle= \"border: 1px solid #e7eaef\" > <div s t yle= \"text-align:left; font-size:20px; line-height:28px; font-weight: bold; margin: 24px 0px;\" > Sig n I n </div> <div s t yle= \"text-align:left; font-size:16px; line-height:26px; margin: 24px 0px;\" > Your t wo - s te p veri f ica t io n code is below. E nter t he code i n your ope n browser wi n dow a n d we'll help you ge t sig ne d i n . This code expires i n 5 mi nutes . </div> <div s t yle= \"font-weight: bold; overflow:auto; background-color: #f0f6ff; padding: 15px; border-radius: 5px; text-align: center;\" > <spa n s t yle= \"color:black; padding:10px 20px; border-radius:5px; font-size: 24px;\" > {{ code }} </spa n > </div> <div s t yle= \"text-align:left; font-size:16px; line-height:26px; margin: 24px 0px;\" > I f you did n ' t reques t t his email , t here's n o t hi n g t o worry abou t - you ca n sa fel y ig n ore i t . </div> </div> <div s t yle= \"background-color:#e7eaef; padding: 11px;\" > <div s t yle= \"text-align:center; font-size:12px; line-height:18px;\" > Copyrigh t Leverege , LLC. All Righ ts Reserved. </div> </div> </div> SMS Example \u00b6 SMS Example {{ code }} is your securi t y code f or Leverege. I f you did n o t reques t t his code , you ca n sa fel y ig n ore t his message. Enabling Two-Step Verification As a User \u00b6 Two-Step Verification is optional for users. Therefore, users have to go into their Account Settings, under Security, to enable the feature and start using Two-Step Verification. Security Settings in User Account Settings \u00b6 Users have the option to enable email, SMS, and/or an authenticator app (such as the Google Authenticator App) to use as their second factor of Verification. Users can update or disable Two-Step Verification at any time. Email & Phone Number If a user enables email or SMS as their second factor of Verification, they will be asked to provide the email or phone number they wish to use for that Verification method. The email and phone number are NOT synced or linked to their contact email and phone number. Once a user enables their first method of Two-Step Verification, they will be given a list of Backup Codes that can be used in the event that they are locked out of their Two-Step Verification method (e.g. their phone is dead or their email has been compromised and they no longer have access to it). Using Two-Step Verification with One-Time Access Codes \u00b6 If your project also has One-Time Access Codes enabled, users have the option to use a code sent via email or SMS to log into their account instead of providing a password. If a user has Two-Step Verification enabled, they will still need to provide an additional, distinct factor of Verification when logging in. Let\u2019s look at a specific edge case to illustrate this point. Let\u2019s say that we have a user who has Two-Step Verification enabled, but their only method of Verification is email. If the users attempts to use email to receive their One-Time Access Code, they will receive an email with an error message instead of their One-Time Access Code: This is because they are attempting to use email as both factors of Verification, but our system requires that the two factors be distinct. It is therefore recommended that users have at least two methods of Two-Step Verification enabled if they are going to also use One-Time Access Codes. In the even that this does happen to a user, they can simply return to the login screen and use or reset their password to login or select a different method for their One-Time Access Code. This error email also needs to be configured as a template in your project. To enable it, start by going to Templates in Architect and create a blank template. You can use whatever display name you would like for this template, but the alias must be loginCodeError . Below are examples of the email and SMS HTML that you\u2019ll want to you\u2019ll want to use in your template. Email Example: <div s t yle= \"font-family:Inter, sans-serif; max-width:600px; min-width:200px; background-color: #181e25; margin: 0 auto;\" > <div s t yle= \"background-color:white; padding: 32px 32px 32px 32px; text-align: left;\" > <img wid t h= \"140\" heigh t = \"30\" s t yle= \"margin: 24px 0px;\" src= \"https://molten-ui-assets.storage.googleapis.com/leverege-logo.png\" > <hr class= \"solid\" s t yle= \"border: 1px solid #e7eaef\" > <div s t yle= \"text-align:left; font-size:20px; line-height:28px; font-weight: bold; margin: 24px 0px;\" > Error : Access Code No t Available </div> <div s t yle= \"text-align:left; font-size:16px; line-height:26px; margin: 24px 0px;\" > You have e na bled t wo - s te p veri f ica t io n wi t h t his email. O ne - Time access codes are n o t available usi n g t he same me t hod as t wo - s te p veri f ica t io n . <br><br>Please choose a n o t her o ne - t ime access code me t hod or sig n wi t h your crede nt ials. </div> </div> <div s t yle= \"background-color:#e7eaef; padding: 11px;\" > <div s t yle= \"text-align:center; font-size:12px; line-height:18px;\" > Copyrigh t Leverege , LLC. All Righ ts Reserved. </div> </div> </div> SMS Example: You have e na bled t wo - s te p veri f ica t io n wi t h t his pho ne nu mber. O ne - Time access codes are n o t available usi n g t he same me t hod as t wo - s te p veri f ica t io n . Please choose a n o t her o ne - t ime access code me t hod or sig n wi t h your crede nt ials.","title":"Two-Step Verification"},{"location":"features/account/authentication/#two-step-verification","text":"","title":"Two-Step Verification"},{"location":"features/account/authentication/#enabling-two-step-verification-in-your-architect-project","text":"Two-step Verification offers enhanced security to users by requiring two distinct factors of Verification in order to gain access to their account. Two-Step Verification is automatically enabled on all projects by default, but you will need to add the email and SMS templates in order for the feature to work.","title":"Enabling Two-Step Verification in Your Architect Project"},{"location":"features/account/authentication/#create-your-two-step-verification-email-sms-template","text":"Start by going to Templates in Architect and create a blank template. You can use whatever display name you would like for this template, but the alias must be twoFactorCode . Template Alias Input Field For the email template, you can change the text, images, and styling to whatever you would like, but please note that you will have to use {{code}} wherever you want the Verification code to appear. You can even add it to the subject line of the email.","title":"Create Your Two-Step Verification Email &amp; SMS Template"},{"location":"features/account/authentication/#email-example","text":"<div s t yle= \"font-family:Inter, sans-serif; max-width:600px; min-width:200px; background-color: #181e25; margin: 0 auto;\" > <div s t yle= \"background-color:white; padding: 32px 32px 32px 32px; text-align: left;\" > <img wid t h= \"140\" heigh t = \"30\" s t yle= \"margin: 24px 0px;\" src= \"https://molten-ui-assets.storage.googleapis.com/leverege-logo.png\" > <hr class= \"solid\" s t yle= \"border: 1px solid #e7eaef\" > <div s t yle= \"text-align:left; font-size:20px; line-height:28px; font-weight: bold; margin: 24px 0px;\" > Sig n I n </div> <div s t yle= \"text-align:left; font-size:16px; line-height:26px; margin: 24px 0px;\" > Your t wo - s te p veri f ica t io n code is below. E nter t he code i n your ope n browser wi n dow a n d we'll help you ge t sig ne d i n . This code expires i n 5 mi nutes . </div> <div s t yle= \"font-weight: bold; overflow:auto; background-color: #f0f6ff; padding: 15px; border-radius: 5px; text-align: center;\" > <spa n s t yle= \"color:black; padding:10px 20px; border-radius:5px; font-size: 24px;\" > {{ code }} </spa n > </div> <div s t yle= \"text-align:left; font-size:16px; line-height:26px; margin: 24px 0px;\" > I f you did n ' t reques t t his email , t here's n o t hi n g t o worry abou t - you ca n sa fel y ig n ore i t . </div> </div> <div s t yle= \"background-color:#e7eaef; padding: 11px;\" > <div s t yle= \"text-align:center; font-size:12px; line-height:18px;\" > Copyrigh t Leverege , LLC. All Righ ts Reserved. </div> </div> </div>","title":"Email Example"},{"location":"features/account/authentication/#sms-example","text":"SMS Example {{ code }} is your securi t y code f or Leverege. I f you did n o t reques t t his code , you ca n sa fel y ig n ore t his message.","title":"SMS Example"},{"location":"features/account/authentication/#enabling-two-step-verification-as-a-user","text":"Two-Step Verification is optional for users. Therefore, users have to go into their Account Settings, under Security, to enable the feature and start using Two-Step Verification.","title":"Enabling Two-Step Verification As a User"},{"location":"features/account/authentication/#security-settings-in-user-account-settings","text":"Users have the option to enable email, SMS, and/or an authenticator app (such as the Google Authenticator App) to use as their second factor of Verification. Users can update or disable Two-Step Verification at any time. Email & Phone Number If a user enables email or SMS as their second factor of Verification, they will be asked to provide the email or phone number they wish to use for that Verification method. The email and phone number are NOT synced or linked to their contact email and phone number. Once a user enables their first method of Two-Step Verification, they will be given a list of Backup Codes that can be used in the event that they are locked out of their Two-Step Verification method (e.g. their phone is dead or their email has been compromised and they no longer have access to it).","title":"Security Settings in User Account Settings"},{"location":"features/account/authentication/#using-two-step-verification-with-one-time-access-codes","text":"If your project also has One-Time Access Codes enabled, users have the option to use a code sent via email or SMS to log into their account instead of providing a password. If a user has Two-Step Verification enabled, they will still need to provide an additional, distinct factor of Verification when logging in. Let\u2019s look at a specific edge case to illustrate this point. Let\u2019s say that we have a user who has Two-Step Verification enabled, but their only method of Verification is email. If the users attempts to use email to receive their One-Time Access Code, they will receive an email with an error message instead of their One-Time Access Code: This is because they are attempting to use email as both factors of Verification, but our system requires that the two factors be distinct. It is therefore recommended that users have at least two methods of Two-Step Verification enabled if they are going to also use One-Time Access Codes. In the even that this does happen to a user, they can simply return to the login screen and use or reset their password to login or select a different method for their One-Time Access Code. This error email also needs to be configured as a template in your project. To enable it, start by going to Templates in Architect and create a blank template. You can use whatever display name you would like for this template, but the alias must be loginCodeError . Below are examples of the email and SMS HTML that you\u2019ll want to you\u2019ll want to use in your template. Email Example: <div s t yle= \"font-family:Inter, sans-serif; max-width:600px; min-width:200px; background-color: #181e25; margin: 0 auto;\" > <div s t yle= \"background-color:white; padding: 32px 32px 32px 32px; text-align: left;\" > <img wid t h= \"140\" heigh t = \"30\" s t yle= \"margin: 24px 0px;\" src= \"https://molten-ui-assets.storage.googleapis.com/leverege-logo.png\" > <hr class= \"solid\" s t yle= \"border: 1px solid #e7eaef\" > <div s t yle= \"text-align:left; font-size:20px; line-height:28px; font-weight: bold; margin: 24px 0px;\" > Error : Access Code No t Available </div> <div s t yle= \"text-align:left; font-size:16px; line-height:26px; margin: 24px 0px;\" > You have e na bled t wo - s te p veri f ica t io n wi t h t his email. O ne - Time access codes are n o t available usi n g t he same me t hod as t wo - s te p veri f ica t io n . <br><br>Please choose a n o t her o ne - t ime access code me t hod or sig n wi t h your crede nt ials. </div> </div> <div s t yle= \"background-color:#e7eaef; padding: 11px;\" > <div s t yle= \"text-align:center; font-size:12px; line-height:18px;\" > Copyrigh t Leverege , LLC. All Righ ts Reserved. </div> </div> </div> SMS Example: You have e na bled t wo - s te p veri f ica t io n wi t h t his pho ne nu mber. O ne - Time access codes are n o t available usi n g t he same me t hod as t wo - s te p veri f ica t io n . Please choose a n o t her o ne - t ime access code me t hod or sig n wi t h your crede nt ials.","title":"Using Two-Step Verification with One-Time Access Codes"},{"location":"features/account/roles/","text":"Multi-Role Management \u00b6 \u200b Users can be assigned one or more roles in a project. Each role may contain a different set of views, visible data fields, and actions. It's common for users to switch between roles in order to perform their desired task. It's also common for administrator-type users to have multiple roles because to assign a role to a new or current user, the administrator must already have that role themselves. \u200b Creating Roles and Managing Users For information on how to create users, see the documentation on Roles and Permissions. For information on how to assign roles to and manage users, see the documenetation on User Management. \u200b Switching Between Roles \u00b6 \u200b To switch between assigned roles in an application: \u200b Click the username in the upper right corner to access the role selector A dropdown should appear which contains the list of available roles under User Role Select a the desired role and the UI will reload the view according the newly selected role \u200b Switching among assigned roles \u200b Actions for users with multiple roles If a user has multiple roles with varying degrees of action permissions, they will still be able to perform actions of their highest privilege role when the lowest-privileged role is selected. For example, if a user has an Editor role that can edit assets and Viewer role that can only view assets, they would still be able to edit assets while they have Viewer role selected. Ordering the Roles in the Role Selector \u00b6 \u200b To define the order of roles presented in the role selector dropdown, use the priority property in the metadata of a role. The priority property is an integer to represent the rank, with 0 being the highest priority. \u200b To order the roles in the role selector: \u200b In Architect, navigate to Permissions > Roles Select a role and edit the metadata by clicking the Edit button in the Metadata section (see screenshot below for reference) Add the priority property in top level of the metadata. There may be other properties in the metadata already: { \"ui\" :{ ... }, ... \"usedAtBlueprints\" : ... ... \"priority\" : 0 ... } Click OK to close the Metadata popup Click Save in the role panel on the right to save the metadata to the role Repeat the steps for all remaining roles on the project \u200b The roles will be ordered top to bottom from highest priority (smallest number) to lowest priority (largest number). \u200b Editing role metadata","title":"Multi-Role Management"},{"location":"features/account/roles/#multi-role-management","text":"\u200b Users can be assigned one or more roles in a project. Each role may contain a different set of views, visible data fields, and actions. It's common for users to switch between roles in order to perform their desired task. It's also common for administrator-type users to have multiple roles because to assign a role to a new or current user, the administrator must already have that role themselves. \u200b Creating Roles and Managing Users For information on how to create users, see the documentation on Roles and Permissions. For information on how to assign roles to and manage users, see the documenetation on User Management. \u200b","title":"Multi-Role Management"},{"location":"features/account/roles/#switching-between-roles","text":"\u200b To switch between assigned roles in an application: \u200b Click the username in the upper right corner to access the role selector A dropdown should appear which contains the list of available roles under User Role Select a the desired role and the UI will reload the view according the newly selected role \u200b Switching among assigned roles \u200b Actions for users with multiple roles If a user has multiple roles with varying degrees of action permissions, they will still be able to perform actions of their highest privilege role when the lowest-privileged role is selected. For example, if a user has an Editor role that can edit assets and Viewer role that can only view assets, they would still be able to edit assets while they have Viewer role selected.","title":"Switching Between Roles"},{"location":"features/account/roles/#ordering-the-roles-in-the-role-selector","text":"\u200b To define the order of roles presented in the role selector dropdown, use the priority property in the metadata of a role. The priority property is an integer to represent the rank, with 0 being the highest priority. \u200b To order the roles in the role selector: \u200b In Architect, navigate to Permissions > Roles Select a role and edit the metadata by clicking the Edit button in the Metadata section (see screenshot below for reference) Add the priority property in top level of the metadata. There may be other properties in the metadata already: { \"ui\" :{ ... }, ... \"usedAtBlueprints\" : ... ... \"priority\" : 0 ... } Click OK to close the Metadata popup Click Save in the role panel on the right to save the metadata to the role Repeat the steps for all remaining roles on the project \u200b The roles will be ordered top to bottom from highest priority (smallest number) to lowest priority (largest number). \u200b Editing role metadata","title":"Ordering the Roles in the Role Selector"},{"location":"features/account/signincode/","text":"One-Time Access Code \u00b6 The one-time access code feature is enabled or disabled at the project level. If the feature is enabled, any user registered in our system can request a one-time access code via the email address associated with their account. The code can be sent via email or text, as long as the user has a phone number tied to their account. The one-time access code button can be found on the login screen (image below). Login Screen An example of the email is below. If you want to customize your email, review our email configuration & styling help guide. Access Code Email","title":"One-Time Access Code"},{"location":"features/account/signincode/#one-time-access-code","text":"The one-time access code feature is enabled or disabled at the project level. If the feature is enabled, any user registered in our system can request a one-time access code via the email address associated with their account. The code can be sent via email or text, as long as the user has a phone number tied to their account. The one-time access code button can be found on the login screen (image below). Login Screen An example of the email is below. If you want to customize your email, review our email configuration & styling help guide. Access Code Email","title":"One-Time Access Code"},{"location":"features/charts/","text":"Charts & Graphs \u00b6","title":"Charts & Graphs"},{"location":"features/charts/#charts-graphs","text":"","title":"Charts &amp; Graphs"},{"location":"features/create/","text":"Create & Edit Actions \u00b6 A powerful and handy feature of the Leverege IoT Stack is the ability to create and edit every type of object in the system, both individually and in bulk. Users, especially those with admin roles, will often need to upload objects like assets or devices into the application. Once they create the object, they may also want the ability to edit the object, remove the object from a specific level of the application, or remove the object from the application altogether. Below are the 5 actions you can perform on an object: Create : create an individual object and add the various fields that define the object Bulk Create : bulk create objects by uploading a CSV to the application Edit : edit the data fields to ensure the object information is up to date Remove : remove the object from a specific level of the application Delete : delete the object from the entire application Create \u00b6 The create action is an out-of-the-box feature for any blueprint type. To create an object, like an asset: Click the three-dot icon and select + Create [Blueprint Name] A form will appear where you can fill out the different fields that define the object Populate the fields of the form and click Create . The newly created object of the Blueprint type should appear in the table (if one is shown) Example of a create action Configuring a Create Form \u00b6 For fields to appear on the form, their attribute must have a Source = User in Architect Example of an attribute with a Source = User To sort the order of fields on the form: Apply the tag formSort:[x.y] in Architect on each attribute of the form Forms will be sorted in alphanumeric order using the x.y field (e.g. a.1 will appear before a.2 , and a.2 will appear before b.1 ). Below is an example of adding the formSort:a.1 tag on the assetId attribute to specify that the Asset ID field should appear as the first field on the form. The formSort:required field can also be applied to make that field required upon creation. Then a formSort:a.2 tag is applied on the type attribute to specify that it should appear second in the form. formSort tags applied to Asset ID and Type attributes Create form sorted by Asset ID then Type Tip You can create an object at the root level of the application, or you can create an object on a specific page. For example, if you create an asset within a particular company, the asset will be created and associated with the company. On the other hand, if you create an asset at the root level, it will be created, but it will not be associated with any company. Bulk Create \u00b6 The Leverege IoT Stack offers users the ability to bulk create objects through a CSV upload mechanism. When using bulk create, users populate a template that defines the main identifers and supporting data fields of each object to create. To enable the bulk create action for objects of a given blueprint type, apply the bulkCreate:true tag to the desired blueprint. Then, to bulk create objects: Navigate to the page where the objects should be created and click the three-dots action menu and select Bulk Create [Blueprint Name] In the Bulk Create [Blueprint Name] popup, click the Bulk Create CSV Template button to download the CSV template Open the template in your desired spreadsheet editor. The CSV contains all the required data fields that appear in the same form for creating individual assets Enter all the object data fields into the template and save the file to your computer Return to the Bulk Create [Blueprint Name] popup and click Choose File to upload the file to the application Wait a few seconds for the objects to create Confirm the results in the following prompt. The results should show the objects that were successfully created. In addition the results show a record of objects that did not successfully create, with an option to download the failures for further investigation Close the confirmation prompt to return to the application. The created objects now appear in the table Example of bulk create screen Edit \u00b6 To edit the data fields of an existing object: Select the checkbox next to the object Clicking the three-dots actions drop-down menu and select Edit [Blueprint Name] to open the Edit [Blueprint Name] popup Modify the popup as desired and click Save Changes to complete the changes Remove \u00b6 If you previously added an object to another object that contain it, you have the ability to remove that object from its containing object. For example, if you added a device to a location, you have the ability to remove the device from the location. Remove vs. Delete Note that the Remove action only severs the relationship between the two objects, it does not delete the object entirely from the system (for that, see the next section on Delete). To remove an object: Check the box next to the object and click the three-dots drop-down menu and select the action Remove [Blueprint Name] from [Containing Blueprint Name] . This will unassign the object from the containing object with which it was associated. Delete \u00b6 You can also delete an item from the application entirely. To delete an object: Select the checkbox next to the object, click the three-dots action menu, and select Delete Confirm the deletion in the following prompt Deleting an object at any level will delete that asset from the application and disassociate it from all its relationships with other objects.","title":"Create & Edit Actions"},{"location":"features/create/#create-edit-actions","text":"A powerful and handy feature of the Leverege IoT Stack is the ability to create and edit every type of object in the system, both individually and in bulk. Users, especially those with admin roles, will often need to upload objects like assets or devices into the application. Once they create the object, they may also want the ability to edit the object, remove the object from a specific level of the application, or remove the object from the application altogether. Below are the 5 actions you can perform on an object: Create : create an individual object and add the various fields that define the object Bulk Create : bulk create objects by uploading a CSV to the application Edit : edit the data fields to ensure the object information is up to date Remove : remove the object from a specific level of the application Delete : delete the object from the entire application","title":"Create &amp; Edit Actions"},{"location":"features/create/#create","text":"The create action is an out-of-the-box feature for any blueprint type. To create an object, like an asset: Click the three-dot icon and select + Create [Blueprint Name] A form will appear where you can fill out the different fields that define the object Populate the fields of the form and click Create . The newly created object of the Blueprint type should appear in the table (if one is shown) Example of a create action","title":"Create"},{"location":"features/create/#configuring-a-create-form","text":"For fields to appear on the form, their attribute must have a Source = User in Architect Example of an attribute with a Source = User To sort the order of fields on the form: Apply the tag formSort:[x.y] in Architect on each attribute of the form Forms will be sorted in alphanumeric order using the x.y field (e.g. a.1 will appear before a.2 , and a.2 will appear before b.1 ). Below is an example of adding the formSort:a.1 tag on the assetId attribute to specify that the Asset ID field should appear as the first field on the form. The formSort:required field can also be applied to make that field required upon creation. Then a formSort:a.2 tag is applied on the type attribute to specify that it should appear second in the form. formSort tags applied to Asset ID and Type attributes Create form sorted by Asset ID then Type Tip You can create an object at the root level of the application, or you can create an object on a specific page. For example, if you create an asset within a particular company, the asset will be created and associated with the company. On the other hand, if you create an asset at the root level, it will be created, but it will not be associated with any company.","title":"Configuring a Create Form"},{"location":"features/create/#bulk-create","text":"The Leverege IoT Stack offers users the ability to bulk create objects through a CSV upload mechanism. When using bulk create, users populate a template that defines the main identifers and supporting data fields of each object to create. To enable the bulk create action for objects of a given blueprint type, apply the bulkCreate:true tag to the desired blueprint. Then, to bulk create objects: Navigate to the page where the objects should be created and click the three-dots action menu and select Bulk Create [Blueprint Name] In the Bulk Create [Blueprint Name] popup, click the Bulk Create CSV Template button to download the CSV template Open the template in your desired spreadsheet editor. The CSV contains all the required data fields that appear in the same form for creating individual assets Enter all the object data fields into the template and save the file to your computer Return to the Bulk Create [Blueprint Name] popup and click Choose File to upload the file to the application Wait a few seconds for the objects to create Confirm the results in the following prompt. The results should show the objects that were successfully created. In addition the results show a record of objects that did not successfully create, with an option to download the failures for further investigation Close the confirmation prompt to return to the application. The created objects now appear in the table Example of bulk create screen","title":"Bulk Create"},{"location":"features/create/#edit","text":"To edit the data fields of an existing object: Select the checkbox next to the object Clicking the three-dots actions drop-down menu and select Edit [Blueprint Name] to open the Edit [Blueprint Name] popup Modify the popup as desired and click Save Changes to complete the changes","title":"Edit"},{"location":"features/create/#remove","text":"If you previously added an object to another object that contain it, you have the ability to remove that object from its containing object. For example, if you added a device to a location, you have the ability to remove the device from the location. Remove vs. Delete Note that the Remove action only severs the relationship between the two objects, it does not delete the object entirely from the system (for that, see the next section on Delete). To remove an object: Check the box next to the object and click the three-dots drop-down menu and select the action Remove [Blueprint Name] from [Containing Blueprint Name] . This will unassign the object from the containing object with which it was associated.","title":"Remove"},{"location":"features/create/#delete","text":"You can also delete an item from the application entirely. To delete an object: Select the checkbox next to the object, click the three-dots action menu, and select Delete Confirm the deletion in the following prompt Deleting an object at any level will delete that asset from the application and disassociate it from all its relationships with other objects.","title":"Delete"},{"location":"features/fota/","text":"Introduction to FOTA \u00b6 Firmware Component: A firmware component is a software program for a specific processor inside the hardware. Your hardware will generally have 2 or more components. Some common components are below. MCU: Main Processor Logic BLE: Bluetooth/Wifi Logic Firmware Application: A firmware application contains programs for all three components. Each component is versioned. The firmware application is also versioned. This concept is similar to the iOS version running on your iPhone. Device Type: The device type is the model of the hardware.Firmware applications are specific to a single device type, as one may have components that another device type does not. This concept is similar to an iPhone 4 vs an iPhone 5. Device Group: A device group is a subset of devices at a given blueprint (i.e. location) with the same device type. How Does It Work? \u00b6 The FOTA server manages the firmware upgrades of the hardware in the system. Every heartbeat, the device will check whether there is a firmware application upgrade available via the FOTA server. From there, if a firmware application update is available, the FOTA server attempts to upgrade the device to the latest firmware application version. The FOTA server will only attempt to upgrade one component at a time. Note that firmware application upgrade paths only allow for one component to be different between applications. If successful, it updates the firmware application. If unsuccessful, the device can attempt to upgrade again. The amount of times the device retries is configurable per device type and the default is 3. If the device reaches the maximum amount of retries and has still not upgraded, the upgrade is stopped and marked as failed. Note that the maximum amount of retries applies to a single firmware application upgrade. If the device has to upgrade through multiple versions, each one will have a limit of retries equivalent to the configured amount per device type. The steps the FOTA server takes to check if the device should upgrade to a new firmware application are the following. If any of the below checks evaluate to false, the FOTA server does not upgrade the device: Is there an active release? Is the device\u2019s firmware already up to date? Has the device exceeded the maximum amount of retries? If upgrading outside of business hours is enabled, is the current time outside of business hours? If limiting concurrent upgrades is enabled, is there an open seat for this device? If stale device removal is enabled, are any of the devices currently upgrading \u201cstale\u201d? If so, this device will replace the stale device If the upgrade is set to a percentage of devices <100%, has this upgrade already been applied to the set percentage? Is there an upgrade path for this device to get from it\u2019s current firmware application version to the one set in the release?","title":"Introduction to FOTA"},{"location":"features/fota/#introduction-to-fota","text":"Firmware Component: A firmware component is a software program for a specific processor inside the hardware. Your hardware will generally have 2 or more components. Some common components are below. MCU: Main Processor Logic BLE: Bluetooth/Wifi Logic Firmware Application: A firmware application contains programs for all three components. Each component is versioned. The firmware application is also versioned. This concept is similar to the iOS version running on your iPhone. Device Type: The device type is the model of the hardware.Firmware applications are specific to a single device type, as one may have components that another device type does not. This concept is similar to an iPhone 4 vs an iPhone 5. Device Group: A device group is a subset of devices at a given blueprint (i.e. location) with the same device type.","title":"Introduction to FOTA"},{"location":"features/fota/#how-does-it-work","text":"The FOTA server manages the firmware upgrades of the hardware in the system. Every heartbeat, the device will check whether there is a firmware application upgrade available via the FOTA server. From there, if a firmware application update is available, the FOTA server attempts to upgrade the device to the latest firmware application version. The FOTA server will only attempt to upgrade one component at a time. Note that firmware application upgrade paths only allow for one component to be different between applications. If successful, it updates the firmware application. If unsuccessful, the device can attempt to upgrade again. The amount of times the device retries is configurable per device type and the default is 3. If the device reaches the maximum amount of retries and has still not upgraded, the upgrade is stopped and marked as failed. Note that the maximum amount of retries applies to a single firmware application upgrade. If the device has to upgrade through multiple versions, each one will have a limit of retries equivalent to the configured amount per device type. The steps the FOTA server takes to check if the device should upgrade to a new firmware application are the following. If any of the below checks evaluate to false, the FOTA server does not upgrade the device: Is there an active release? Is the device\u2019s firmware already up to date? Has the device exceeded the maximum amount of retries? If upgrading outside of business hours is enabled, is the current time outside of business hours? If limiting concurrent upgrades is enabled, is there an open seat for this device? If stale device removal is enabled, are any of the devices currently upgrading \u201cstale\u201d? If so, this device will replace the stale device If the upgrade is set to a percentage of devices <100%, has this upgrade already been applied to the set percentage? Is there an upgrade path for this device to get from it\u2019s current firmware application version to the one set in the release?","title":"How Does It Work?"},{"location":"features/fota/application/","text":"Firmware Application & Component Management \u00b6 Creating Firmware Component Versions \u00b6 Each firmware component has its own set of data fields that are required to create a new firmware component version. An example of the types of data each component has are below. Firmware Component Data Fields Device Type Type (MCU, BLE, etc) Semantic Version Component Specific Data Fields Creating Firmware Application Versions \u00b6 To create a new version of the firmware application, the user defines the following information Firmware Application Data Fields Device Type Semantic Version Components BLE Component Version MCU Component Version etc Dependency (Upgrade Path) Dependency (Upgrade Path) \u00b6 Every firmware application version has a dependency entry field that is filled out when the firmware application version is created. This field tells the system what the upgrade path for this specific application version is. Real examples of what this looks like are below. Example 1 \u00b6 Firmware Application Version 0.2.0 Dependency: >= 0.1.0 The above example is saying that to upgrade to version 0.2.0, the version currently running on the hardware must be greater than or equal to version 0.1.0. Example 2 \u00b6 Firmware Application Version 0.8.0 Dependency: >=0.3.0 < 0.6.0 || >=0.7.0 The above example is saying that to upgrade to version 0.8.0, the version currently running on the hardware must be (1) greater than or equal to version 0.3.0 and less than version 0.6.0 or (2) greater than or equal to version 0.7.0. Upgrade Path Requirements \u00b6 In order to move devices between applications, there are some limitations, outlined below. There can only be one component type difference between consecutive applications a device can upgrade through. This serves to limit the risk inherent in the firmware upgrades. We can skip component versions of the same component type, resulting in the ability to jump firmware application versions as shown by Example 2 above.","title":"Applications & Components"},{"location":"features/fota/application/#firmware-application-component-management","text":"","title":"Firmware Application &amp; Component Management"},{"location":"features/fota/application/#creating-firmware-component-versions","text":"Each firmware component has its own set of data fields that are required to create a new firmware component version. An example of the types of data each component has are below. Firmware Component Data Fields Device Type Type (MCU, BLE, etc) Semantic Version Component Specific Data Fields","title":"Creating Firmware Component Versions"},{"location":"features/fota/application/#creating-firmware-application-versions","text":"To create a new version of the firmware application, the user defines the following information Firmware Application Data Fields Device Type Semantic Version Components BLE Component Version MCU Component Version etc Dependency (Upgrade Path)","title":"Creating Firmware Application Versions"},{"location":"features/fota/application/#dependency-upgrade-path","text":"Every firmware application version has a dependency entry field that is filled out when the firmware application version is created. This field tells the system what the upgrade path for this specific application version is. Real examples of what this looks like are below.","title":"Dependency (Upgrade Path)"},{"location":"features/fota/application/#example-1","text":"Firmware Application Version 0.2.0 Dependency: >= 0.1.0 The above example is saying that to upgrade to version 0.2.0, the version currently running on the hardware must be greater than or equal to version 0.1.0.","title":"Example 1"},{"location":"features/fota/application/#example-2","text":"Firmware Application Version 0.8.0 Dependency: >=0.3.0 < 0.6.0 || >=0.7.0 The above example is saying that to upgrade to version 0.8.0, the version currently running on the hardware must be (1) greater than or equal to version 0.3.0 and less than version 0.6.0 or (2) greater than or equal to version 0.7.0.","title":"Example 2"},{"location":"features/fota/application/#upgrade-path-requirements","text":"In order to move devices between applications, there are some limitations, outlined below. There can only be one component type difference between consecutive applications a device can upgrade through. This serves to limit the risk inherent in the firmware upgrades. We can skip component versions of the same component type, resulting in the ability to jump firmware application versions as shown by Example 2 above.","title":"Upgrade Path Requirements"},{"location":"features/fota/release/","text":"Firmware Application Releases \u00b6 Firmware applications are released to a set of device groups for a single device type. Note that to release a firmware application to a device group, the firmware application must already exist in the system. Steps to Create a Firmware Application Release \u00b6 Select the device group(s) to release a new firmware application Select the device type Select the firmware application version that will be released Configure the below options Set the start time of the firmware application release Enable or disable upgrades outside of business hours Enable or disable concurrent upgrade limits Set the percentage of locators to include in the release Business Hours: If a given group has business hours, a release can either be scheduled outside of those business hours or continuous. This is to reduce the risk of disrupting business operations. Concurrent Upgrade Limit: The concurrent upgrade limit represents how many devices can upgrade their firmware in a device group at the same time. This number is set at the device type, then can be overridden at the device group level and while creating a release. Percentage of Devices to Upgrade: The user can set the percentage of devices to upgrade for a given release. If you set the release to 10% initially, you can edit this release at a later date to release to 20%. Firmware Application Release States \u00b6 Scheduled: The firmware application release is scheduled, but the start time is in the future Active: The firmware application release is active at a given device group. The release will remain active until it is paused or cancelled, even if all devices in the group have upgraded. This is because if you add more devices to a group, you will want them to upgrade to this firmware version. Paused: The firmware application is paused. Devices will not upgrade their firmware, but the firmware application release remains as the production release at this group. Resuming the firmware application sets the state back to active. Ended: The firmware application has ended for a given group. To upgrade firmware application versions at this group, a new release has to be made.","title":"FOTA Releases"},{"location":"features/fota/release/#firmware-application-releases","text":"Firmware applications are released to a set of device groups for a single device type. Note that to release a firmware application to a device group, the firmware application must already exist in the system.","title":"Firmware Application Releases"},{"location":"features/fota/release/#steps-to-create-a-firmware-application-release","text":"Select the device group(s) to release a new firmware application Select the device type Select the firmware application version that will be released Configure the below options Set the start time of the firmware application release Enable or disable upgrades outside of business hours Enable or disable concurrent upgrade limits Set the percentage of locators to include in the release Business Hours: If a given group has business hours, a release can either be scheduled outside of those business hours or continuous. This is to reduce the risk of disrupting business operations. Concurrent Upgrade Limit: The concurrent upgrade limit represents how many devices can upgrade their firmware in a device group at the same time. This number is set at the device type, then can be overridden at the device group level and while creating a release. Percentage of Devices to Upgrade: The user can set the percentage of devices to upgrade for a given release. If you set the release to 10% initially, you can edit this release at a later date to release to 20%.","title":"Steps to Create a Firmware Application Release"},{"location":"features/fota/release/#firmware-application-release-states","text":"Scheduled: The firmware application release is scheduled, but the start time is in the future Active: The firmware application release is active at a given device group. The release will remain active until it is paused or cancelled, even if all devices in the group have upgraded. This is because if you add more devices to a group, you will want them to upgrade to this firmware version. Paused: The firmware application is paused. Devices will not upgrade their firmware, but the firmware application release remains as the production release at this group. Resuming the firmware application sets the state back to active. Ended: The firmware application has ended for a given group. To upgrade firmware application versions at this group, a new release has to be made.","title":"Firmware Application Release States"},{"location":"features/fota/type/","text":"Device Type \u00b6 Every firmware component and application is device type-specific. There are multiple configurations set at this level, which are outlined below. Max Retry Number \u00b6 The max number of times a device will get sent the \u201cstartFota\u201d command after upgrade errors have been reported. This number can be overridden at the device group level or at the device level. Concurrent Device Upgrade Limit Per Device Group \u00b6 For a given device type, you can set the maximum number of devices in a device group that can be upgrading firmware at the same time. The purpose of this feature is to reduce the load on nearby cell towers by doing too many firmware upgrades at once. This can be overridden at the device group level. For example, if the limit is set so that 10 devices in a device group can upgrade at once, an override can be set so 30 devices in a specific group can upgrade at once. Stale Device Removal \u00b6 If this option is enabled, and all concurrent upgrade seats are filled, devices that have been upgrading for longer than the max upgrade duration will lose their upgrade seat. When devices lose their upgrade seat, the upgrade timeout is reported as an error on the device. This error is counted in the maximum amount of retries a device has for FOTA upgrades. This can be overridden at the device group level. Reporting Same Firmware Application While Upgrading Handled As Error \u00b6 If this option is enabled, and if a device reports the same firmware application while in an upgrading state, it will be assumed the device failed to report an error and a generic error will be reported on the device. This error is counted in the maximum amount of retries a device has for FOTA upgrades.","title":"Device Type"},{"location":"features/fota/type/#device-type","text":"Every firmware component and application is device type-specific. There are multiple configurations set at this level, which are outlined below.","title":"Device Type"},{"location":"features/fota/type/#max-retry-number","text":"The max number of times a device will get sent the \u201cstartFota\u201d command after upgrade errors have been reported. This number can be overridden at the device group level or at the device level.","title":"Max Retry Number"},{"location":"features/fota/type/#concurrent-device-upgrade-limit-per-device-group","text":"For a given device type, you can set the maximum number of devices in a device group that can be upgrading firmware at the same time. The purpose of this feature is to reduce the load on nearby cell towers by doing too many firmware upgrades at once. This can be overridden at the device group level. For example, if the limit is set so that 10 devices in a device group can upgrade at once, an override can be set so 30 devices in a specific group can upgrade at once.","title":"Concurrent Device Upgrade Limit Per Device Group"},{"location":"features/fota/type/#stale-device-removal","text":"If this option is enabled, and all concurrent upgrade seats are filled, devices that have been upgrading for longer than the max upgrade duration will lose their upgrade seat. When devices lose their upgrade seat, the upgrade timeout is reported as an error on the device. This error is counted in the maximum amount of retries a device has for FOTA upgrades. This can be overridden at the device group level.","title":"Stale Device Removal"},{"location":"features/fota/type/#reporting-same-firmware-application-while-upgrading-handled-as-error","text":"If this option is enabled, and if a device reports the same firmware application while in an upgrading state, it will be assumed the device failed to report an error and a generic error will be reported on the device. This error is counted in the maximum amount of retries a device has for FOTA upgrades.","title":"Reporting Same Firmware Application While Upgrading Handled As Error"},{"location":"features/map/","text":"Map Interactions \u00b6","title":"Map Interactions"},{"location":"features/map/#map-interactions","text":"","title":"Map Interactions"},{"location":"features/map/multifloor/","text":"Multi-Floor Management \u00b6","title":"Multi-Floor Management"},{"location":"features/map/multifloor/#multi-floor-management","text":"","title":"Multi-Floor Management"},{"location":"features/map/zone/","text":"Zone Management \u00b6","title":"Zones"},{"location":"features/map/zone/#zone-management","text":"","title":"Zone Management"},{"location":"features/pair/","text":"Pairing \u00b6 Pairing allows users to associate each of their devices to the assets they are actually tracking. For example, a solution may use GPS trackers to monitor positions of a fleet of trucks. The GPS tracker is the device, and the asset is the truck. Pairing associates trackers to trucks, thereby giving business-specific context to each device without having to hard-code business-specific attributes against the device itself. Enable pairing on the UI to allow users to use scan-based, search-based, and/or bulk pairing of assets and devices from the desktop and mobile views of an application. Enabling Pairing \u00b6 To enable pairing on a project, in Architect add the pairingEnabled property to moltenConfigOptions within metadata of the system. If the moltenConfigOptions doesn't already exist, add the entire JSON in: { \"moltenConfigOptions\" : { \"pairingEnabled\" : true } } Then, add one or more of the pairing tags to enable pairing: is:pairing - to enable pairing of an asset to a device one at a time is:bulkPairing - to enable pairing of assets to devices in bulk Apply one or both tags on the relationship attribute on which the pairing will occur. For example, to pair a truck to a tracker, apply tags on the truck blueprint\u2019s tracker attribute. Lastly, create a network for the assets & network for the devices (if not already created), and apply them to the blueprints. This tells the system which identifiers to look for when the user searches for assets and devices in the pairing popup. In Architect go to the Device Control > Networks Click the + Custom button in the upper right to create the device network In the Create Custom Network popup, enter: A name for the network: can be something like asset-network-01 The API Key: can use the same as the name) The identifiers: the field should match the unique identifier used on the asset (e.g. assetId ) In the asset blueprint, add the following tag to the blueprint: network:[asset network name]:[identifier] (e.g. network:asset-network01:assetId ) Repeat the steps for a device network and device blueprint, if not already created Pairing Assets \u00b6 Individual Pairing \u00b6 Individual pairing is accomplished through using the is:pairing tag on the relationship blueprint on which the pairing occurs. Once added, a link icon should appear to the right of the screen title that when clicked shows the action to pair. Pairing icon with pairing action shown To pair an asset to a device: Select the Pair action In the popup, search for the asset in the Asset field (or whatever the asset blueprint is named) and select it from the list Users can also click the camera icon to scan for a barcode using their computer or mobile device's camera. When a barcoe is detected, it will automatically populate in the Asset field Search for the device in the Device field (or whatever the device blueprint is named) and select it from the list Users can also click the camera icon to scan for a barcode using their computer or mobile device's camera. When a barcode is detected, it will automatically populate in the Device field Click Pair and confirm the pairing was succcessful in the confirmation screen Individual pairing screen When you pair, any relevant information, such as the position of the device, will be automatically forwarded to the asset. Pre-selecting asset to pair Selecting an asset on the table (by marking its checkbox) before clicking the Pair action will auto-populate the Asset ID in the pairing form. This avoids having users needing to manually type in the asset ID every time. Bulk Pairing \u00b6 Bulk pairing provides users with a CSV template to populate that when uploaded will pair assets to devices en masse. This is particularly helpful for initial system setup or deployments. Before using bulk pairing, first ensure that the is:bulkPairing tag is applied on the relationship blueprint on which the pairing occurs. Once added, a link icon should appear to the right of the screen title that when clicked shows the action to pair. Pairing icon with bulk pairing action shown To bulk pair: Select the Bulk Pair action from the menu In the Bulk Pair screen, click Bulk Pair CSV Template to download the CSV template Open the template file in a spreadsheet editor of your choice (Excel, Google Sheets, etc.) In the template there are two columns, one for the asset ID and the other for the device ID. Populate the desired pairings in the sheet. The asset and devices entered in the same row will be paired together Save the file Return to the Bulk Pair screen and under Upload File , click Browse Select the populated template file to upload Wait a few seconds for the pairings to occur Confirm the results in the subsequent screens Bulk pairing screen Unpairing Assets \u00b6 Individual Unpairing \u00b6 To unpair an individual asset: Click the link icon and select Unpair In the Unpair screen, search for the the asset ID to unpair Users can also select the checkmark next to the asset before selecting Unpair to auto-populate the asset ID in the unpairing form. Click Unpair and confirm the results in the subsequent screen Bulk Unpairing \u00b6 To unpair assets in bulk: Click the link icon and select Bulk Unpair In the Bulk Pair screen, click Bulk Unpair CSV Template to download the CSV template In the template there is column for the asset ID. Populate the desired asset IDs to unpair in the sheet Save the file Return to the Bulk Unpair screen and under Upload File , click Browse Select the populated template file to upload Wait a few seconds for the unpairings to occur Confirm the results in the subsequent screens","title":"Pairing"},{"location":"features/pair/#pairing","text":"Pairing allows users to associate each of their devices to the assets they are actually tracking. For example, a solution may use GPS trackers to monitor positions of a fleet of trucks. The GPS tracker is the device, and the asset is the truck. Pairing associates trackers to trucks, thereby giving business-specific context to each device without having to hard-code business-specific attributes against the device itself. Enable pairing on the UI to allow users to use scan-based, search-based, and/or bulk pairing of assets and devices from the desktop and mobile views of an application.","title":"Pairing"},{"location":"features/pair/#enabling-pairing","text":"To enable pairing on a project, in Architect add the pairingEnabled property to moltenConfigOptions within metadata of the system. If the moltenConfigOptions doesn't already exist, add the entire JSON in: { \"moltenConfigOptions\" : { \"pairingEnabled\" : true } } Then, add one or more of the pairing tags to enable pairing: is:pairing - to enable pairing of an asset to a device one at a time is:bulkPairing - to enable pairing of assets to devices in bulk Apply one or both tags on the relationship attribute on which the pairing will occur. For example, to pair a truck to a tracker, apply tags on the truck blueprint\u2019s tracker attribute. Lastly, create a network for the assets & network for the devices (if not already created), and apply them to the blueprints. This tells the system which identifiers to look for when the user searches for assets and devices in the pairing popup. In Architect go to the Device Control > Networks Click the + Custom button in the upper right to create the device network In the Create Custom Network popup, enter: A name for the network: can be something like asset-network-01 The API Key: can use the same as the name) The identifiers: the field should match the unique identifier used on the asset (e.g. assetId ) In the asset blueprint, add the following tag to the blueprint: network:[asset network name]:[identifier] (e.g. network:asset-network01:assetId ) Repeat the steps for a device network and device blueprint, if not already created","title":"Enabling Pairing"},{"location":"features/pair/#pairing-assets","text":"","title":"Pairing Assets"},{"location":"features/pair/#individual-pairing","text":"Individual pairing is accomplished through using the is:pairing tag on the relationship blueprint on which the pairing occurs. Once added, a link icon should appear to the right of the screen title that when clicked shows the action to pair. Pairing icon with pairing action shown To pair an asset to a device: Select the Pair action In the popup, search for the asset in the Asset field (or whatever the asset blueprint is named) and select it from the list Users can also click the camera icon to scan for a barcode using their computer or mobile device's camera. When a barcoe is detected, it will automatically populate in the Asset field Search for the device in the Device field (or whatever the device blueprint is named) and select it from the list Users can also click the camera icon to scan for a barcode using their computer or mobile device's camera. When a barcode is detected, it will automatically populate in the Device field Click Pair and confirm the pairing was succcessful in the confirmation screen Individual pairing screen When you pair, any relevant information, such as the position of the device, will be automatically forwarded to the asset. Pre-selecting asset to pair Selecting an asset on the table (by marking its checkbox) before clicking the Pair action will auto-populate the Asset ID in the pairing form. This avoids having users needing to manually type in the asset ID every time.","title":"Individual Pairing"},{"location":"features/pair/#bulk-pairing","text":"Bulk pairing provides users with a CSV template to populate that when uploaded will pair assets to devices en masse. This is particularly helpful for initial system setup or deployments. Before using bulk pairing, first ensure that the is:bulkPairing tag is applied on the relationship blueprint on which the pairing occurs. Once added, a link icon should appear to the right of the screen title that when clicked shows the action to pair. Pairing icon with bulk pairing action shown To bulk pair: Select the Bulk Pair action from the menu In the Bulk Pair screen, click Bulk Pair CSV Template to download the CSV template Open the template file in a spreadsheet editor of your choice (Excel, Google Sheets, etc.) In the template there are two columns, one for the asset ID and the other for the device ID. Populate the desired pairings in the sheet. The asset and devices entered in the same row will be paired together Save the file Return to the Bulk Pair screen and under Upload File , click Browse Select the populated template file to upload Wait a few seconds for the pairings to occur Confirm the results in the subsequent screens Bulk pairing screen","title":"Bulk Pairing"},{"location":"features/pair/#unpairing-assets","text":"","title":"Unpairing Assets"},{"location":"features/pair/#individual-unpairing","text":"To unpair an individual asset: Click the link icon and select Unpair In the Unpair screen, search for the the asset ID to unpair Users can also select the checkmark next to the asset before selecting Unpair to auto-populate the asset ID in the unpairing form. Click Unpair and confirm the results in the subsequent screen","title":"Individual Unpairing"},{"location":"features/pair/#bulk-unpairing","text":"To unpair assets in bulk: Click the link icon and select Bulk Unpair In the Bulk Pair screen, click Bulk Unpair CSV Template to download the CSV template In the template there is column for the asset ID. Populate the desired asset IDs to unpair in the sheet Save the file Return to the Bulk Unpair screen and under Upload File , click Browse Select the populated template file to upload Wait a few seconds for the unpairings to occur Confirm the results in the subsequent screens","title":"Bulk Unpairing"},{"location":"features/search/","text":"Search & Filter Overview \u00b6 The Leverege IoT Stack provides robust capabilities to search and filter your data. Searching for Data \u00b6 Every page of the application contains a search, typically in the upper right of the UI. To search for given item on the screen, begin typing in the search bar. Suggested matching values will be shown in the dropdown as the user types. Hit enter to complete the search. The relevant search results will appear in the table, map, or other components that are configured on the page. Example of search result suggestion feature Filtering and Sorting Data \u00b6 Each data column in a table viewer can be filtered and sorted. Filtering \u00b6 To filter data, click the filter icon next to the column name. It will open a dropdown that contains the list of possible values. Check one or more those values and then click Apply to apply the filter. The results should then be filtered by the selected values. Example of filter dropdown when selecting the filter icon Sorting \u00b6 To sort the data, click the column name directly. A colored line should appear above or below the column header to indicate that it's being sorted either ascending or descending. Click the column header again to cycle through the sorting options, which rotates through ascending, descending, or unsorted (default). Example of Asset ID column being sorted descending when clicking column name Configuring Search \u00b6 The search bar can be configured so that only certain data fields are searchable. For more information on search configuration, see the documentation on Search in the UI Configuration section. Configuring Filters and Sorts \u00b6 It is possible to set defaults and base components for filtering and sorting for a given page using blueprint metadata. Defaults will apply to your search when no filters/sorts have been added by the user. Bases will always apply in addition to user selected sorts and filters. To apply sorts and filters, add metadata to the blueprint of the object that you want to apply filters to. In the below example: A default filter of Name = Bessey will be applied to all cows at the farm.cows path. A base filter of Color = Blue will be applied to all cows on any cow page ( objectType = cow ). A default sort of id by order asc will be applied to all cows on cow pages and a base sort of Name descending will be applied to all cows at the field.cows path. Note: You can use the missing field of a sort with values of _first or _last to sort null values to the top or bottom of a list. \"searchOptions\" : { \"filter\" : { \"default\" : [{ \"filter\" : { \"field\" : \"data/name\" , \"type\" : \"equals\" , \"value\" : \"Bessey\" }, \"matches\" : { \"path\" : \"farm.cows\" } }], \"base\" : [{ \"filter\" : { \"field\" : \"data/color\" , \"type\" : \"equals\" , \"value\" : \"Blue\" }, \"matches\" : { \"objectType\" : \"cow\" } }] }, \"sort\" : { \"default\" : [{ \"matches\" : { \"objectType\" : \"cow\" }, \"sort\" : { \"field\" : \"id\" , \"order\" : \"asc\" } }], \"base\" : [{ \"matches\" : { \"path\" : \"field.cows\" }, \"sort\" : { \"field\" : \"data/name\" , \"order\" : \"desc\" , \"missing\" : \"_first\" } }] } }","title":"Search & Filter Overview"},{"location":"features/search/#search-filter-overview","text":"The Leverege IoT Stack provides robust capabilities to search and filter your data.","title":"Search &amp; Filter Overview"},{"location":"features/search/#searching-for-data","text":"Every page of the application contains a search, typically in the upper right of the UI. To search for given item on the screen, begin typing in the search bar. Suggested matching values will be shown in the dropdown as the user types. Hit enter to complete the search. The relevant search results will appear in the table, map, or other components that are configured on the page. Example of search result suggestion feature","title":"Searching for Data"},{"location":"features/search/#filtering-and-sorting-data","text":"Each data column in a table viewer can be filtered and sorted.","title":"Filtering and Sorting Data"},{"location":"features/search/#filtering","text":"To filter data, click the filter icon next to the column name. It will open a dropdown that contains the list of possible values. Check one or more those values and then click Apply to apply the filter. The results should then be filtered by the selected values. Example of filter dropdown when selecting the filter icon","title":"Filtering"},{"location":"features/search/#sorting","text":"To sort the data, click the column name directly. A colored line should appear above or below the column header to indicate that it's being sorted either ascending or descending. Click the column header again to cycle through the sorting options, which rotates through ascending, descending, or unsorted (default). Example of Asset ID column being sorted descending when clicking column name","title":"Sorting"},{"location":"features/search/#configuring-search","text":"The search bar can be configured so that only certain data fields are searchable. For more information on search configuration, see the documentation on Search in the UI Configuration section.","title":"Configuring Search"},{"location":"features/search/#configuring-filters-and-sorts","text":"It is possible to set defaults and base components for filtering and sorting for a given page using blueprint metadata. Defaults will apply to your search when no filters/sorts have been added by the user. Bases will always apply in addition to user selected sorts and filters. To apply sorts and filters, add metadata to the blueprint of the object that you want to apply filters to. In the below example: A default filter of Name = Bessey will be applied to all cows at the farm.cows path. A base filter of Color = Blue will be applied to all cows on any cow page ( objectType = cow ). A default sort of id by order asc will be applied to all cows on cow pages and a base sort of Name descending will be applied to all cows at the field.cows path. Note: You can use the missing field of a sort with values of _first or _last to sort null values to the top or bottom of a list. \"searchOptions\" : { \"filter\" : { \"default\" : [{ \"filter\" : { \"field\" : \"data/name\" , \"type\" : \"equals\" , \"value\" : \"Bessey\" }, \"matches\" : { \"path\" : \"farm.cows\" } }], \"base\" : [{ \"filter\" : { \"field\" : \"data/color\" , \"type\" : \"equals\" , \"value\" : \"Blue\" }, \"matches\" : { \"objectType\" : \"cow\" } }] }, \"sort\" : { \"default\" : [{ \"matches\" : { \"objectType\" : \"cow\" }, \"sort\" : { \"field\" : \"id\" , \"order\" : \"asc\" } }], \"base\" : [{ \"matches\" : { \"path\" : \"field.cows\" }, \"sort\" : { \"field\" : \"data/name\" , \"order\" : \"desc\" , \"missing\" : \"_first\" } }] } }","title":"Configuring Filters and Sorts"},{"location":"features/search/quicksearch/","text":"Quick Search \u00b6 When you have multiple devices, it\u2019s helpful to use a quick search engine to find a specific device easily. Just like search engines have saved us so much time searching for information, we want to provide users the ability to search for any item within seconds. The Leverege IoT Stack offers two types of quick search: Root-level search: Quickly search devices across the entire application Page-level search: Quickly search devices within a certain level of the application Root Level Search \u00b6 Root-level search is helpful to search for all devices of a particular blueprint type across an entire project. To add the root level search: Go to the blueprint named Asset and under the Info page and add the tag called <has:simpleSearch> Once you add this tag, you will see a search assets button appear on the top navigation bar. Simple search tag added to asset blueprint Root-level Search Assets page appears on the top nav bar Page-Level Search \u00b6 Page-level search is helpful in quickly searching within a specific level of the application. For example, to search all assets in a given company, add the tag <has:simpleSearch> to the company.assets attribute in the Company blueprint. Add page-level quick search in blueprint attribute Page-level search appears on the side navigation bar Adding simple search to attributes It\u2019s important to note that you can only apply page-level searches to attributes representing other blueprints. For instance, within the company blueprint below, you can add the quick search tag to the following attributes: locations, assets, and trackers because these are relationship attributes referencing other blueprints. You cannot add page-level quick search to regular data attributes that don\u2019t have their own blueprints (e.g., email, phone, name, and contact) Configuring Simple Search Results \u00b6 To configure which fields are included in a quick search, click the gear icon in the search bar. Configuration behaves in the same way as the main Search configuration. Configuring searchable fields in Quick Search Executing a simple search will bring users to a dedicated simple search results page. This page must be configured as any other UI page by setting the layout and configuring each component. Refer to the previous documentation on the layout controller and the other UI components for how to configure this in more detail. Configuring the Look & Feel of Quick Search \u00b6 Other tags and metadata can be added to change the look of the quick search page. If configuring a root-level quick search page, the tags and metadata are added on the blueprint If configuring a page-level quick search page, the tags and metadata are added on the attribute Simple Search Tags \u00b6 Tag Description simpleSearchLinkName:<name> Set the name of the quick search page in the nav bar simpleSearchScreenTitle:<title> Set the name of the quick search page in the search results page header simpleSearchNavSort:<SortKey> Set the sort key that determines where the quick search appears in the nav ordering simpleSearchExcludeFrom:<ROLE> Set which role cannot not see quick search simpleSearch:preferredView Set the quick search to be the default redirect page Simple Search Metadata \u00b6 Tag Description strings/simpleSearchHint Set the text on the search hint that appears below the search bar icons/simpleSearchScreenIcon Set the screen icon on the simple search page icons/simpleSearchNavIcon Set the nav icon on the simple search page icons/simpleSearchDoodle Set the doodle artwork above the search bar","title":"Quick Search"},{"location":"features/search/quicksearch/#quick-search","text":"When you have multiple devices, it\u2019s helpful to use a quick search engine to find a specific device easily. Just like search engines have saved us so much time searching for information, we want to provide users the ability to search for any item within seconds. The Leverege IoT Stack offers two types of quick search: Root-level search: Quickly search devices across the entire application Page-level search: Quickly search devices within a certain level of the application","title":"Quick Search"},{"location":"features/search/quicksearch/#root-level-search","text":"Root-level search is helpful to search for all devices of a particular blueprint type across an entire project. To add the root level search: Go to the blueprint named Asset and under the Info page and add the tag called <has:simpleSearch> Once you add this tag, you will see a search assets button appear on the top navigation bar. Simple search tag added to asset blueprint Root-level Search Assets page appears on the top nav bar","title":"Root Level Search"},{"location":"features/search/quicksearch/#page-level-search","text":"Page-level search is helpful in quickly searching within a specific level of the application. For example, to search all assets in a given company, add the tag <has:simpleSearch> to the company.assets attribute in the Company blueprint. Add page-level quick search in blueprint attribute Page-level search appears on the side navigation bar Adding simple search to attributes It\u2019s important to note that you can only apply page-level searches to attributes representing other blueprints. For instance, within the company blueprint below, you can add the quick search tag to the following attributes: locations, assets, and trackers because these are relationship attributes referencing other blueprints. You cannot add page-level quick search to regular data attributes that don\u2019t have their own blueprints (e.g., email, phone, name, and contact)","title":"Page-Level Search"},{"location":"features/search/quicksearch/#configuring-simple-search-results","text":"To configure which fields are included in a quick search, click the gear icon in the search bar. Configuration behaves in the same way as the main Search configuration. Configuring searchable fields in Quick Search Executing a simple search will bring users to a dedicated simple search results page. This page must be configured as any other UI page by setting the layout and configuring each component. Refer to the previous documentation on the layout controller and the other UI components for how to configure this in more detail.","title":"Configuring Simple Search Results"},{"location":"features/search/quicksearch/#configuring-the-look-feel-of-quick-search","text":"Other tags and metadata can be added to change the look of the quick search page. If configuring a root-level quick search page, the tags and metadata are added on the blueprint If configuring a page-level quick search page, the tags and metadata are added on the attribute","title":"Configuring the Look &amp; Feel of Quick Search"},{"location":"features/search/quicksearch/#simple-search-tags","text":"Tag Description simpleSearchLinkName:<name> Set the name of the quick search page in the nav bar simpleSearchScreenTitle:<title> Set the name of the quick search page in the search results page header simpleSearchNavSort:<SortKey> Set the sort key that determines where the quick search appears in the nav ordering simpleSearchExcludeFrom:<ROLE> Set which role cannot not see quick search simpleSearch:preferredView Set the quick search to be the default redirect page","title":"Simple Search Tags"},{"location":"features/search/quicksearch/#simple-search-metadata","text":"Tag Description strings/simpleSearchHint Set the text on the search hint that appears below the search bar icons/simpleSearchScreenIcon Set the screen icon on the simple search page icons/simpleSearchNavIcon Set the nav icon on the simple search page icons/simpleSearchDoodle Set the doodle artwork above the search bar","title":"Simple Search Metadata"},{"location":"features/users/","text":"User Management \u00b6 The Leverege IoT stack offers a powerful set of user management capabilities. Using role-based access control (RBAC), application administrators can add user management to any level of their organizational hierarchy and assign one or more roles to their users. This documentation focuses on enabling the user management function and managing users within applications built using the Leverege Stack. For information on how user roles and permissions are configured, see the documentation on user roles and permissions. Adding a User Management Interface to a Page \u00b6 Users can add a user management interface (the same one seen on API UI) on specific pages of the UI by adding in the has:userManagement tag onto the blueprint corresponding to the page. For example, to add a user management tab onto the Locations page, enter in the tag has:userManagement on the Location blueprint. User management tag applied to blueprint Resulting user management page from adding user management tag Adding Users to a Page \u00b6 To add users to a given part of the system, administrators can either go to: The user management page at the relevant page/level of the application itself, provided that the User Management page has been added using the has:userManagement tag as described in the previous section, OR Adding a user to a specific location using the UI-embedded user management page The Access page in Architect of the System or specific Device to which the user should have access. Adding a user to a specific location using the location's Access page in Architect In either case, the process for adding a user to the page is the same: Click the + Button at the top of the page to open the Add Users page Enter the email address of the user to add, and press Enter If the user is new, select either Invite New User or Create New User Account . If the user already exists, then skip this step. If selecting Invite New User , the system will provide a prompt to select the roles from the system. Once the roles have been selected, click Invite . This will send an automated invitation email to the user, which will contain a link for them to activate their account and enter in the remaining account details and set their password. If selecting Create New User Account , the system will provide a prompt enter in the necessary account information and select the roles to assign the user. Once the roles have been selected, click Create . This will send an automated invitation email to the user, which will contain a link for them to activate their account and log in. Editing and Removing Users from a Page \u00b6 To edit a user's roles, click the pencil icon to the right of their row. Edit the roles in the popup that appears. To remove a user access from a page, mark the checkbox on the left next to their username. Then select the three-dots icon next to Users in the header > Remove User . This removes the user access from the page, but does not delete the user entirely from the system. To delete a user entirely from the system, see the following section. Deleting Users \u00b6 To completely delete a user from the system, in Architect go to the Users page. Find the user to delete and click the gear icon on the right side of the row and select Delete . Hiding a User Management Interface from Certain Roles \u00b6 To hide the user management interface added on a blueprint page from certain roles, use the excludeUserManagementFrom:[roleName] tag, replacing roleName with the desired role name to exclude. Setting The Selectable Roles In User Management UI \u00b6 To set which roles appear on which pages of the UI: Go to the Permissions > Roles page and select the role to configure In the panel on the right, click on the Edit button next to the Metadata section to open up the dialog box Add a property called usedAtBlueprints and enter an array of the blueprint name(s) of the pages for which that role can be selected. The blueprint name should match the alias field in the blueprint configuration. In the example below, the metadata shown is for the Editor role and shows that it is selectable only in a Locations page. The alias of the blueprint is location . The following two screenshots below the metadata show that the role is selectable in the Locations page, but not selectable in other places in the UI (e.g. the Company page). { \"ui\" : { \"defaultUrl\" : { \"type\" : \"urlPathRoleCalculator\" , \"single\" : \"/p/editor/location/:resourceId\" , \"multiple\" : \"/p/editor/location\" , \"resourceType\" : \"5xoe2UpeFrV8xcmvekKbG4\" } }, \"usedAtBlueprints\" : [ \"location\" ], \"priority\" : 1 } Editor role showing on the location page Editor role correctly hidden from the company page","title":"User Management"},{"location":"features/users/#user-management","text":"The Leverege IoT stack offers a powerful set of user management capabilities. Using role-based access control (RBAC), application administrators can add user management to any level of their organizational hierarchy and assign one or more roles to their users. This documentation focuses on enabling the user management function and managing users within applications built using the Leverege Stack. For information on how user roles and permissions are configured, see the documentation on user roles and permissions.","title":"User Management"},{"location":"features/users/#adding-a-user-management-interface-to-a-page","text":"Users can add a user management interface (the same one seen on API UI) on specific pages of the UI by adding in the has:userManagement tag onto the blueprint corresponding to the page. For example, to add a user management tab onto the Locations page, enter in the tag has:userManagement on the Location blueprint. User management tag applied to blueprint Resulting user management page from adding user management tag","title":"Adding a User Management Interface to a Page"},{"location":"features/users/#adding-users-to-a-page","text":"To add users to a given part of the system, administrators can either go to: The user management page at the relevant page/level of the application itself, provided that the User Management page has been added using the has:userManagement tag as described in the previous section, OR Adding a user to a specific location using the UI-embedded user management page The Access page in Architect of the System or specific Device to which the user should have access. Adding a user to a specific location using the location's Access page in Architect In either case, the process for adding a user to the page is the same: Click the + Button at the top of the page to open the Add Users page Enter the email address of the user to add, and press Enter If the user is new, select either Invite New User or Create New User Account . If the user already exists, then skip this step. If selecting Invite New User , the system will provide a prompt to select the roles from the system. Once the roles have been selected, click Invite . This will send an automated invitation email to the user, which will contain a link for them to activate their account and enter in the remaining account details and set their password. If selecting Create New User Account , the system will provide a prompt enter in the necessary account information and select the roles to assign the user. Once the roles have been selected, click Create . This will send an automated invitation email to the user, which will contain a link for them to activate their account and log in.","title":"Adding Users to a Page"},{"location":"features/users/#editing-and-removing-users-from-a-page","text":"To edit a user's roles, click the pencil icon to the right of their row. Edit the roles in the popup that appears. To remove a user access from a page, mark the checkbox on the left next to their username. Then select the three-dots icon next to Users in the header > Remove User . This removes the user access from the page, but does not delete the user entirely from the system. To delete a user entirely from the system, see the following section.","title":"Editing and Removing Users from a Page"},{"location":"features/users/#deleting-users","text":"To completely delete a user from the system, in Architect go to the Users page. Find the user to delete and click the gear icon on the right side of the row and select Delete .","title":"Deleting Users"},{"location":"features/users/#hiding-a-user-management-interface-from-certain-roles","text":"To hide the user management interface added on a blueprint page from certain roles, use the excludeUserManagementFrom:[roleName] tag, replacing roleName with the desired role name to exclude.","title":"Hiding a User Management Interface from Certain Roles"},{"location":"features/users/#setting-the-selectable-roles-in-user-management-ui","text":"To set which roles appear on which pages of the UI: Go to the Permissions > Roles page and select the role to configure In the panel on the right, click on the Edit button next to the Metadata section to open up the dialog box Add a property called usedAtBlueprints and enter an array of the blueprint name(s) of the pages for which that role can be selected. The blueprint name should match the alias field in the blueprint configuration. In the example below, the metadata shown is for the Editor role and shows that it is selectable only in a Locations page. The alias of the blueprint is location . The following two screenshots below the metadata show that the role is selectable in the Locations page, but not selectable in other places in the UI (e.g. the Company page). { \"ui\" : { \"defaultUrl\" : { \"type\" : \"urlPathRoleCalculator\" , \"single\" : \"/p/editor/location/:resourceId\" , \"multiple\" : \"/p/editor/location\" , \"resourceType\" : \"5xoe2UpeFrV8xcmvekKbG4\" } }, \"usedAtBlueprints\" : [ \"location\" ], \"priority\" : 1 } Editor role showing on the location page Editor role correctly hidden from the company page","title":"Setting The Selectable Roles In User Management UI"},{"location":"setup/","text":"UI Setup Overview \u00b6 In this section, we will be covering how to update the Style & Brand of your UI Create & Sort the Navigation Additional Options Available via Development This Section is for Pre-Created Projects If you have not already created your blueprints, relationships, and roles, please review our data architecture section to get started","title":"UI Setup Overview"},{"location":"setup/#ui-setup-overview","text":"In this section, we will be covering how to update the Style & Brand of your UI Create & Sort the Navigation Additional Options Available via Development This Section is for Pre-Created Projects If you have not already created your blueprints, relationships, and roles, please review our data architecture section to get started","title":"UI Setup Overview"},{"location":"setup/dev/","text":"Developer Options \u00b6 Developers have more UI setup options available in the config file for the UI. Below are just the start to what developers can do with the Leverege Stack. Review our Build documentation for a deeper look. Some developer configuration options include: Configuration: Hiding configuration tools from end-users 404 Screen: Changing the copy & illustrations on the 404 screen Network Offline Alert: Changing the copy and icon of the network offline alert Blueprint Action Icons: Changing the create, bulk create, remove, and edit icons User Management: Change different labels & description text within the user management plugin (ie renaming username to account email)","title":"Overview"},{"location":"setup/dev/#developer-options","text":"Developers have more UI setup options available in the config file for the UI. Below are just the start to what developers can do with the Leverege Stack. Review our Build documentation for a deeper look. Some developer configuration options include: Configuration: Hiding configuration tools from end-users 404 Screen: Changing the copy & illustrations on the 404 screen Network Offline Alert: Changing the copy and icon of the network offline alert Blueprint Action Icons: Changing the create, bulk create, remove, and edit icons User Management: Change different labels & description text within the user management plugin (ie renaming username to account email)","title":"Developer Options"},{"location":"setup/multi/","text":"Multi-UI Projects & Use Cases \u00b6 Sometimes for a given project, it's helpful to have multiple user interfaces. This could be useful","title":"Multi-UI Projects & Use Cases"},{"location":"setup/multi/#multi-ui-projects-use-cases","text":"Sometimes for a given project, it's helpful to have multiple user interfaces. This could be useful","title":"Multi-UI Projects &amp; Use Cases"},{"location":"setup/branding/","text":"Branding \u00b6 The Leverege Stack makes customizing the end-user interfaces and emails to your brand very simple. In this section, we'll cover how you can use the UI builder, our global theming engine, and our email/text templates to ensure that your product is visually stunning. UI Theme \u00b6 The UI Builder is a stand-alone tool that allows you to edit & update the CSS theme of all UI elements in real time on your development site. This empowers you to change everything from a button color to the flex direction of a pane, all in one place. UI Inspector \u00b6 In your interfaces, you can turn on the UI inspector, which tells you what variant in the UI builder you are looking at. This allows you to quickly identify and update a given style of a css variant of a UI element. Logos & Branding \u00b6 It's easy to swap in and out different logos in your UIs using the UI Builder. Read our detailed instructions in the logos section. Icons \u00b6 We provide ample opportunity to customize icons. Customize your map icons, navigation icons, title bar icons, and more. Email & SMS Templates \u00b6 You don't have to start from scratch with your notifications. We provide 7 email templates and 3 SMS templates out of the box and provide an easy handlebar editor so you can make any customization you'd like. Empty States & Illustrations \u00b6 When a user is just starting out, it's helpful to guide them through the experience with clear directions and help links. A little illustration here or there never hurt anyone either.","title":"Branding"},{"location":"setup/branding/#branding","text":"The Leverege Stack makes customizing the end-user interfaces and emails to your brand very simple. In this section, we'll cover how you can use the UI builder, our global theming engine, and our email/text templates to ensure that your product is visually stunning.","title":"Branding"},{"location":"setup/branding/#ui-theme","text":"The UI Builder is a stand-alone tool that allows you to edit & update the CSS theme of all UI elements in real time on your development site. This empowers you to change everything from a button color to the flex direction of a pane, all in one place.","title":"UI Theme"},{"location":"setup/branding/#ui-inspector","text":"In your interfaces, you can turn on the UI inspector, which tells you what variant in the UI builder you are looking at. This allows you to quickly identify and update a given style of a css variant of a UI element.","title":"UI Inspector"},{"location":"setup/branding/#logos-branding","text":"It's easy to swap in and out different logos in your UIs using the UI Builder. Read our detailed instructions in the logos section.","title":"Logos &amp; Branding"},{"location":"setup/branding/#icons","text":"We provide ample opportunity to customize icons. Customize your map icons, navigation icons, title bar icons, and more.","title":"Icons"},{"location":"setup/branding/#email-sms-templates","text":"You don't have to start from scratch with your notifications. We provide 7 email templates and 3 SMS templates out of the box and provide an easy handlebar editor so you can make any customization you'd like.","title":"Email &amp; SMS Templates"},{"location":"setup/branding/#empty-states-illustrations","text":"When a user is just starting out, it's helpful to guide them through the experience with clear directions and help links. A little illustration here or there never hurt anyone either.","title":"Empty States &amp; Illustrations"},{"location":"setup/branding/builder/","text":"UI Builder Overview \u00b6 The UI Builder is an application that empowers users with the ability to style UI elements and make visual changes to UI elements in-real time. UI Builder is aimed at designers and other non-technical users to be able to make UI style changes quickly. By making UI style changes through UI Builder, users do not need to know how to code, manipulate HTML/CSS, or redeploy a project. Designers can make styling changes independently of engineers building out the application. This reduces the need to ask engineers to make styling changes and shortens the communication loop. Active Themes Active themes should only be used on dev environments. In your staging and production environments, engineers will export the theme during the deployment so that it is \"static\". This ensures that designers do not accidentally turn an entire production interface pink, for example. Navigating the UI Builder \u00b6 Every project has it's own UI builder project associated with it. If a given project has multiple UIs, a single UI builder project can be used for multiple UIs or each UI can use a unique UI builder project. UI Builder projects are organized by the type of UI element you are editing. You can find the categories down the left side of the project. UI Builder Project When a user clicks into a specific UI element, they can visually see an example of the UI element and can manually update nearly every aspect of it (e.g. color, padding, borders, hover states etc.). Any changes they make to the element are live changes to the development UI. UI Builder Element Editor Variants \u00b6 Each UI type has variations of that element called variants. A variant is a way to reuse the style of a given element in multiple places. For example, if a designer wants to use the same style button on two different places in the UI, they would use the same variant and any changes made to that variant on UI Builder will update both of those buttons. This means that all the designer has to do is specify to the engineer that a given button should inherit a given variant. It also means the engineer can code/place the button and the designer can then use the UI builder to fine tune how it looks. For some components, the variant can be specified in configuration panel of the UI component itself rather than needing to communicate it to the engineer. Creating a New Variant \u00b6 Create a variant by clicking the type of UI element in the left navigation. Then scroll to the bottom of the page and enter in the name of the variant in Variant field and press the + button. Configure the variant in the resulting right hand panel. Adding a new variant Variant Inheritance \u00b6 When creating a new variant, you very rarely need to start from scratch. Let's say you already built your primary button, but now you just need an icon version. Instead of rebuilding all of your styles, you can set your new primaryIconic button to inherit all of the default values from the primary button. Once you set that up, you can add in any overrides you need, maybe the width or border-radius for example. Setting Inheritance","title":"UI Theme"},{"location":"setup/branding/builder/#ui-builder-overview","text":"The UI Builder is an application that empowers users with the ability to style UI elements and make visual changes to UI elements in-real time. UI Builder is aimed at designers and other non-technical users to be able to make UI style changes quickly. By making UI style changes through UI Builder, users do not need to know how to code, manipulate HTML/CSS, or redeploy a project. Designers can make styling changes independently of engineers building out the application. This reduces the need to ask engineers to make styling changes and shortens the communication loop. Active Themes Active themes should only be used on dev environments. In your staging and production environments, engineers will export the theme during the deployment so that it is \"static\". This ensures that designers do not accidentally turn an entire production interface pink, for example.","title":"UI Builder Overview"},{"location":"setup/branding/builder/#navigating-the-ui-builder","text":"Every project has it's own UI builder project associated with it. If a given project has multiple UIs, a single UI builder project can be used for multiple UIs or each UI can use a unique UI builder project. UI Builder projects are organized by the type of UI element you are editing. You can find the categories down the left side of the project. UI Builder Project When a user clicks into a specific UI element, they can visually see an example of the UI element and can manually update nearly every aspect of it (e.g. color, padding, borders, hover states etc.). Any changes they make to the element are live changes to the development UI. UI Builder Element Editor","title":"Navigating the UI Builder"},{"location":"setup/branding/builder/#variants","text":"Each UI type has variations of that element called variants. A variant is a way to reuse the style of a given element in multiple places. For example, if a designer wants to use the same style button on two different places in the UI, they would use the same variant and any changes made to that variant on UI Builder will update both of those buttons. This means that all the designer has to do is specify to the engineer that a given button should inherit a given variant. It also means the engineer can code/place the button and the designer can then use the UI builder to fine tune how it looks. For some components, the variant can be specified in configuration panel of the UI component itself rather than needing to communicate it to the engineer.","title":"Variants"},{"location":"setup/branding/builder/#creating-a-new-variant","text":"Create a variant by clicking the type of UI element in the left navigation. Then scroll to the bottom of the page and enter in the name of the variant in Variant field and press the + button. Configure the variant in the resulting right hand panel. Adding a new variant","title":"Creating a New Variant"},{"location":"setup/branding/builder/#variant-inheritance","text":"When creating a new variant, you very rarely need to start from scratch. Let's say you already built your primary button, but now you just need an icon version. Instead of rebuilding all of your styles, you can set your new primaryIconic button to inherit all of the default values from the primary button. Once you set that up, you can add in any overrides you need, maybe the width or border-radius for example. Setting Inheritance","title":"Variant Inheritance"},{"location":"setup/branding/empty-states/","text":"Empty States & Illustrations \u00b6 No one likes a blank screen. That's why we've given you the ability to add helpful text hints, illustrations, and help links to the different empty states users might come across in the UI. Edit blueprint metadata in the info tab No Data to Load \u00b6 When your users are just starting out with your UI and they haven't added any data yet, they may need some help to guide them in the right direction. That's why we've given you the ability to configure the empty states of certain components, like the table & card list. You can make these changes for a given blueprint in the blueprint's metadata. Configuration options Metadata Example { \"strings\" : { \"noDataTitle\" : \"Add Your Assets\" , \"noDataBody\" : \"Ready to import your asset inventory? Upload your assets in bulk or individually.\" , \"noDataDocLink\" : \"https://www.google.com/\" }, \"icons\" : { \"noData\" : \"https://molten-ui-assets.storage.googleapis.com/no-data.svg\" } } No Search Results \u00b6 Sometimes your user searches for something that just doesn't exist. To help them along the way, and account for any special search and filter behaviors you might have in your application, you can customize your empty search results table & list message per blueprint. Configuration options Metadata Example { \"strings\" : { \"noSearchResultsTitle\" : \"We Couldn't Find Any Matches For That\" , \"noSearchResultsBody\" : \"Please try another search query.\" , }, \"icons\" : { \"noSearchResults\" : \"https://molten-ui-assets.storage.googleapis.com/no-search-results.svg\" } } SVG files will have the best resolution Naming Conventions for Illustrations \u00b6 Image Naming Convention Description no-data.svg Default no data illustration no-search-results.svg Default no search results illustration no-data-blueprint.svg Blueprint-specific no data illustration. Ex. no-data-tracker.svg no-search-results-blueprint.svg Blueprint-specific no search results illustration","title":"Empty States"},{"location":"setup/branding/empty-states/#empty-states-illustrations","text":"No one likes a blank screen. That's why we've given you the ability to add helpful text hints, illustrations, and help links to the different empty states users might come across in the UI. Edit blueprint metadata in the info tab","title":"Empty States &amp; Illustrations"},{"location":"setup/branding/empty-states/#no-data-to-load","text":"When your users are just starting out with your UI and they haven't added any data yet, they may need some help to guide them in the right direction. That's why we've given you the ability to configure the empty states of certain components, like the table & card list. You can make these changes for a given blueprint in the blueprint's metadata. Configuration options Metadata Example { \"strings\" : { \"noDataTitle\" : \"Add Your Assets\" , \"noDataBody\" : \"Ready to import your asset inventory? Upload your assets in bulk or individually.\" , \"noDataDocLink\" : \"https://www.google.com/\" }, \"icons\" : { \"noData\" : \"https://molten-ui-assets.storage.googleapis.com/no-data.svg\" } }","title":"No Data to Load"},{"location":"setup/branding/empty-states/#no-search-results","text":"Sometimes your user searches for something that just doesn't exist. To help them along the way, and account for any special search and filter behaviors you might have in your application, you can customize your empty search results table & list message per blueprint. Configuration options Metadata Example { \"strings\" : { \"noSearchResultsTitle\" : \"We Couldn't Find Any Matches For That\" , \"noSearchResultsBody\" : \"Please try another search query.\" , }, \"icons\" : { \"noSearchResults\" : \"https://molten-ui-assets.storage.googleapis.com/no-search-results.svg\" } } SVG files will have the best resolution","title":"No Search Results"},{"location":"setup/branding/empty-states/#naming-conventions-for-illustrations","text":"Image Naming Convention Description no-data.svg Default no data illustration no-search-results.svg Default no search results illustration no-data-blueprint.svg Blueprint-specific no data illustration. Ex. no-data-tracker.svg no-search-results-blueprint.svg Blueprint-specific no search results illustration","title":"Naming Conventions for Illustrations"},{"location":"setup/branding/icons/","text":"Icon Configuration \u00b6 There are many situations where you will want to customize your icons, whether they are for your navigation, map, headers, or lists. This is easily accomplished by adding metadata via Architect. Before following along, please ensure you have access to our Architect UI. Edit blueprint metadata in the info tab Storing Icons Prior to any of this configuration, the icons must be uploaded to the cloud and hosted publically. We suggest using GCP for this step. You also must know the URL of each icon state. Map Icons \u00b6 The metadata for map icons are found under the mapbox property, which is further subdivided by the icon state. Supported icon types for the map include your default icons (normal, rollover, selected, rollover-selected) and your historical point icons (history, history-rollover, history-selected). Format: PNG Current Location Icon States \u00b6 Possible icon states for the current location of a device on the map History Location Icon States \u00b6 Possible icon states for a historical point of a device on the map Map Examples \u00b6 Example of icons used in map context Metadata Example \u00b6 Icon State Fields Field Definition src The URL of the icon height Height of the icon (px) width Width of the icon (px) { \"icons\" : { \"mapbox\" : { \"history\" : { \"height\" : 48 , \"src\" : \"https://molten-ui-assets.storage.googleapis.com/history.png\" , \"width\" : 48 }, \"history-rollover\" : { \"height\" : 48 , \"src\" : \"https://molten-ui-assets.storage.googleapis.com/history-rollover.png\" , \"width\" : 48 }, \"history-selected\" : { \"height\" : 48 , \"src\" : \"https://molten-ui-assets.storage.googleapis.com/history-selected.png\" , \"width\" : 48 }, \"normal\" : { \"height\" : 53 , \"src\" : \"https://molten-ui-assets.storage.googleapis.com/asset-normal.png\" , \"width\" : 53 }, \"rollover\" : { \"height\" : 80 , \"src\" : \"https://molten-ui-assets.storage.googleapis.com/asset-rollover.png\" , \"width\" : 80 }, \"rollover-selected\" : { \"height\" : 80 , \"src\" : \"https://molten-ui-assets.storage.googleapis.com/asset-rollover-selected.png\" , \"width\" : 80 }, \"selected\" : { \"height\" : 80 , \"src\" : \"https://molten-ui-assets.storage.googleapis.com/asset-selected.png\" , \"width\" : 80 } } Property Image Naming Convention normal blueprint-normal.png rollover blueprint-rollover.png selected blueprint-selected.png rollover-selected blueprint-rollover-selected.png history Global Icon: history.png, Blueprint-Specific Icon: blueprint-history.png history-rollover Global Icon: history-rollover.png, Blueprint-Specific Icon: blueprint-history-rollover.png history-selected Global Icon: history-selected.png, Blueprint-Specific Icon: blueprint-history-selected.png Navigation Icons \u00b6 The navIcon property is used in the top navigation bar and the sidebar, as well as the mobile navigation menu. You can set the default icon in the blueprint metadata. Format: SVG or PNG Icon usage in navigation Metadata Example \u00b6 { \"icons\" : { \"navIcon\" : \"https://molten-ui-assets.storage.googleapis.com/asset-nav.svg\" } } Property Image Naming Convention navIcon blueprint-nav.svg Screen Icons \u00b6 The screenIcon property is used in the header section of a given page. You can set the default icon in the blueprint metadata. Format: SVG or PNG Icon usage in screen titles Metadata Example \u00b6 { \"icons\" : { \"screenIcon\" : \"https://molten-ui-assets.storage.googleapis.com/asset-title.svg\" } } Property Image Naming Convention screenIcon blueprint-title.svg Type Icons \u00b6 The typeIcon property is used in list cards, selection cards, and more. You can set the default icon in the blueprint metadata. Format: SVG or PNG Metadata Example \u00b6 { \"icons\" : { \"typeIcon\" : \"https://molten-ui-assets.storage.googleapis.com/asset-normal.png\" } } For screen icons, some people prefer to use the same icon they used for the normal map property. If so, you will use the same file with the naming convention blueprint-normal.png. If you want to use a seperate file, follow the naming convention below. Property Image Naming Convention typeIcon blueprint-type.svg","title":"Icons"},{"location":"setup/branding/icons/#icon-configuration","text":"There are many situations where you will want to customize your icons, whether they are for your navigation, map, headers, or lists. This is easily accomplished by adding metadata via Architect. Before following along, please ensure you have access to our Architect UI. Edit blueprint metadata in the info tab Storing Icons Prior to any of this configuration, the icons must be uploaded to the cloud and hosted publically. We suggest using GCP for this step. You also must know the URL of each icon state.","title":"Icon Configuration"},{"location":"setup/branding/icons/#map-icons","text":"The metadata for map icons are found under the mapbox property, which is further subdivided by the icon state. Supported icon types for the map include your default icons (normal, rollover, selected, rollover-selected) and your historical point icons (history, history-rollover, history-selected). Format: PNG","title":"Map Icons"},{"location":"setup/branding/icons/#current-location-icon-states","text":"Possible icon states for the current location of a device on the map","title":"Current Location Icon States"},{"location":"setup/branding/icons/#history-location-icon-states","text":"Possible icon states for a historical point of a device on the map","title":"History Location Icon States"},{"location":"setup/branding/icons/#map-examples","text":"Example of icons used in map context","title":"Map Examples"},{"location":"setup/branding/icons/#metadata-example","text":"Icon State Fields Field Definition src The URL of the icon height Height of the icon (px) width Width of the icon (px) { \"icons\" : { \"mapbox\" : { \"history\" : { \"height\" : 48 , \"src\" : \"https://molten-ui-assets.storage.googleapis.com/history.png\" , \"width\" : 48 }, \"history-rollover\" : { \"height\" : 48 , \"src\" : \"https://molten-ui-assets.storage.googleapis.com/history-rollover.png\" , \"width\" : 48 }, \"history-selected\" : { \"height\" : 48 , \"src\" : \"https://molten-ui-assets.storage.googleapis.com/history-selected.png\" , \"width\" : 48 }, \"normal\" : { \"height\" : 53 , \"src\" : \"https://molten-ui-assets.storage.googleapis.com/asset-normal.png\" , \"width\" : 53 }, \"rollover\" : { \"height\" : 80 , \"src\" : \"https://molten-ui-assets.storage.googleapis.com/asset-rollover.png\" , \"width\" : 80 }, \"rollover-selected\" : { \"height\" : 80 , \"src\" : \"https://molten-ui-assets.storage.googleapis.com/asset-rollover-selected.png\" , \"width\" : 80 }, \"selected\" : { \"height\" : 80 , \"src\" : \"https://molten-ui-assets.storage.googleapis.com/asset-selected.png\" , \"width\" : 80 } } Property Image Naming Convention normal blueprint-normal.png rollover blueprint-rollover.png selected blueprint-selected.png rollover-selected blueprint-rollover-selected.png history Global Icon: history.png, Blueprint-Specific Icon: blueprint-history.png history-rollover Global Icon: history-rollover.png, Blueprint-Specific Icon: blueprint-history-rollover.png history-selected Global Icon: history-selected.png, Blueprint-Specific Icon: blueprint-history-selected.png","title":"Metadata Example"},{"location":"setup/branding/icons/#navigation-icons","text":"The navIcon property is used in the top navigation bar and the sidebar, as well as the mobile navigation menu. You can set the default icon in the blueprint metadata. Format: SVG or PNG Icon usage in navigation","title":"Navigation Icons"},{"location":"setup/branding/icons/#metadata-example_1","text":"{ \"icons\" : { \"navIcon\" : \"https://molten-ui-assets.storage.googleapis.com/asset-nav.svg\" } } Property Image Naming Convention navIcon blueprint-nav.svg","title":"Metadata Example"},{"location":"setup/branding/icons/#screen-icons","text":"The screenIcon property is used in the header section of a given page. You can set the default icon in the blueprint metadata. Format: SVG or PNG Icon usage in screen titles","title":"Screen Icons"},{"location":"setup/branding/icons/#metadata-example_2","text":"{ \"icons\" : { \"screenIcon\" : \"https://molten-ui-assets.storage.googleapis.com/asset-title.svg\" } } Property Image Naming Convention screenIcon blueprint-title.svg","title":"Metadata Example"},{"location":"setup/branding/icons/#type-icons","text":"The typeIcon property is used in list cards, selection cards, and more. You can set the default icon in the blueprint metadata. Format: SVG or PNG","title":"Type Icons"},{"location":"setup/branding/icons/#metadata-example_3","text":"{ \"icons\" : { \"typeIcon\" : \"https://molten-ui-assets.storage.googleapis.com/asset-normal.png\" } } For screen icons, some people prefer to use the same icon they used for the normal map property. If so, you will use the same file with the naming convention blueprint-normal.png. If you want to use a seperate file, follow the naming convention below. Property Image Naming Convention typeIcon blueprint-type.svg","title":"Metadata Example"},{"location":"setup/branding/inspector/","text":"UI Inspector Overview \u00b6 Enabling the Inspector The UI Inspector should only be enabled in your development environment. Engineers can enable the inspector per UI. Once the inspector is enabled, you can toggle it on and off using the keyboard shortcut Ctrl + i The UI Inspector allows designers to hover over any UI element in the interface and quickly see the element type and variant name. Because every element is nested in another, the inspector will show the child, then each consecutive parent in the panel. If the element in question is a pane, the inspector will include the layout as well. Inspector","title":"UI Inspector"},{"location":"setup/branding/inspector/#ui-inspector-overview","text":"Enabling the Inspector The UI Inspector should only be enabled in your development environment. Engineers can enable the inspector per UI. Once the inspector is enabled, you can toggle it on and off using the keyboard shortcut Ctrl + i The UI Inspector allows designers to hover over any UI element in the interface and quickly see the element type and variant name. Because every element is nested in another, the inspector will show the child, then each consecutive parent in the panel. If the element in question is a pane, the inspector will include the layout as well. Inspector","title":"UI Inspector Overview"},{"location":"setup/branding/logos/","text":"Updating Logos & Images \u00b6 The logos used in the interfaces are stored in the UI builder in various places. Below, we will show you where each logo is located so that you can update them anytime. Logo Storage The UI Builder does not store any files. Before you begin, please host your logos publicly on the web. We suggest using Google Cloud Storage Buckets or something similar for this step. Top Navigation Logo \u00b6 Top Navigation Logo Element Type: Button Variant Name: navLogo Mobile Override: mobileNavLogo SVG Format for Best Resolution Once you have located the variant, select the variant and navigate to the right hand panel. There, you will select the property tab and paste your URL. Paste URL into icon property field Login Page Options \u00b6 Login Page There are two branding assets that can be configured on this page. Company logo Background image (behind the white box) Login Logo \u00b6 The login logo is a different element & variant in the UI builder than the navLogo. The variant information is below. Element Type: Text Variant Name: loginLogo Edit the logo by navigating to the property tab and pasting the URL (same process as above) Login Background \u00b6 The login background is a pane and the image will be added as the URL of the background property. Element Type: Pane Variant Name: loginBackground Paste URL into background image field","title":"Logos"},{"location":"setup/branding/logos/#updating-logos-images","text":"The logos used in the interfaces are stored in the UI builder in various places. Below, we will show you where each logo is located so that you can update them anytime. Logo Storage The UI Builder does not store any files. Before you begin, please host your logos publicly on the web. We suggest using Google Cloud Storage Buckets or something similar for this step.","title":"Updating Logos &amp; Images"},{"location":"setup/branding/logos/#top-navigation-logo","text":"Top Navigation Logo Element Type: Button Variant Name: navLogo Mobile Override: mobileNavLogo SVG Format for Best Resolution Once you have located the variant, select the variant and navigate to the right hand panel. There, you will select the property tab and paste your URL. Paste URL into icon property field","title":"Top Navigation Logo"},{"location":"setup/branding/logos/#login-page-options","text":"Login Page There are two branding assets that can be configured on this page. Company logo Background image (behind the white box)","title":"Login Page Options"},{"location":"setup/branding/logos/#login-logo","text":"The login logo is a different element & variant in the UI builder than the navLogo. The variant information is below. Element Type: Text Variant Name: loginLogo Edit the logo by navigating to the property tab and pasting the URL (same process as above)","title":"Login Logo"},{"location":"setup/branding/logos/#login-background","text":"The login background is a pane and the image will be added as the URL of the background property. Element Type: Pane Variant Name: loginBackground Paste URL into background image field","title":"Login Background"},{"location":"setup/branding/notifications/","text":"Email & SMS Templates \u00b6 We provide multiple email templates out of the box in Architect. Any email template can be customized using our html editor. Below, we'll walk through how you can easily create and customize your emails. Adding a Template Our available templates are all easy to add under the New Template button in the top right corner Templates in Architect Available Templates \u00b6 Name Alias Purpose Invitation activateAccount When a user is invited to the system, they will receive this email invitation Reset Password resetPassword When a user selects forgot password via the login screen, they will receive this email Reset Password Successful resetPasswordSuccess After a user resets their password, they will receive a confirmation email Profile Changed profileChanged If a user changes any of their profile information, they will receive a confirmation email Login Code loginCode If a user requests a one-time access code via email, they will receive this email with the requested code Two-Step Verification twoFactorCode If a user enables two-step verification with their email, when they try to sign in they will receive this email as the second step in the process Login Code Error loginCodeError Users can not request one-time access codes with the same email that has two-step verification enabled. If they try to request a code, they will receive this email Editing Your Template \u00b6 When you select a template, you will see three tabs. Make sure you save any changes you make in the top right corner. Do not change the alias of a template Tabs Overview Info: Contains the name of the template and the alias . Editing the alias will break the template. Email: Most of the offered templates are email-only. Under the email tab, you will see a handlebar editor where you can edit the email and an email subject text field. Text: If the template has a supported SMS component, you will see the text message under the text tab. Email template editor Supported SMS Templates \u00b6 The following templates also support SMS versions. Name Alias Purpose Login Code loginCode If a user requests a one-time access code via text, they will receive this text with the requested code Two-Step Verification twoFactorCode If a user enables two-step verification with their phone number, when they try to sign in they will receive this text message as the second step in the process Login Code Error loginCodeError Users can not request one-time access codes with the same phone number that has two-step verification enabled. If they try to request a code, they will receive this text Configuring Your Template's Buttons \u00b6 Some email templates include a button that takes you to a given UI. Once you have your UI stood up on the desired URL, you can edit the URL information in a given button to ensure it takes you to the right place. < span style = \"background:#194edc; color:white; padding:10px 20px; border-radius:5px; font-size: 13px;\" > < a style = \"color:white;text-decoration:none;\" href = \"https://yourURLhere/activateAccount?username={{username}}&email={{email}}&token={{activationToken}}{{#if projectId}}&projectId={{projectId}}{{/if}}\" > Join Now </ a > </ span >","title":"Email & SMS Templates"},{"location":"setup/branding/notifications/#email-sms-templates","text":"We provide multiple email templates out of the box in Architect. Any email template can be customized using our html editor. Below, we'll walk through how you can easily create and customize your emails. Adding a Template Our available templates are all easy to add under the New Template button in the top right corner Templates in Architect","title":"Email &amp; SMS Templates"},{"location":"setup/branding/notifications/#available-templates","text":"Name Alias Purpose Invitation activateAccount When a user is invited to the system, they will receive this email invitation Reset Password resetPassword When a user selects forgot password via the login screen, they will receive this email Reset Password Successful resetPasswordSuccess After a user resets their password, they will receive a confirmation email Profile Changed profileChanged If a user changes any of their profile information, they will receive a confirmation email Login Code loginCode If a user requests a one-time access code via email, they will receive this email with the requested code Two-Step Verification twoFactorCode If a user enables two-step verification with their email, when they try to sign in they will receive this email as the second step in the process Login Code Error loginCodeError Users can not request one-time access codes with the same email that has two-step verification enabled. If they try to request a code, they will receive this email","title":"Available Templates"},{"location":"setup/branding/notifications/#editing-your-template","text":"When you select a template, you will see three tabs. Make sure you save any changes you make in the top right corner. Do not change the alias of a template Tabs Overview Info: Contains the name of the template and the alias . Editing the alias will break the template. Email: Most of the offered templates are email-only. Under the email tab, you will see a handlebar editor where you can edit the email and an email subject text field. Text: If the template has a supported SMS component, you will see the text message under the text tab. Email template editor","title":"Editing Your Template"},{"location":"setup/branding/notifications/#supported-sms-templates","text":"The following templates also support SMS versions. Name Alias Purpose Login Code loginCode If a user requests a one-time access code via text, they will receive this text with the requested code Two-Step Verification twoFactorCode If a user enables two-step verification with their phone number, when they try to sign in they will receive this text message as the second step in the process Login Code Error loginCodeError Users can not request one-time access codes with the same phone number that has two-step verification enabled. If they try to request a code, they will receive this text","title":"Supported SMS Templates"},{"location":"setup/branding/notifications/#configuring-your-templates-buttons","text":"Some email templates include a button that takes you to a given UI. Once you have your UI stood up on the desired URL, you can edit the URL information in a given button to ensure it takes you to the right place. < span style = \"background:#194edc; color:white; padding:10px 20px; border-radius:5px; font-size: 13px;\" > < a style = \"color:white;text-decoration:none;\" href = \"https://yourURLhere/activateAccount?username={{username}}&email={{email}}&token={{activationToken}}{{#if projectId}}&projectId={{projectId}}{{/if}}\" > Join Now </ a > </ span >","title":"Configuring Your Template's Buttons"},{"location":"setup/models/","text":"Models \u00b6 Molten uses the concept of a Model in much of its architecture. It is a way of transfering settings and workflows, and defining behaviors in plain JSON. Characteristics \u00b6 A model has several characteristics that should be enforced while using them. Following these characteristics make it easy to save them, restore them, edit them, and find handlers/executors for them. Plain JSON Object \u00b6 Models should be a simple javascript object. They should not be or contain classes, functions, or Dates anywhere in their structure. This allows them to be easy stored to a network server, or added to a Redux like mechanism. Immutable \u00b6 Models should be considered immutable. Changing a field redirectly in a Model will break caches, Redux and UI's that rely on top level object differences. Typed \u00b6 Models should have a type field that defines its unique identity. Normally this is a namespaced string such as myProject.MyModel Working with Models \u00b6 There tends to be a lot of broilerplate code when it comes to mutating models. To support this, the @leverege/model-util library is available for use. For example, when changing a value and following the immutablitly rule above, it would look like: import MyModel from './MyModel' // If model was defined as model = { type : 'myMode' , value : 5 , subValues : { sv : 1 } } // WRONG - Dont do this model . value = 42 // CORRECT - Do this const nModel = MyModel . setValue ( model , 42 ) model === nModel // => false model . subValues === nModel . subValues // => true The @leverege/model-util will support creating getters and setters for single values in the model, for child arrays of items, and for child maps of other values. By leveraging the ModelUtil class these can be created very easily. Once created, these Model should be registered with Plugins by invoking Plugins.add( 'Model', MyModel ) . Because Models have types, they are easily used with the Plugin's Factory mechanism. Setting up a mechanism that should change behaviors based on the type of model installed is just another plugin point. Mechanisms like if/then/else logic options, color or symbol selectors, filtering or exporting of data become new plugin point Factories with the Plugins bound against the Model type. If you need to allow the user to edit a model, going to the ModelEditorFactory to find a React component works great. Using the immutablily principle, the Model object and UI Element's eventData mechanism, change a model via a UI Element and sending the new model value to a change listener is very easy. At the controller level of the UI, the model could be stored into a Components state, or shoved into Redux, or sent across a network.","title":"Models"},{"location":"setup/models/#models","text":"Molten uses the concept of a Model in much of its architecture. It is a way of transfering settings and workflows, and defining behaviors in plain JSON.","title":"Models"},{"location":"setup/models/#characteristics","text":"A model has several characteristics that should be enforced while using them. Following these characteristics make it easy to save them, restore them, edit them, and find handlers/executors for them.","title":"Characteristics"},{"location":"setup/models/#plain-json-object","text":"Models should be a simple javascript object. They should not be or contain classes, functions, or Dates anywhere in their structure. This allows them to be easy stored to a network server, or added to a Redux like mechanism.","title":"Plain JSON Object"},{"location":"setup/models/#immutable","text":"Models should be considered immutable. Changing a field redirectly in a Model will break caches, Redux and UI's that rely on top level object differences.","title":"Immutable"},{"location":"setup/models/#typed","text":"Models should have a type field that defines its unique identity. Normally this is a namespaced string such as myProject.MyModel","title":"Typed"},{"location":"setup/models/#working-with-models","text":"There tends to be a lot of broilerplate code when it comes to mutating models. To support this, the @leverege/model-util library is available for use. For example, when changing a value and following the immutablitly rule above, it would look like: import MyModel from './MyModel' // If model was defined as model = { type : 'myMode' , value : 5 , subValues : { sv : 1 } } // WRONG - Dont do this model . value = 42 // CORRECT - Do this const nModel = MyModel . setValue ( model , 42 ) model === nModel // => false model . subValues === nModel . subValues // => true The @leverege/model-util will support creating getters and setters for single values in the model, for child arrays of items, and for child maps of other values. By leveraging the ModelUtil class these can be created very easily. Once created, these Model should be registered with Plugins by invoking Plugins.add( 'Model', MyModel ) . Because Models have types, they are easily used with the Plugin's Factory mechanism. Setting up a mechanism that should change behaviors based on the type of model installed is just another plugin point. Mechanisms like if/then/else logic options, color or symbol selectors, filtering or exporting of data become new plugin point Factories with the Plugins bound against the Model type. If you need to allow the user to edit a model, going to the ModelEditorFactory to find a React component works great. Using the immutablily principle, the Model object and UI Element's eventData mechanism, change a model via a UI Element and sending the new model value to a change listener is very easy. At the controller level of the UI, the model could be stored into a Components state, or shoved into Redux, or sent across a network.","title":"Working with Models"},{"location":"setup/models/editors/","text":"Model Editors \u00b6 ModelEditorFactory useValueChange Hook - Model and eventData Recursive ModelEditors in ModelEditors","title":"Model Editors"},{"location":"setup/models/editors/#model-editors","text":"ModelEditorFactory useValueChange Hook - Model and eventData Recursive ModelEditors in ModelEditors","title":"Model Editors"},{"location":"setup/models/model-util/","text":"Model Util \u00b6 Example createAllValue createAllArray discussion about normalization of this into { get, indexOf, removeAt, etc } createAllMap discussion about normalization of this into { get, indexOf, removeAt, etc }","title":"Model Util"},{"location":"setup/models/model-util/#model-util","text":"Example createAllValue createAllArray discussion about normalization of this into { get, indexOf, removeAt, etc } createAllMap discussion about normalization of this into { get, indexOf, removeAt, etc }","title":"Model Util"},{"location":"setup/nav/","text":"Plugins \u00b6 Molten makes heavy use of the @leverege/plugins library. This library supplies a central registration mechanism in which various classes, functions, and objects can be declared to participate in other framework's interfaces. Often this binding can occur without the need for a direct dependency on target framework. The uses for this 'repository of things' can very greatly: from dynamic url routing, to custom contextual actions, to attribute definition, to logic intercept mechanisms, to initializers, to UI editor lookups, to colorizers, to name just a few. Use \u00b6 The use of this library can be very simple and the requirements are very few: Including the library in your own code Defining an interface for your custom plugin mechanism (sometimes called Plugin Points) Picking a unique plugin name for your mechanism (usually namespaced, like . ) import { Plugins } from '@leverege/plugin' // 1 const plgs = Plugins . get ( 'myProject.Initializer' ) // 2 plgs . forEach ( ( initializer ) => { initializer . init () // 3 } ) In this example, we have defined our own custom plugin point that will invoke an init method at the appropriate time. It has imported the library (1), asked for all plugins registered as a myProject.Initializer plugin (2), and used the custom plugin point's interface to invoke init() on each plugin (3). It can be that simple to define your own custom Plugins point. To participate in that example plugin point, simply add a plugin to the Plugin mechanism: import { Plugins } from '@leverege/plugin' // 1 MyInitializer = { init : () => { /* do something */ } } // Alternately: molten.addPlugin( 'myProject.Initializer', MyInitializer ) Plugins . add ( 'myProject.Initializer' , MyInitializer ) This Plugins.add() or molten.addPlugin() registers the plugin for use at the specified plugins point. Adding a plugin can be as simple as this. Some plugin points are a little more complicated. These plugin points will often use match objects , type values, and methods to help determine whether or not a particular plugin should be used in a particular instance. Some will define sort values (like Molten's initializer plugins ) to help aid in ordered invokation. Some are meant to be used in Factory lookup mechanism or participate in active Views . These extra mechanisms need to be defined by the plugin points interface documentation so developers can understand how to leverage the particular plugin point. Observable \u00b6 The Plugins mechanism is also observable, meaning that listeners can be registered to detect when plugins are added or removed. This can help plugin endpoints respond to new plugins or avoid ordering issues cause by importation/registration order. It can also help to support dynamic loading of code. // Add a listener to all types const unsubscribeGlobal = Plugins . on ( listener ) // Add a listener to a specific type const unsubscribeType = Plugins . on ( 'myProject.Initializer' , listener ) // To remove a listener from all types Plugins . off ( listener ) // or use the returned function unsubscribeGlobal () // To remove a listener from a specific type Plugins . off ( 'myProject.Initializer' , listener ) // or use the returned function unsubscribeType () The listener method will be invoked with an object when an add or remove occurs: { type , // either 'pluginAdded' or 'pluginRemoved', pluginType , // The plugin type that changed plugin , // The plugin that was added or removed plugins // The Plugins object } An alternative why of determining if Plugins were added or removed without listening to Plugins is to look at the version number for a type. const version = Plugins . getVersion ( 'myProject.Initializer' ) Anytime a plugin is added or removed, the version number will be updated. This change detection is useful when caches are being used to record previous work using the plugins. A change to the version can be used to bust the cache and cause the work to be recalculated with the current plugin set. const version = Plugins . getVersion ( 'myProject.PluginPoint' ) // React Example const result = useMemo ( ( ) => { const p = Plugins . get ( 'myProject.PluginPoint' ) // do some work return result }, [ version ] ) // @leverege/value-cache example const result = valueCache . calc (( ) => { const p = Plugins . get ( 'myProject.PluginPoint' ) // do some work return result }, version )","title":"Plugins"},{"location":"setup/nav/#plugins","text":"Molten makes heavy use of the @leverege/plugins library. This library supplies a central registration mechanism in which various classes, functions, and objects can be declared to participate in other framework's interfaces. Often this binding can occur without the need for a direct dependency on target framework. The uses for this 'repository of things' can very greatly: from dynamic url routing, to custom contextual actions, to attribute definition, to logic intercept mechanisms, to initializers, to UI editor lookups, to colorizers, to name just a few.","title":"Plugins"},{"location":"setup/nav/#use","text":"The use of this library can be very simple and the requirements are very few: Including the library in your own code Defining an interface for your custom plugin mechanism (sometimes called Plugin Points) Picking a unique plugin name for your mechanism (usually namespaced, like . ) import { Plugins } from '@leverege/plugin' // 1 const plgs = Plugins . get ( 'myProject.Initializer' ) // 2 plgs . forEach ( ( initializer ) => { initializer . init () // 3 } ) In this example, we have defined our own custom plugin point that will invoke an init method at the appropriate time. It has imported the library (1), asked for all plugins registered as a myProject.Initializer plugin (2), and used the custom plugin point's interface to invoke init() on each plugin (3). It can be that simple to define your own custom Plugins point. To participate in that example plugin point, simply add a plugin to the Plugin mechanism: import { Plugins } from '@leverege/plugin' // 1 MyInitializer = { init : () => { /* do something */ } } // Alternately: molten.addPlugin( 'myProject.Initializer', MyInitializer ) Plugins . add ( 'myProject.Initializer' , MyInitializer ) This Plugins.add() or molten.addPlugin() registers the plugin for use at the specified plugins point. Adding a plugin can be as simple as this. Some plugin points are a little more complicated. These plugin points will often use match objects , type values, and methods to help determine whether or not a particular plugin should be used in a particular instance. Some will define sort values (like Molten's initializer plugins ) to help aid in ordered invokation. Some are meant to be used in Factory lookup mechanism or participate in active Views . These extra mechanisms need to be defined by the plugin points interface documentation so developers can understand how to leverage the particular plugin point.","title":"Use"},{"location":"setup/nav/#observable","text":"The Plugins mechanism is also observable, meaning that listeners can be registered to detect when plugins are added or removed. This can help plugin endpoints respond to new plugins or avoid ordering issues cause by importation/registration order. It can also help to support dynamic loading of code. // Add a listener to all types const unsubscribeGlobal = Plugins . on ( listener ) // Add a listener to a specific type const unsubscribeType = Plugins . on ( 'myProject.Initializer' , listener ) // To remove a listener from all types Plugins . off ( listener ) // or use the returned function unsubscribeGlobal () // To remove a listener from a specific type Plugins . off ( 'myProject.Initializer' , listener ) // or use the returned function unsubscribeType () The listener method will be invoked with an object when an add or remove occurs: { type , // either 'pluginAdded' or 'pluginRemoved', pluginType , // The plugin type that changed plugin , // The plugin that was added or removed plugins // The Plugins object } An alternative why of determining if Plugins were added or removed without listening to Plugins is to look at the version number for a type. const version = Plugins . getVersion ( 'myProject.Initializer' ) Anytime a plugin is added or removed, the version number will be updated. This change detection is useful when caches are being used to record previous work using the plugins. A change to the version can be used to bust the cache and cause the work to be recalculated with the current plugin set. const version = Plugins . getVersion ( 'myProject.PluginPoint' ) // React Example const result = useMemo ( ( ) => { const p = Plugins . get ( 'myProject.PluginPoint' ) // do some work return result }, [ version ] ) // @leverege/value-cache example const result = valueCache . calc (( ) => { const p = Plugins . get ( 'myProject.PluginPoint' ) // do some work return result }, version )","title":"Observable"},{"location":"setup/nav/page/","text":"Screen Display Options \u00b6 Nesting Screen Display \u00b6 So far, we have used the automatic screen display option, which we call the nesting display. For the nesting display, when you select an item, you are drilled into an entirely new page about that item, featuring a sidebar of that item's children (example below). Nesting Screen Display Embedded Screen Display \u00b6 In many cases, you don't want the entire page to change when you click on an item. Instead, you want the details of a specific item to replace the item list. For example, if you are looking at a list of assets in your location and you select one to learn more, you might not want the side navigation to change to display that asset and it's children. Embedded Screen Display In the image above, you can see the asset details screen replaced the list screen without changing the side navigation. On top of that, in the event that the asset is the parent in a relationship, you will see those child blueprint pages in the top section of the asset detail view. The tag to embed a screen is itemScreen:embed . This is a tag added to the relationship attribute of the blueprint you want to embed. No Screen Display \u00b6 Sometimes, you don't want your user to drill into an item at all. The tag to hide the drill down page all together is itemScreen:none .","title":"Page Display Options"},{"location":"setup/nav/page/#screen-display-options","text":"","title":"Screen Display Options"},{"location":"setup/nav/page/#nesting-screen-display","text":"So far, we have used the automatic screen display option, which we call the nesting display. For the nesting display, when you select an item, you are drilled into an entirely new page about that item, featuring a sidebar of that item's children (example below). Nesting Screen Display","title":"Nesting Screen Display"},{"location":"setup/nav/page/#embedded-screen-display","text":"In many cases, you don't want the entire page to change when you click on an item. Instead, you want the details of a specific item to replace the item list. For example, if you are looking at a list of assets in your location and you select one to learn more, you might not want the side navigation to change to display that asset and it's children. Embedded Screen Display In the image above, you can see the asset details screen replaced the list screen without changing the side navigation. On top of that, in the event that the asset is the parent in a relationship, you will see those child blueprint pages in the top section of the asset detail view. The tag to embed a screen is itemScreen:embed . This is a tag added to the relationship attribute of the blueprint you want to embed.","title":"Embedded Screen Display"},{"location":"setup/nav/page/#no-screen-display","text":"Sometimes, you don't want your user to drill into an item at all. The tag to hide the drill down page all together is itemScreen:none .","title":"No Screen Display"},{"location":"setup/nav/path-overrides/","text":"Styling Overrides \u00b6 To override any blueprint metadata at a specific relationship path, add the property to the metadata of the relationship attribute. For example, to override the location navicon at the company level, you\u2019ll go to the company blueprint\u2019s location attribute and add the metadata. You can override anything from icons & strings to illustrations and documentation links. Anything you have been able to configure thus far can be changed.","title":"Styling Overrides"},{"location":"setup/nav/path-overrides/#styling-overrides","text":"To override any blueprint metadata at a specific relationship path, add the property to the metadata of the relationship attribute. For example, to override the location navicon at the company level, you\u2019ll go to the company blueprint\u2019s location attribute and add the metadata. You can override anything from icons & strings to illustrations and documentation links. Anything you have been able to configure thus far can be changed.","title":"Styling Overrides"},{"location":"setup/nav/role/","text":"Role-Specific Setup \u00b6 If you want a role to have a specific home page in the UI, you can add metadata to the role to specify it's home page. To add the metadata, head to the roles tab in Architect and select the role. In the right panel, you will see an edit button next to the metadata section. Editing Metadata in Architect Properties \u00b6 JSON Path Definition ui/defaultUrl Stores metadata for an initial url calculator for this role. ui/excludeFrom Used to filter roles from being presented in the UI. This includes the role picker in the user menu (top right of UI) and all model editors where a role can be selected for saving/loading models. ui/blockFrom Used to prevent users with certain roles from logging into named or default UIs priority Used by the UI to determine which role should take precedence when a user is assigned to multiple roles. usedAtBlueprints Used to filter roles presented in the User Access screen for a given object type. { \"ui\" : { \"defaultUrl\" : { \"type\" : \"urlPathRoleCalculator\" , \"single\" : \"/p/roleName/blueprintAlias/:resourceId\" , \"multiple\" : \"/p/roleName/blueprintAlias\" , \"resourceType\" : \"blueprintUUID\" }, \"blockFrom\" : [ \"uiName\" ], \"excludeFrom\" : [ \"uiName\" ] }, \"priority\" : 1 , \"usedAtBlueprints\" : [ \"blueprintAlias\" ] }","title":"Role-Specific Settings"},{"location":"setup/nav/role/#role-specific-setup","text":"If you want a role to have a specific home page in the UI, you can add metadata to the role to specify it's home page. To add the metadata, head to the roles tab in Architect and select the role. In the right panel, you will see an edit button next to the metadata section. Editing Metadata in Architect","title":"Role-Specific Setup"},{"location":"setup/nav/role/#properties","text":"JSON Path Definition ui/defaultUrl Stores metadata for an initial url calculator for this role. ui/excludeFrom Used to filter roles from being presented in the UI. This includes the role picker in the user menu (top right of UI) and all model editors where a role can be selected for saving/loading models. ui/blockFrom Used to prevent users with certain roles from logging into named or default UIs priority Used by the UI to determine which role should take precedence when a user is assigned to multiple roles. usedAtBlueprints Used to filter roles presented in the User Access screen for a given object type. { \"ui\" : { \"defaultUrl\" : { \"type\" : \"urlPathRoleCalculator\" , \"single\" : \"/p/roleName/blueprintAlias/:resourceId\" , \"multiple\" : \"/p/roleName/blueprintAlias\" , \"resourceType\" : \"blueprintUUID\" }, \"blockFrom\" : [ \"uiName\" ], \"excludeFrom\" : [ \"uiName\" ] }, \"priority\" : 1 , \"usedAtBlueprints\" : [ \"blueprintAlias\" ] }","title":"Properties"},{"location":"setup/nav/route/","text":"Roots \u00b6 In your UI, you have the ability to decide which blueprint or blueprints will be your root(s). By making a blueprint a root, you are selecting that blueprint to be the root of your hierarchy for that section of the UI. The root page will load a system-wide list of every item of that blueprint type. Let's take the hierarchy below as our example. Hierarchy diagram Let's break down the relationships in the example above. The company blueprint has 3 child relationships, all of which are one-to-many. The child blueprints are: Location Blueprint Asset Blueprint Tracker Blueprint The location blueprint also has child relationships, all of which are one-to-many. These child blueprints are: Asset Blueprint Tracker Blueprint Zone Blueprint Beacon Blueprint Floor Blueprint For a refresher on relationship types and usages, please review our Blueprints & Relationships section help guide. Selecting Roots \u00b6 You can have one root or multiple roots in your UI. In this case, it makes sense for the company blueprint to be a root, which will make the company blueprint a top level navigation option. Company root example On top of adding companies to the top level navigation, the root also will only load that blueprint and it's children. For example, if you selected the location blueprint as a root along with the company blueprint, you would see both in the top nav (example below). Multi-root example Under the location's tab, you will have entirely new set of pages, representing the child blueprints, in your UI. This pages will be completely separate from the pages representing the same blueprint under the company root. To help visualize this, take a look at the diagram below. Multi-root hierarchy Root Groups \u00b6 In some cases, it's helpful to see your assets or trackers across all companies or locations at the root level. In these types of cases, we find it helpful to group those pages together. The grouping mechanism puts a group of root pages into a dropdown in the top navigation, saving you critical screen space. Group dropdown example These pages will load individually, so you will have one page for a system-wide list of assets and one for a system-wide list of trackers. Configuring Roots \u00b6 To make a blueprint a root, all you have to do is add the tag is:root to the blueprint tag section. Group dropdown example Below are the different types of configuration options for roots via tags. Property Purpose is:root Adds the blueprint to the top-level navigation as a root rootNavGroup:<Name> If a blueprint is set as a root, it can be added to a group in the top navigation. Name represents which group the blueprint is added to and is used in the label of the dropdown rootNavGroupIcons:<URL> To set the icon for a group, use this tag on any blueprint in that group. This icon must be hosted publicly online Hiding Roots from Specific Roles \u00b6 Not every role should have the same access, and the same goes for roots. You can easily hide a root from a given role by using the tag excludeFrom:<Role> Property Purpose excludeFrom:<Role> Hides this root from a given role excludeFrom:* Hides this root from all roles. Useful when more than one UI is used for a given project and a root is only needed for one of the two UIs. Note that this requires mutations to implement.","title":"Roots"},{"location":"setup/nav/route/#roots","text":"In your UI, you have the ability to decide which blueprint or blueprints will be your root(s). By making a blueprint a root, you are selecting that blueprint to be the root of your hierarchy for that section of the UI. The root page will load a system-wide list of every item of that blueprint type. Let's take the hierarchy below as our example. Hierarchy diagram Let's break down the relationships in the example above. The company blueprint has 3 child relationships, all of which are one-to-many. The child blueprints are: Location Blueprint Asset Blueprint Tracker Blueprint The location blueprint also has child relationships, all of which are one-to-many. These child blueprints are: Asset Blueprint Tracker Blueprint Zone Blueprint Beacon Blueprint Floor Blueprint For a refresher on relationship types and usages, please review our Blueprints & Relationships section help guide.","title":"Roots"},{"location":"setup/nav/route/#selecting-roots","text":"You can have one root or multiple roots in your UI. In this case, it makes sense for the company blueprint to be a root, which will make the company blueprint a top level navigation option. Company root example On top of adding companies to the top level navigation, the root also will only load that blueprint and it's children. For example, if you selected the location blueprint as a root along with the company blueprint, you would see both in the top nav (example below). Multi-root example Under the location's tab, you will have entirely new set of pages, representing the child blueprints, in your UI. This pages will be completely separate from the pages representing the same blueprint under the company root. To help visualize this, take a look at the diagram below. Multi-root hierarchy","title":"Selecting Roots"},{"location":"setup/nav/route/#root-groups","text":"In some cases, it's helpful to see your assets or trackers across all companies or locations at the root level. In these types of cases, we find it helpful to group those pages together. The grouping mechanism puts a group of root pages into a dropdown in the top navigation, saving you critical screen space. Group dropdown example These pages will load individually, so you will have one page for a system-wide list of assets and one for a system-wide list of trackers.","title":"Root Groups"},{"location":"setup/nav/route/#configuring-roots","text":"To make a blueprint a root, all you have to do is add the tag is:root to the blueprint tag section. Group dropdown example Below are the different types of configuration options for roots via tags. Property Purpose is:root Adds the blueprint to the top-level navigation as a root rootNavGroup:<Name> If a blueprint is set as a root, it can be added to a group in the top navigation. Name represents which group the blueprint is added to and is used in the label of the dropdown rootNavGroupIcons:<URL> To set the icon for a group, use this tag on any blueprint in that group. This icon must be hosted publicly online","title":"Configuring Roots"},{"location":"setup/nav/route/#hiding-roots-from-specific-roles","text":"Not every role should have the same access, and the same goes for roots. You can easily hide a root from a given role by using the tag excludeFrom:<Role> Property Purpose excludeFrom:<Role> Hides this root from a given role excludeFrom:* Hides this root from all roles. Useful when more than one UI is used for a given project and a root is only needed for one of the two UIs. Note that this requires mutations to implement.","title":"Hiding Roots from Specific Roles"},{"location":"setup/nav/sort/","text":"Sort & Order Pages \u00b6 Once you have selected and set up your root, you will find that by clicking on a root item, you are taken to a new page in the UI with a sidebar navigation. For example, let\u2019s look at our example with locations. Location example The sidebar navigation includes: An overview page of the item, named Overview All blueprints that have the location blueprint as a parent, regardless of if the relationship is one-to-one or one-to-many If user management is enabled, a users page. For more information on enabling user management, review {==our documentation here. ==} Icons Reminder that the icons loading into the side navigation were set in the blueprint metadata. Revisit our icons documentation to review this process. Sections & Ordering \u00b6 Desired Layout We are going to break down how you get from the left sidebar navigation above to the right sidebar. To start, let\u2019s break out and order our sections. The tag to order your blueprints is navSort:<SORT_KEY> , where the sort key is comprised of a letter that determines the section and a number that determines the order. The letter and number are separated by a period. Each blueprint's tag is outlined below. Assets: navSort:a.1 Trackers: navSort:a.2 Beacons: navSort:b.1 Floors: navSort:b.2 Zones: navSort:b.3 Because you are sorting the children relationships of a location, these tags get added to the relationship attribute of each blueprint on the location blueprint (image below). Once the tags are applied, you will see a divider align appear between section a & b. Relationship attribute editor The overview and users pages are ordered with different tags. These tags are added to the location blueprint itself. Tag Purpose navSortOverview:<SORT_KEY> To order the overview page, add this tag to the parent blueprint navSortUserManagement:<SORT_KEY> To order the users page, add this tag to the parent blueprint For our example we're working on, the overview and users tags would follow the example below. Overview: navSortOverview:c.1 Users: navSortUserManagement:c.2 Now that we've added all of our tags, our sidebar should look like the sidebar on the left in the image below. We'll be reviewing how to add section titles next. Sections & Ordering Outcome/figcaption> Section Names \u00b6 To add a section name, you'll want to identify the first page in each section. For our inventory section, the first page is the assets attribute. This is where you will add the tag navSectionName:<NAME> . If you want to add the section name above the user management or overview pages, you will need to add a string to your metadata on the parent blueprint. In this case, we would add the string to the metadata on the location blueprint. String Purpose overviewSectionName If the overview page is the first page in a section, add this string to the parent blueprint metadata with the desired name. userManagementSectionName If the users page is the first page in a section, add this string to the parent blueprint metadata with the desired name. For our example, we added the two tags below. On the assets attribute at the location blueprint: navSectionName:Inventory On the beacons attribute at the location blueprint: navSectionName:Installation To add the location management section name, we added the following metadata to the location blueprint. { \"strings\" : { \"overviewSectionName\" : \"Location Management\" } Hiding Pages from Roles \u00b6 Not every role permissioned to a location should have access to every page. To quickly and easily hide a page from a role, use the excludeFrom:<Role> tag on the relationship attribute if the page is a blueprint. The user management page will only appear if the user has permission to perform user management actions. The overview page will appear for any user permissioned to that blueprint.","title":"Sort & Order Pages"},{"location":"setup/nav/sort/#sort-order-pages","text":"Once you have selected and set up your root, you will find that by clicking on a root item, you are taken to a new page in the UI with a sidebar navigation. For example, let\u2019s look at our example with locations. Location example The sidebar navigation includes: An overview page of the item, named Overview All blueprints that have the location blueprint as a parent, regardless of if the relationship is one-to-one or one-to-many If user management is enabled, a users page. For more information on enabling user management, review {==our documentation here. ==} Icons Reminder that the icons loading into the side navigation were set in the blueprint metadata. Revisit our icons documentation to review this process.","title":"Sort &amp; Order Pages"},{"location":"setup/nav/sort/#sections-ordering","text":"Desired Layout We are going to break down how you get from the left sidebar navigation above to the right sidebar. To start, let\u2019s break out and order our sections. The tag to order your blueprints is navSort:<SORT_KEY> , where the sort key is comprised of a letter that determines the section and a number that determines the order. The letter and number are separated by a period. Each blueprint's tag is outlined below. Assets: navSort:a.1 Trackers: navSort:a.2 Beacons: navSort:b.1 Floors: navSort:b.2 Zones: navSort:b.3 Because you are sorting the children relationships of a location, these tags get added to the relationship attribute of each blueprint on the location blueprint (image below). Once the tags are applied, you will see a divider align appear between section a & b. Relationship attribute editor The overview and users pages are ordered with different tags. These tags are added to the location blueprint itself. Tag Purpose navSortOverview:<SORT_KEY> To order the overview page, add this tag to the parent blueprint navSortUserManagement:<SORT_KEY> To order the users page, add this tag to the parent blueprint For our example we're working on, the overview and users tags would follow the example below. Overview: navSortOverview:c.1 Users: navSortUserManagement:c.2 Now that we've added all of our tags, our sidebar should look like the sidebar on the left in the image below. We'll be reviewing how to add section titles next. Sections & Ordering Outcome/figcaption>","title":"Sections &amp; Ordering"},{"location":"setup/nav/sort/#section-names","text":"To add a section name, you'll want to identify the first page in each section. For our inventory section, the first page is the assets attribute. This is where you will add the tag navSectionName:<NAME> . If you want to add the section name above the user management or overview pages, you will need to add a string to your metadata on the parent blueprint. In this case, we would add the string to the metadata on the location blueprint. String Purpose overviewSectionName If the overview page is the first page in a section, add this string to the parent blueprint metadata with the desired name. userManagementSectionName If the users page is the first page in a section, add this string to the parent blueprint metadata with the desired name. For our example, we added the two tags below. On the assets attribute at the location blueprint: navSectionName:Inventory On the beacons attribute at the location blueprint: navSectionName:Installation To add the location management section name, we added the following metadata to the location blueprint. { \"strings\" : { \"overviewSectionName\" : \"Location Management\" }","title":"Section Names"},{"location":"setup/nav/sort/#hiding-pages-from-roles","text":"Not every role permissioned to a location should have access to every page. To quickly and easily hide a page from a role, use the excludeFrom:<Role> tag on the relationship attribute if the page is a blueprint. The user management page will only appear if the user has permission to perform user management actions. The overview page will appear for any user permissioned to that blueprint.","title":"Hiding Pages from Roles"}]}